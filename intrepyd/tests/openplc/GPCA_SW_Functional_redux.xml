<?xml version="1.0" encoding="utf-8"?>
<project><!--(*
 *
 * File: GPCA_SW_Functional_subst.xml
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "GPCA_SW_Functional_subst/GPCA_SW_Logical_Architecture_Subsystem"
 *
 * Model name                      : GPCA_SW_Functional_subst
 * Model version                   : 1.1258
 * Model creator                   : Arno
 * Model last modified by          : rober
 * Model last modified on          : Sun Oct 28 23:08:43 2018
 * Model sample time               : 1s
 * Subsystem name                  : GPCA_SW_Functional_subst/GPCA_SW_Logical_Architecture_Subsystem
 * Subsystem sample time           : 1s
 * Simulink PLC Coder version      : 2.3 (R2017a) 16-Feb-2017
 * ST code generated on            : Mon Oct 29 20:34:22 2018
 *
 * Target IDE selection            : PLCopen XML
 * Test Bench included             : No
 *
 *)
-->
   <fileHeader companyName="The Mathworks, Inc." companyURL="www.mathworks.com" contentDescription="" creationDateTime="2018-10-29T20:34:22" productName="Simulink PLC Coder" productRelease="(R2017a)" productVersion="2.3"/>
   <contentHeader name="GPCA_SW_Functional_subst">
      <coordinateInfo>
         <fbd>
            <scaling x="0" y="0"/>
         </fbd>
         <ld>
            <scaling x="0" y="0"/>
         </ld>
         <sfc>
            <scaling x="0" y="0"/>
         </sfc>
      </coordinateInfo>
   </contentHeader>
   <types>
      <dataTypes>
         <dataType name="GPCA_SW_Outputs">
            <baseType>
               <struct>
                  <variable name="Request_Confirm_Stop">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="b_Log">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Current_System_Mode">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Actual_Infusion_Duration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Flow_Rate_Commanded">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="New_Infusion">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Lock_Timer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Volume_Infused">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Reservoir_Volume">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Is_Audio_Disabled">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Visual_Notification_Message">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Audio_Notification_Command">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Patient_ID">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Drug_Name">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Drug_Concentration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Infusion_Total_Duration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="VTBI_Total">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Flow_Rate_Basal">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_Flow_Rate_Intermittent_Bo">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Duration_Intermittent_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Interval_Intermittent_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Flow_Rate_Patient_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Duration_Patient_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_Lockout_Period_Patient_Bo">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Max_Number_of_Patient_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Flow_Rate_KVO">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Entered_Reservoir_Volume">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Configured">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Error_Message_ID">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Request_Config_Type">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="c_Request_Confirm_Infusionv">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Request_Patient_Drug_Info">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Request_Infusion_Info">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
               </struct>
            </baseType>
         </dataType>
         <dataType name="Patient_Inputs">
            <baseType>
               <struct>
                  <variable name="Patient_Bolus_Request">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
               </struct>
            </baseType>
         </dataType>
         <dataType name="Prescription_Inputs">
            <baseType>
               <struct>
                  <variable name="Patient_ID">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Drug_Name">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Drug_Concentration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="VTBI_Total">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Total_Duration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Flow_Rate_Basal">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_Flow_Rate_Intermittent_Bo">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Duration_Intermittent_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Interval_Intermittent_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Flow_Rate_Patient_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Duration_Patient_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_Lockout_Period_Patient_Bo">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Max_Number_of_Patient_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Entered_Reservoir_Volume">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
               </struct>
            </baseType>
         </dataType>
         <dataType name="Drug_Database_Inputs">
            <baseType>
               <struct>
                  <variable name="Drug_Name">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Drug_Concentration_High">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Drug_Concentration_Low">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="VTBI_High">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="VTBI_Low">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Interval_Patient_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Number_Max_Patient_Bolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Flow_Rate_KVO">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Flow_Rate_High">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Flow_Rate_Low">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
               </struct>
            </baseType>
         </dataType>
         <dataType name="Operator_Commands">
            <baseType>
               <struct>
                  <variable name="System_Start">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="System_Stop">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Infusion_Initiate">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Infusion_Inhibit">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Infusion_Cancel">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Data_Config">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Next">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Back">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Cancel">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Keyboard">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Disable_Audio">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Notification_Cancel">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Configuration_Type">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Confirm_Stop">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
               </struct>
            </baseType>
         </dataType>
         <dataType name="Device_Configuration_Inputs">
            <baseType>
               <struct>
                  <variable name="Audio_Enable_Duration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Audio_Level">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Config_Warning_Duration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Empty_Reservoir">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Low_Reservoir">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Max_Config_Duration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Max_Duration_Over_Infusion">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Max_Duration_Under_Infusion">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Max_Paused_Duration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Max_Idle_Duration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Tolerance_Max">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Tolerance_Min">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Log_Interval">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="System_Test_Interval">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Max_Display_Duration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Max_Confirm_Stop_Duration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
               </struct>
            </baseType>
         </dataType>
         <dataType name="Device_Sensor_Inputs">
            <baseType>
               <struct>
                  <variable name="Flow_Rate_Monitored">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Flow_Rate_Not_Stable">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Air_In_Line">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Occlusion">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Door_Open">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Temprature_Out_Of_Range">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Air_Pressure_Out_Of_Range">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Humidity_Out_Of_Range">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Battery_Depleted">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Battery_Low">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Battery_Unable_To_Charge">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Supply_Voltage_Out_Of_Range">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="CPU_Error">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="RTC_Error">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Watchdog_Interrupt_Detected">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Memory_Corrupted">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Pump_Too_Hot">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Pump_Overheated">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Pump_Primed">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Post_Successful">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
               </struct>
            </baseType>
         </dataType>
      </dataTypes>
      <pous>
         <pou name="c_GPCA_SW_Logical_Architect" pouType="functionBlock">
            <interface>
               <inputVars>
                  <variable name="ssMethodType">
                     <type>
                        <SINT/>
                     </type>
                  </variable>
                  <variable name="SENSOR_IN">
                     <type>
                        <derived name="Device_Sensor_Inputs"/>
                     </type>
                  </variable>
                  <variable name="CONST_IN">
                     <type>
                        <derived name="Device_Configuration_Inputs"/>
                     </type>
                  </variable>
                  <variable name="OP_CMD_IN">
                     <type>
                        <derived name="Operator_Commands"/>
                     </type>
                  </variable>
                  <variable name="DB_IN">
                     <type>
                        <derived name="Drug_Database_Inputs"/>
                     </type>
                  </variable>
                  <variable name="PRES_IN">
                     <type>
                        <derived name="Prescription_Inputs"/>
                     </type>
                  </variable>
                  <variable name="PATIENT_IN">
                     <type>
                        <derived name="Patient_Inputs"/>
                     </type>
                  </variable>
               </inputVars>
               <outputVars>
                  <variable name="GPCA_SW_OUT">
                     <type>
                        <derived name="GPCA_SW_Outputs"/>
                     </type>
                  </variable>
               </outputVars>
               <localVars>
                  <variable name="b_s">
                     <type>
                        <DINT/>
                     </type>
                  </variable>
                  <variable name="overInfusion">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="rtb_ifthen4">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="rtb_LOGGING_OUT_Log">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="rtb_Total_Volume_Infused">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="rtb_Reservoir_Volume_l">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="rtb_TLM_MODE_OUT_System_On">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="rtb_Total_Volume_Infused2">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="rtb_System_Monitor_Failed">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="rtb_Logging_Failed">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="rtb_ifthen">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="rtb_ifthen6">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="rtb_Config_Timer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_TLM_MODE_OUT_Request_Conf">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="c_IM_OUT_Actual_Infusion_Du">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="IM_OUT_New_Infusion">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="IM_OUT_Lock_Timer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="ALARM_OUT_Is_Audio_Disabled">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_ALARM_OUT_Visual_Notifica">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_ALARM_OUT_Audio_Notificat">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Patient_ID">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Drug_Name">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_CONFIG_OUT_Drug_Concentra">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Total_Duration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_VTBI_Total">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Flow_Rate_Basal">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_CONFIG_OUT_Flow_Rate_Inte">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_CONFIG_OUT_Duration_Inter">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_CONFIG_OUT_Interval_Inter">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_CONFIG_OUT_Flow_Rate_Pati">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_CONFIG_OUT_Duration_Patie">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_CONFIG_OUT_Lockout_Period">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_CONFIG_OUT_Max_Number_ofv">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Flow_Rate_KVO">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_CONFIG_OUT_Entered_Reserv">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Configured">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Error_Message_ID">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_CONFIG_OUT_Request_Config">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Request_Confirmv">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Request_Patientv">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="c_CONFIG_OUT_Request_Infusi">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="UnitDelay2_1_DSTATE">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="UnitDelay3_2_DSTATE">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="UnitDelay1_24_DSTATE">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_active_c2_GPCA_SW_Logi">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Confirm_Stop">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_c2_GPCA_SW_Logical_Arc">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="confirmStopTimer">
                     <type>
                        <UINT/>
                     </type>
                  </variable>
                  <variable name="TLM_MODE_OUT_Log_Message_ID">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_active_c1_GPCA_SW_Logi">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_c1_GPCA_SW_Logical_Arc">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_CancelAlarm">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsEmptyReservoir">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsHardwareError">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsEnviromentalError">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsOverInfusionFlowRate">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsOverInfusionVTBI">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsAirInLine">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsOcclusion">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsDoor_Open">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsLowReservoir">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsUnderInfusion">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsFlowRateNotStable">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsIdleTimeExceeded">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="idletimer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsPausedTimeExceeded">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="pausedtimer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsConfigTimeWarning">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsBatteryError">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsPumpHot">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsLoggingFailed">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsSystemMonitorFailed">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="currentAlarm">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Visual">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Audio">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="audioTimer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="cancelAlarm">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="ALARM_OUT_Log_Message_ID">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="overInfusionTimer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="underInfusionTimer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_active_c3_GPCA_SW_Logi">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_c3_GPCA_SW_Logical_Arc">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Configuration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Config_Timer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="New_Configuration">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Reservoir_Volume">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Prescription_Config">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Selected_Configuration_Type">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_PatientID">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_DrugName">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_DrugConcentration">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_VTBI_total">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_Duration_total">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_FlowRate_basal">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_FlowRate_sbolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_FlowRate_pbolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_FlowRate_kvo">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_Duration_sbolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_Duration_pbolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_LockOutPeriod_pbolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_NumberMax_pbolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_Interval_sbolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="t_EnteredReservoirVolume">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Patient_Drug_info">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="validate">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Infusion_info">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="CONFIG_OUT_Log_Message_ID">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="value">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_active_c4_GPCA_SW_Logi">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_c4_GPCA_SW_Logical_Arc">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Infusion_Manager">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="inPatientBolus">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="number_pbolus">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="sbolus_timer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="pbolus_timer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="sbolusInter_timer">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_THERAPY">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Alarm_Paused">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Manual_Paused">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Arbiter_f">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_BASAL">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_PATIENT">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_INTERMITTENT">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="sbolus_req">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="is_Arbiter">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_active_c6_GPCA_SW_Logi">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_c6_GPCA_SW_Logical_Arc">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="LOGGING_OUT_Logging_Failed">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="IM_OUT_Log_Message_ID">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_active_c5_GPCA_SW_Logi">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="c_is_c5_GPCA_SW_Logical_Arc">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="SYS_MON_OUT_System_Monitorv">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="UnitDelay_2_DSTATE">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="UnitDelay_3_DSTATE">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="UnitDelay1_16_DSTATE">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="UnitDelay_DSTATE">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="UnitDelay_4_DSTATE">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
               </localVars>
            </interface>
            <body>
               <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
<![CDATA[

CASE ssMethodType OF
    0: 
        (* InitializeConditions for UnitDelay: '<S1>/Unit Delay' *)
        UnitDelay_2_DSTATE := 0;
        UnitDelay_3_DSTATE := 0;
        (* InitializeConditions for UnitDelay: '<S1>/Unit Delay2' *)
        UnitDelay2_1_DSTATE := FALSE;
        (* InitializeConditions for UnitDelay: '<S1>/Unit Delay3' *)
        UnitDelay3_2_DSTATE := FALSE;
        (* InitializeConditions for UnitDelay: '<S1>/Unit Delay1' *)
        UnitDelay1_16_DSTATE := 0;
        (* InitializeConditions for UnitDelay: '<S17>/Unit Delay' *)
        UnitDelay_DSTATE := 0;
        (* InitializeConditions for UnitDelay: '<S1>/Unit Delay' *)
        UnitDelay_4_DSTATE := FALSE;
        (* InitializeConditions for UnitDelay: '<S1>/Unit Delay1' *)
        UnitDelay1_24_DSTATE := 0;
        (* SystemInitialize for Chart: '<S8>/Top Level Mode Sub-System' *)
        is_Confirm_Stop := 0;
        c_is_active_c2_GPCA_SW_Logi := 0;
        c_is_c2_GPCA_SW_Logical_Arc := 0;
        confirmStopTimer := 0;
        c_TLM_MODE_OUT_Request_Conf := FALSE;
        TLM_MODE_OUT_Log_Message_ID := 0;
        (* SystemInitialize for Chart: '<S2>/Alarm  Sub-System' *)
        is_CancelAlarm := 0;
        is_IsBatteryError := 0;
        is_IsConfigTimeWarning := 0;
        is_IsFlowRateNotStable := 0;
        is_IsIdleTimeExceeded := 0;
        is_IsLoggingFailed := 0;
        is_IsPausedTimeExceeded := 0;
        is_IsPumpHot := 0;
        is_IsSystemMonitorFailed := 0;
        is_IsUnderInfusion := 0;
        is_IsLowReservoir := 0;
        is_IsAirInLine := 0;
        is_IsDoor_Open := 0;
        is_IsOcclusion := 0;
        is_IsOverInfusionFlowRate := 0;
        is_IsOverInfusionVTBI := 0;
        is_IsEmptyReservoir := 0;
        is_IsEnviromentalError := 0;
        is_IsHardwareError := 0;
        is_Audio := 0;
        is_Visual := 0;
        c_is_active_c1_GPCA_SW_Logi := 0;
        c_is_c1_GPCA_SW_Logical_Arc := 0;
        overInfusionTimer := 0;
        underInfusionTimer := 0;
        currentAlarm := 0;
        audioTimer := 0;
        cancelAlarm := 0;
        idletimer := 0;
        pausedtimer := 0;
        ALARM_OUT_Is_Audio_Disabled := 0;
        c_ALARM_OUT_Visual_Notifica := 0;
        c_ALARM_OUT_Audio_Notificat := 0;
        ALARM_OUT_Log_Message_ID := 0;
        (* SystemInitialize for Chart: '<S3>/Config  Sub-System' *)
        is_Configuration := 0;
        is_Prescription_Config := 0;
        is_Infusion_info := 0;
        is_Patient_Drug_info := 0;
        c_is_active_c3_GPCA_SW_Logi := 0;
        c_is_c3_GPCA_SW_Logical_Arc := 0;
        t_DrugConcentration := 0;
        t_DrugName := 0;
        t_Duration_pbolus := 0;
        t_Duration_sbolus := 0;
        t_Duration_total := 0;
        t_FlowRate_basal := 0;
        t_FlowRate_kvo := 0;
        t_FlowRate_pbolus := 0;
        t_FlowRate_sbolus := 0;
        t_Interval_sbolus := 0;
        t_LockOutPeriod_pbolus := 0;
        t_NumberMax_pbolus := 0;
        t_PatientID := 0;
        t_EnteredReservoirVolume := 0;
        t_VTBI_total := 0;
        validate := 0;
        value := 0;
        New_Configuration := FALSE;
        Selected_Configuration_Type := 0;
        CONFIG_OUT_Patient_ID := 0;
        CONFIG_OUT_Drug_Name := 0;
        c_CONFIG_OUT_Drug_Concentra := 0;
        CONFIG_OUT_Total_Duration := 0;
        CONFIG_OUT_VTBI_Total := 0;
        CONFIG_OUT_Flow_Rate_Basal := 0;
        c_CONFIG_OUT_Flow_Rate_Inte := 0;
        c_CONFIG_OUT_Duration_Inter := 0;
        c_CONFIG_OUT_Interval_Inter := 0;
        c_CONFIG_OUT_Flow_Rate_Pati := 0;
        c_CONFIG_OUT_Duration_Patie := 0;
        c_CONFIG_OUT_Lockout_Period := 0;
        c_CONFIG_OUT_Max_Number_ofv := 0;
        CONFIG_OUT_Flow_Rate_KVO := 0;
        c_CONFIG_OUT_Entered_Reserv := 0;
        CONFIG_OUT_Reservoir_Volume := 0;
        CONFIG_OUT_Configured := 0;
        CONFIG_OUT_Error_Message_ID := 0;
        c_CONFIG_OUT_Request_Config := FALSE;
        CONFIG_OUT_Request_Confirmv := FALSE;
        CONFIG_OUT_Request_Patientv := FALSE;
        c_CONFIG_OUT_Request_Infusi := FALSE;
        CONFIG_OUT_Log_Message_ID := 0;
        CONFIG_OUT_Config_Timer := 0;
        (* SystemInitialize for Chart: '<S4>/Infusion Manager Sub-System' *)
        is_Infusion_Manager := 0;
        is_THERAPY := 0;
        is_Arbiter := 0;
        is_BASAL := 0;
        is_INTERMITTENT := 0;
        is_PATIENT := 0;
        is_Alarm_Paused := 0;
        is_Arbiter_f := 0;
        is_Manual_Paused := 0;
        c_is_active_c4_GPCA_SW_Logi := 0;
        c_is_c4_GPCA_SW_Logical_Arc := 0;
        sbolus_req := FALSE;
        sbolus_timer := 0;
        pbolus_timer := 0;
        number_pbolus := 0;
        inPatientBolus := FALSE;
        sbolusInter_timer := 0;
        IM_OUT_Lock_Timer := 0;
        IM_OUT_New_Infusion := FALSE;
        IM_OUT_Log_Message_ID := 0;
        c_IM_OUT_Actual_Infusion_Du := 0;
        (* SystemInitialize for Chart: '<S5>/Log Sub-System' *)
        c_is_active_c6_GPCA_SW_Logi := 0;
        c_is_c6_GPCA_SW_Logical_Arc := 0;
        LOGGING_OUT_Logging_Failed := FALSE;
        (* SystemInitialize for Chart: '<S7>/System Monitor Sub-System' *)
        c_is_active_c5_GPCA_SW_Logi := 0;
        c_is_c5_GPCA_SW_Logical_Arc := 0;
        SYS_MON_OUT_System_Monitorv := FALSE;
    1: 
        (* Chart: '<S8>/Top Level Mode Sub-System' incorporates:
         *  Inport: '<Root>/CONST_IN'
         *  Inport: '<Root>/OP_CMD_IN'
         *  SignalConversion: '<Root>/BusConversion_InsertedFor_CONST_IN_at_outport_0' *)
        (* Gateway: GPCA_SW_Logical_Architecture_Subsystem/Top_Level_Mode_Functional_Subsystem/Top Level Mode Sub-System *)
        (* During: GPCA_SW_Logical_Architecture_Subsystem/Top_Level_Mode_Functional_Subsystem/Top Level Mode Sub-System *)

        IF c_is_active_c2_GPCA_SW_Logi = 0 THEN 
            (* Entry: GPCA_SW_Logical_Architecture_Subsystem/Top_Level_Mode_Functional_Subsystem/Top Level Mode Sub-System *)
            c_is_active_c2_GPCA_SW_Logi := 1;
            (* Entry Internal: GPCA_SW_Logical_Architecture_Subsystem/Top_Level_Mode_Functional_Subsystem/Top Level Mode Sub-System *)

            IF OP_CMD_IN.System_Start THEN 
                (* Transition: '<S19>:4040' *)
                c_is_c2_GPCA_SW_Logical_Arc := 2;
                (* Entry 'TOP_Level_Mode': '<S19>:4024' *)
                rtb_TLM_MODE_OUT_System_On := TRUE;
                (* Entry Internal 'TOP_Level_Mode': '<S19>:4024' *)
                (* Transition: '<S19>:4056' *)
                (* Entry Internal 'Confirm_Stop': '<S19>:4050' *)

                IF OP_CMD_IN.System_Stop THEN 
                    (* Transition: '<S19>:4057' *)
                    is_Confirm_Stop := 2;
                    (* Entry 'ON': '<S19>:4055' *)
                    c_TLM_MODE_OUT_Request_Conf := TRUE;
                    confirmStopTimer := DINT_TO_UINT(UINT_TO_DINT(confirmStopTimer) + 1);
                ELSE 
                    (* Transition: '<S19>:4051' *)
                    is_Confirm_Stop := 1;
                    (* Entry 'OFF': '<S19>:4054' *)
                    c_TLM_MODE_OUT_Request_Conf := FALSE;
                    confirmStopTimer := 0;
                END_IF;

            ELSE 
                (* Transition: '<S19>:4038' *)
                c_is_c2_GPCA_SW_Logical_Arc := 1;
                (* Entry 'NOT_ON': '<S19>:4034' *)
                rtb_TLM_MODE_OUT_System_On := FALSE;
            END_IF;

        ELSIF c_is_c2_GPCA_SW_Logical_Arc = 1 THEN 
            (* During 'NOT_ON': '<S19>:4034' *)

            IF OP_CMD_IN.System_Start THEN 
                (* Transition: '<S19>:4042' *)
                (* Graphical Function 'writeLog': '<S19>:4072' *)
                (* Transition: '<S19>:4065' *)
                TLM_MODE_OUT_Log_Message_ID := 1;
                (* Exit 'NOT_ON': '<S19>:4034' *)
                c_is_c2_GPCA_SW_Logical_Arc := 2;
                (* Entry 'TOP_Level_Mode': '<S19>:4024' *)
                rtb_TLM_MODE_OUT_System_On := TRUE;
                (* Entry Internal 'TOP_Level_Mode': '<S19>:4024' *)
                (* Transition: '<S19>:4056' *)
                (* Entry Internal 'Confirm_Stop': '<S19>:4050' *)

                IF OP_CMD_IN.System_Stop THEN 
                    (* Transition: '<S19>:4057' *)
                    is_Confirm_Stop := 2;
                    (* Entry 'ON': '<S19>:4055' *)
                    c_TLM_MODE_OUT_Request_Conf := TRUE;
                    confirmStopTimer := DINT_TO_UINT(UINT_TO_DINT(confirmStopTimer) + 1);
                ELSE 
                    (* Transition: '<S19>:4051' *)
                    is_Confirm_Stop := 1;
                    (* Entry 'OFF': '<S19>:4054' *)
                    c_TLM_MODE_OUT_Request_Conf := FALSE;
                    confirmStopTimer := 0;
                END_IF;

            ELSE 
                rtb_TLM_MODE_OUT_System_On := FALSE;
            END_IF;

        ELSE 
            (* During 'TOP_Level_Mode': '<S19>:4024' *)
            rtb_TLM_MODE_OUT_System_On := TRUE;
            (* During 'Confirm_Stop': '<S19>:4050' *)

            IF is_Confirm_Stop = 1 THEN 
                (* During 'OFF': '<S19>:4054' *)

                IF OP_CMD_IN.System_Stop THEN 
                    (* Transition: '<S19>:4052' *)
                    is_Confirm_Stop := 2;
                    (* Entry 'ON': '<S19>:4055' *)
                    c_TLM_MODE_OUT_Request_Conf := TRUE;
                    confirmStopTimer := DINT_TO_UINT(UINT_TO_DINT(confirmStopTimer) + 1);
                END_IF;

            ELSE 
                (* During 'ON': '<S19>:4055' *)

                IF  NOT OP_CMD_IN.System_Start THEN 
                    (* Transition: '<S19>:4039' *)
                    (* Graphical Function 'writeLog': '<S19>:4072' *)
                    (* Transition: '<S19>:4065' *)
                    TLM_MODE_OUT_Log_Message_ID := 2;
                    is_Confirm_Stop := 0;
                    (* Exit 'TOP_Level_Mode': '<S19>:4024' *)
                    c_is_c2_GPCA_SW_Logical_Arc := 1;
                    (* Entry 'NOT_ON': '<S19>:4034' *)
                    rtb_TLM_MODE_OUT_System_On := FALSE;
                ELSE 
                    (* Graphical Function 'Step_Scaling_Factor': '<S19>:4070' *)
                    (* Transition: '<S19>:4064' *)

                    IF OP_CMD_IN.Cancel OR (UINT_TO_DINT(confirmStopTimer) > USINT_TO_DINT(CONST_IN.Max_Confirm_Stop_Duration)) THEN 
                        (* Transition: '<S19>:4053' *)
                        is_Confirm_Stop := 1;
                        (* Entry 'OFF': '<S19>:4054' *)
                        c_TLM_MODE_OUT_Request_Conf := FALSE;
                        confirmStopTimer := 0;
                    ELSE 
                        confirmStopTimer := DINT_TO_UINT(UINT_TO_DINT(confirmStopTimer) + 1);
                    END_IF;

                END_IF;

            END_IF;

        END_IF;

        (* End of Chart: '<S8>/Top Level Mode Sub-System' *)
        

        (* Switch: '<S15>/Total_Volume_Infused2' incorporates:
         *  Constant: '<S15>/Constant20'
         *  Constant: '<S15>/Constant21'
         *  Constant: '<S16>/Constant'
         *  Constant: '<S16>/Constant16'
         *  Inport: '<Root>/SENSOR_IN'
         *  SignalConversion: '<Root>/BusConversion_InsertedFor_SENSOR_IN_at_outport_0'
         *  Sum: '<S16>/Subtract'
         *  Switch: '<S16>/Reservoir_Empty'
         *  Switch: '<S16>/Reservoir_Volume'
         *  UnitDelay: '<S1>/Unit Delay1' *)

        IF rtb_TLM_MODE_OUT_System_On THEN 
            rtb_Total_Volume_Infused2 := 8;
            rtb_Reservoir_Volume_l := DINT_TO_USINT(USINT_TO_DINT(UnitDelay1_16_DSTATE) - USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored));
            (* Switch: '<S16>/if then ' incorporates:
             *  Constant: '<S15>/Constant21'
             *  Constant: '<S16>/Constant1'
             *  Constant: '<S16>/Constant2'
             *  Inport: '<Root>/CONST_IN'
             *  Inport: '<Root>/SENSOR_IN'
             *  RelationalOperator: '<S16>/Relational Operator'
             *  SignalConversion: '<Root>/BusConversion_InsertedFor_CONST_IN_at_outport_0'
             *  SignalConversion: '<Root>/BusConversion_InsertedFor_SENSOR_IN_at_outport_0'
             *  Sum: '<S16>/Subtract'
             *  UnitDelay: '<S1>/Unit Delay1' *)

            IF rtb_Reservoir_Volume_l < CONST_IN.Empty_Reservoir THEN 
                rtb_ifthen := TRUE;
            ELSE 
                rtb_ifthen := FALSE;
            END_IF;

            (* End of Switch: '<S16>/if then ' *)
        ELSE 
            rtb_Total_Volume_Infused2 := 0;
            rtb_Reservoir_Volume_l := 0;
            rtb_ifthen := FALSE;
        END_IF;

        (* End of Switch: '<S15>/Total_Volume_Infused2' *)
        

        (* UnitDelay: '<S1>/Unit Delay2' *)
        rtb_System_Monitor_Failed := UnitDelay2_1_DSTATE;
        (* UnitDelay: '<S1>/Unit Delay3' *)
        rtb_Logging_Failed := UnitDelay3_2_DSTATE;
        (* Switch: '<S17>/if then 4 ' incorporates:
         *  Constant: '<S17>/Constant8'
         *  Logic: '<S17>/Logical Operator3'
         *  UnitDelay: '<S17>/Unit Delay'
         *  UnitDelay: '<S1>/Unit Delay' *)

        IF  NOT UnitDelay_4_DSTATE THEN 
            rtb_ifthen4 := UnitDelay_DSTATE;
        ELSE 
            rtb_ifthen4 := 0;
        END_IF;

        (* End of Switch: '<S17>/if then 4 ' *)
        

        (* Sum: '<S17>/Subtract1' incorporates:
         *  Inport: '<Root>/SENSOR_IN'
         *  SignalConversion: '<Root>/BusConversion_InsertedFor_SENSOR_IN_at_outport_0' *)
        rtb_ifthen4 := UDINT_TO_USINT(USINT_TO_UDINT(rtb_ifthen4) + USINT_TO_UDINT(SENSOR_IN.Flow_Rate_Monitored));
        (* Switch: '<S17>/Total_Volume_Infused' incorporates:
         *  Constant: '<S14>/Constant17'
         *  Constant: '<S17>/Constant9'
         *  Switch: '<S14>/In_Therapy' *)

        IF rtb_TLM_MODE_OUT_System_On THEN 
            rtb_Total_Volume_Infused := rtb_ifthen4;
            (* Switch: '<S14>/if then6' incorporates:
             *  Constant: '<S14>/Constant3'
             *  Constant: '<S14>/Constant4'
             *  Constant: '<S14>/Constant5'
             *  RelationalOperator: '<S14>/Relational Operator1'
             *  UnitDelay: '<S1>/Unit Delay' *)

            IF UnitDelay_3_DSTATE > 1 THEN 
                rtb_ifthen6 := TRUE;
            ELSE 
                rtb_ifthen6 := FALSE;
            END_IF;

            (* End of Switch: '<S14>/if then6' *)
        ELSE 
            rtb_Total_Volume_Infused := 0;
            rtb_ifthen6 := FALSE;
        END_IF;

        (* End of Switch: '<S17>/Total_Volume_Infused' *)
        

        (* UnitDelay: '<S1>/Unit Delay1' *)
        rtb_Config_Timer := UnitDelay1_24_DSTATE;
        (* Chart: '<S2>/Alarm  Sub-System' incorporates:
         *  Inport: '<Root>/CONST_IN'
         *  Inport: '<Root>/DB_IN'
         *  Inport: '<Root>/OP_CMD_IN'
         *  Inport: '<Root>/SENSOR_IN'
         *  SignalConversion: '<Root>/BusConversion_InsertedFor_CONST_IN_at_outport_0'
         *  SignalConversion: '<Root>/BusConversion_InsertedFor_SENSOR_IN_at_outport_0'
         *  UnitDelay: '<S1>/Unit Delay' *)
        (* Gateway: GPCA_SW_Logical_Architecture_Subsystem/ALARM_Functional_Subsystem/Alarm  Sub-System *)
        (* During: GPCA_SW_Logical_Architecture_Subsystem/ALARM_Functional_Subsystem/Alarm  Sub-System *)

        IF c_is_active_c1_GPCA_SW_Logi = 0 THEN 
            (* Entry: GPCA_SW_Logical_Architecture_Subsystem/ALARM_Functional_Subsystem/Alarm  Sub-System *)
            c_is_active_c1_GPCA_SW_Logi := 1;
            (* Entry Internal: GPCA_SW_Logical_Architecture_Subsystem/ALARM_Functional_Subsystem/Alarm  Sub-System *)

            IF rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S9>:4696' *)
                c_is_c1_GPCA_SW_Logical_Arc := 1;
                (* Entry Internal 'Alarms': '<S9>:3907' *)
                (* Entry Internal 'CheckAlarm': '<S9>:3953' *)
                (* Entry Internal 'CancelAlarm': '<S9>:4012' *)
                (* Transition: '<S9>:4013' *)
                is_CancelAlarm := 1;
                (* Entry Internal 'Level4': '<S9>:4019' *)
                (* Entry Internal 'IsEmptyReservoir': '<S9>:4020' *)

                IF rtb_ifthen6 AND rtb_ifthen THEN 
                    (* Transition: '<S9>:4193' *)
                    is_IsEmptyReservoir := 2;
                ELSE 
                    (* Transition: '<S9>:4021' *)
                    is_IsEmptyReservoir := 1;
                END_IF;

                (* Entry Internal 'IsHardwareError': '<S9>:4217' *)

                IF ((((SENSOR_IN.Battery_Depleted OR SENSOR_IN.RTC_Error) OR SENSOR_IN.CPU_Error) OR SENSOR_IN.Memory_Corrupted) OR SENSOR_IN.Pump_Too_Hot) OR SENSOR_IN.Watchdog_Interrupt_Detected THEN 
                    (* Transition: '<S9>:4224' *)
                    is_IsHardwareError := 2;
                ELSE 
                    (* Transition: '<S9>:4219' *)
                    is_IsHardwareError := 1;
                END_IF;

                (* Entry Internal 'IsEnviromentalError': '<S9>:4032' *)

                IF (SENSOR_IN.Temprature_Out_Of_Range OR SENSOR_IN.Humidity_Out_Of_Range) OR SENSOR_IN.Air_Pressure_Out_Of_Range THEN 
                    (* Transition: '<S9>:4198' *)
                    is_IsEnviromentalError := 2;
                ELSE 
                    (* Transition: '<S9>:4033' *)
                    is_IsEnviromentalError := 1;
                END_IF;

                (* Entry Internal 'Level3': '<S9>:4038' *)
                (* Entry 'IsOverInfusionFlowRate': '<S9>:4039' *)
                (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                (* Transition: '<S9>:4061' *)
                overInfusion := 0;

                IF rtb_ifthen6 THEN 
                    (* Transition: '<S9>:4062' *)

                    IF SENSOR_IN.Flow_Rate_Monitored > DB_IN.Flow_Rate_High THEN 
                        (* Transition: '<S9>:4063' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) > (((100 + USINT_TO_DINT(CONST_IN.Tolerance_Max)) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE)) THEN 
                        (* Transition: '<S9>:4064' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) > (((100 + USINT_TO_DINT(CONST_IN.Tolerance_Min)) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE)) THEN 
                        (* Transition: '<S9>:4065' *)
                        overInfusion := 2;
                    END_IF;

                END_IF;

                (* Entry Internal 'IsOverInfusionFlowRate': '<S9>:4039' *)

                CASE overInfusion OF
                    1: 
                        (* Transition: '<S9>:4697' *)
                        is_IsOverInfusionFlowRate := 3;
                        (* Entry 'Yes': '<S9>:4051' *)
                    2: 
                        (* Transition: '<S9>:4699' *)
                        is_IsOverInfusionFlowRate := 2;
                        (* Entry 'Monitor': '<S9>:4053' *)
                        (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                        (* Transition: '<S9>:4061' *)
                    ELSE
                        (* Transition: '<S9>:4041' *)
                        is_IsOverInfusionFlowRate := 1;
                        (* Entry 'Check': '<S9>:4052' *)
                        (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                        (* Transition: '<S9>:4061' *)
                END_CASE;

                (* Entry Internal 'IsOverInfusionVTBI': '<S9>:4066' *)

                IF rtb_ifthen6 AND (rtb_Total_Volume_Infused > DB_IN.VTBI_High) THEN 
                    (* Transition: '<S9>:4201' *)
                    is_IsOverInfusionVTBI := 2;
                ELSE 
                    (* Transition: '<S9>:4067' *)
                    is_IsOverInfusionVTBI := 1;
                END_IF;

                (* Entry Internal 'IsAirInLine': '<S9>:4072' *)

                IF SENSOR_IN.Air_In_Line THEN 
                    (* Transition: '<S9>:4202' *)
                    is_IsAirInLine := 2;
                ELSE 
                    (* Transition: '<S9>:4073' *)
                    is_IsAirInLine := 1;
                END_IF;

                (* Entry Internal 'IsOcclusion': '<S9>:4078' *)

                IF SENSOR_IN.Occlusion THEN 
                    (* Transition: '<S9>:4203' *)
                    is_IsOcclusion := 2;
                ELSE 
                    (* Transition: '<S9>:4079' *)
                    is_IsOcclusion := 1;
                END_IF;

                (* Entry Internal 'IsDoor_Open': '<S9>:4084' *)

                IF SENSOR_IN.Door_Open THEN 
                    (* Transition: '<S9>:4204' *)
                    is_IsDoor_Open := 2;
                ELSE 
                    (* Transition: '<S9>:4085' *)
                    is_IsDoor_Open := 1;
                END_IF;

                (* Entry Internal 'Level2': '<S9>:4090' *)
                (* Entry Internal 'IsLowReservoir': '<S9>:4091' *)

                IF rtb_ifthen6 AND (rtb_Reservoir_Volume_l < CONST_IN.Low_Reservoir) THEN 
                    (* Transition: '<S9>:4205' *)
                    is_IsLowReservoir := 2;
                ELSE 
                    (* Transition: '<S9>:4092' *)
                    is_IsLowReservoir := 1;
                END_IF;

                (* Entry Internal 'Level1': '<S9>:4113' *)
                (* Entry 'IsUnderInfusion': '<S9>:4114' *)
                (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                (* Transition: '<S9>:4137' *)
                overInfusion := 0;

                IF rtb_ifthen6 THEN 
                    (* Transition: '<S9>:4139' *)

                    IF SENSOR_IN.Flow_Rate_Monitored < DB_IN.Flow_Rate_Low THEN 
                        (* Transition: '<S9>:4138' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) < (USINT_TO_DINT(UnitDelay_2_DSTATE) - (UDINT_TO_DINT(USINT_TO_UDINT(CONST_IN.Tolerance_Max) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE))) THEN 
                        (* Transition: '<S9>:4140' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) < (USINT_TO_DINT(UnitDelay_2_DSTATE) - (UDINT_TO_DINT(USINT_TO_UDINT(CONST_IN.Tolerance_Min) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE))) THEN 
                        (* Transition: '<S9>:4142' *)
                        overInfusion := 2;
                    END_IF;

                END_IF;

                (* Entry Internal 'IsUnderInfusion': '<S9>:4114' *)

                CASE overInfusion OF
                    1: 
                        (* Transition: '<S9>:4709' *)
                        is_IsUnderInfusion := 3;
                        (* Entry 'Yes': '<S9>:4126' *)
                    2: 
                        (* Transition: '<S9>:4710' *)
                        is_IsUnderInfusion := 2;
                        (* Entry 'Monitor': '<S9>:4128' *)
                        (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                        (* Transition: '<S9>:4137' *)
                    ELSE
                        (* Transition: '<S9>:4116' *)
                        is_IsUnderInfusion := 1;
                        (* Entry 'Check': '<S9>:4127' *)
                        (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                        (* Transition: '<S9>:4137' *)
                END_CASE;

                (* Entry Internal 'IsFlowRateNotStable': '<S9>:4143' *)

                IF rtb_ifthen6 AND SENSOR_IN.Flow_Rate_Not_Stable THEN 
                    (* Transition: '<S9>:4210' *)
                    is_IsFlowRateNotStable := 2;
                ELSE 
                    (* Transition: '<S9>:4144' *)
                    is_IsFlowRateNotStable := 1;
                END_IF;

                (* Entry Internal 'IsIdleTimeExceeded': '<S9>:4149' *)
                (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                IF (UnitDelay_3_DSTATE = 1) AND (CONST_IN.Max_Idle_Duration = 1) THEN 
                    (* Transition: '<S9>:4749' *)
                    is_IsIdleTimeExceeded := 2;
                ELSIF UnitDelay_3_DSTATE = 1 THEN 
                    (* Transition: '<S9>:4748' *)
                    idletimer := 0;
                    is_IsIdleTimeExceeded := 3;
                    (* Entry 'counting': '<S9>:4745' *)
                    idletimer := DINT_TO_USINT(USINT_TO_DINT(idletimer) + 1);
                ELSE 
                    (* Transition: '<S9>:4150' *)
                    is_IsIdleTimeExceeded := 1;
                    (* Entry 'No': '<S9>:4153' *)
                    idletimer := 0;
                END_IF;

                (* Entry Internal 'IsPausedTimeExceeded': '<S9>:4155' *)
                (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                IF (((UnitDelay_3_DSTATE = 6) OR (UnitDelay_3_DSTATE = 7)) OR (UnitDelay_3_DSTATE = 8)) AND (CONST_IN.Max_Paused_Duration = 1) THEN 
                    (* Transition: '<S9>:4760' *)
                    is_IsPausedTimeExceeded := 2;
                ELSIF ((UnitDelay_3_DSTATE = 6) OR (UnitDelay_3_DSTATE = 7)) OR (UnitDelay_3_DSTATE = 8) THEN 
                    (* Transition: '<S9>:4759' *)
                    pausedtimer := 0;
                    is_IsPausedTimeExceeded := 3;
                    (* Entry 'counting': '<S9>:4752' *)
                    pausedtimer := DINT_TO_USINT(USINT_TO_DINT(pausedtimer) + 1);
                ELSE 
                    (* Transition: '<S9>:4753' *)
                    is_IsPausedTimeExceeded := 1;
                    (* Entry 'No': '<S9>:4756' *)
                    pausedtimer := 0;
                END_IF;

                (* Entry Internal 'IsConfigTimeWarning': '<S9>:4161' *)
                (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                IF rtb_Config_Timer > CONST_IN.Config_Warning_Duration THEN 
                    (* Transition: '<S9>:4207' *)
                    is_IsConfigTimeWarning := 2;
                ELSE 
                    (* Transition: '<S9>:4162' *)
                    is_IsConfigTimeWarning := 1;
                END_IF;

                (* Entry Internal 'IsBatteryError': '<S9>:4167' *)

                IF (SENSOR_IN.Battery_Low OR SENSOR_IN.Battery_Unable_To_Charge) OR SENSOR_IN.Supply_Voltage_Out_Of_Range THEN 
                    (* Transition: '<S9>:4212' *)
                    is_IsBatteryError := 2;
                ELSE 
                    (* Transition: '<S9>:4168' *)
                    is_IsBatteryError := 1;
                END_IF;

                (* Entry Internal 'IsPumpHot': '<S9>:4173' *)

                IF SENSOR_IN.Pump_Overheated THEN 
                    (* Transition: '<S9>:4208' *)
                    is_IsPumpHot := 2;
                ELSE 
                    (* Transition: '<S9>:4174' *)
                    is_IsPumpHot := 1;
                END_IF;

                (* Entry Internal 'IsLoggingFailed': '<S9>:4179' *)

                IF rtb_Logging_Failed THEN 
                    (* Transition: '<S9>:4213' *)
                    is_IsLoggingFailed := 2;
                ELSE 
                    (* Transition: '<S9>:4180' *)
                    is_IsLoggingFailed := 1;
                END_IF;

                (* Entry Internal 'IsSystemMonitorFailed': '<S9>:4185' *)

                IF rtb_System_Monitor_Failed THEN 
                    (* Transition: '<S9>:4209' *)
                    is_IsSystemMonitorFailed := 2;
                ELSE 
                    (* Transition: '<S9>:4186' *)
                    is_IsSystemMonitorFailed := 1;
                END_IF;

                (* Entry 'SetAlarmStatus': '<S9>:4018' *)
                (* Graphical Function 'setCurrentAlarm': '<S9>:3955' *)
                (* Transition: '<S9>:3975' *)
                b_s := 0;
                rtb_Config_Timer := 0;

                IF is_IsSystemMonitorFailed = 2 THEN 
                    (* Transition: '<S9>:3976' *)
                    b_s := 18;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsLoggingFailed = 2 THEN 
                    (* Transition: '<S9>:3979' *)
                    b_s := 17;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsPumpHot = 2 THEN 
                    (* Transition: '<S9>:3981' *)
                    b_s := 16;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsBatteryError = 2 THEN 
                    (* Transition: '<S9>:3982' *)
                    b_s := 15;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsConfigTimeWarning = 2 THEN 
                    (* Transition: '<S9>:3985' *)
                    b_s := 14;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsPausedTimeExceeded = 2 THEN 
                    (* Transition: '<S9>:3986' *)
                    b_s := 13;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsIdleTimeExceeded = 2 THEN 
                    (* Transition: '<S9>:3989' *)
                    b_s := 12;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsFlowRateNotStable = 2 THEN 
                    (* Transition: '<S9>:3991' *)
                    b_s := 11;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsUnderInfusion = 3 THEN 
                    (* Transition: '<S9>:3992' *)
                    b_s := 10;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsLowReservoir = 2 THEN 
                    (* Transition: '<S9>:3994' *)
                    b_s := 9;
                    rtb_Config_Timer := 2;
                END_IF;


                IF is_IsDoor_Open = 2 THEN 
                    (* Transition: '<S9>:3997' *)
                    b_s := 8;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsOcclusion = 2 THEN 
                    (* Transition: '<S9>:3999' *)
                    b_s := 7;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsAirInLine = 2 THEN 
                    (* Transition: '<S9>:4000' *)
                    b_s := 6;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsOverInfusionVTBI = 2 THEN 
                    (* Transition: '<S9>:4003' *)
                    b_s := 5;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsOverInfusionFlowRate = 3 THEN 
                    (* Transition: '<S9>:4005' *)
                    b_s := 4;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsHardwareError = 2 THEN 
                    (* Transition: '<S9>:4007' *)
                    b_s := 3;
                    rtb_Config_Timer := 4;
                END_IF;


                IF is_IsEnviromentalError = 2 THEN 
                    (* Transition: '<S9>:4009' *)
                    b_s := 2;
                    rtb_Config_Timer := 4;
                END_IF;


                IF is_IsEmptyReservoir = 2 THEN 
                    (* Transition: '<S9>:4011' *)
                    b_s := 1;
                    rtb_Config_Timer := 4;
                END_IF;

                currentAlarm := DINT_TO_USINT(b_s);
                (* Graphical Function 'setHighestAlarm': '<S9>:4098' *)
                (* Transition: '<S9>:4104' *)
                (* Entry Internal 'Notification': '<S9>:3908' *)
                (* Entry Internal 'Visual': '<S9>:3909' *)

                IF currentAlarm > 0 THEN 
                    (* Transition: '<S9>:4608' *)
                    is_Visual := 1;
                    (* Entry 'AlarmDisplay': '<S9>:3913' *)
                    c_ALARM_OUT_Visual_Notifica := currentAlarm;
                ELSE 
                    (* Transition: '<S9>:3910' *)
                    is_Visual := 2;
                    (* Entry 'OFF': '<S9>:3914' *)
                    c_ALARM_OUT_Visual_Notifica := 0;
                END_IF;

                (* Entry 'Audio': '<S9>:3919' *)
                ALARM_OUT_Is_Audio_Disabled := OP_CMD_IN.Disable_Audio;
                (* Entry Internal 'Audio': '<S9>:3919' *)

                CASE USINT_TO_DINT(OP_CMD_IN.Disable_Audio) OF
                    1: 
                        (* Transition: '<S9>:4599' *)
                        is_Audio := 1;
                        (* Entry 'Disabled': '<S9>:3939' *)
                        c_ALARM_OUT_Audio_Notificat := 0;
                    2: 
                        (* Transition: '<S9>:4600' *)
                        is_Audio := 4;
                        (* Entry 'Silenced': '<S9>:3952' *)
                        audioTimer := 0;
                        c_ALARM_OUT_Audio_Notificat := 0;
                        audioTimer := DINT_TO_USINT(USINT_TO_DINT(audioTimer) + 1);
                    ELSE

                        IF (rtb_Config_Timer > 2) AND (OP_CMD_IN.Disable_Audio = 0) THEN 
                            (* Transition: '<S9>:4601' *)
                            is_Audio := 3;
                            (* Entry 'ON': '<S9>:3938' *)
                            c_ALARM_OUT_Audio_Notificat := CONST_IN.Audio_Level;
                        ELSE 
                            (* Transition: '<S9>:3924' *)
                            is_Audio := 2;
                            (* Entry 'OFF': '<S9>:3937' *)
                            c_ALARM_OUT_Audio_Notificat := 0;
                        END_IF;

                END_CASE;

            ELSE 
                (* Transition: '<S9>:3904' *)
                c_is_c1_GPCA_SW_Logical_Arc := 2;
                (* Entry 'NOT_ON': '<S9>:3899' *)
                rtb_Config_Timer := 0;
            END_IF;

        ELSIF c_is_c1_GPCA_SW_Logical_Arc = 1 THEN 
            (* During 'Alarms': '<S9>:3907' *)

            IF  NOT rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S9>:3901' *)
                (* Exit Internal 'Alarms': '<S9>:3907' *)
                (* Exit Internal 'Notification': '<S9>:3908' *)
                (* Exit Internal 'Audio': '<S9>:3919' *)

                CASE is_Audio OF
                    1: 
                        (* Exit 'Disabled': '<S9>:3939' *)
                        c_ALARM_OUT_Audio_Notificat := 0;
                        is_Audio := 0;
                    2: 
                        (* Exit 'OFF': '<S9>:3937' *)
                        c_ALARM_OUT_Audio_Notificat := 0;
                        is_Audio := 0;
                    3: 
                        (* Exit 'ON': '<S9>:3938' *)
                        c_ALARM_OUT_Audio_Notificat := CONST_IN.Audio_Level;
                        is_Audio := 0;
                    4: 
                        (* Exit 'Silenced': '<S9>:3952' *)
                        c_ALARM_OUT_Audio_Notificat := 0;
                        is_Audio := 0;
                END_CASE;

                (* Exit 'Audio': '<S9>:3919' *)
                ALARM_OUT_Is_Audio_Disabled := OP_CMD_IN.Disable_Audio;
                (* Exit Internal 'Visual': '<S9>:3909' *)

                IF is_Visual = 1 THEN 
                    (* Exit 'AlarmDisplay': '<S9>:3913' *)
                    c_ALARM_OUT_Visual_Notifica := currentAlarm;
                    is_Visual := 0;
                ELSE 
                    is_Visual := 0;
                END_IF;

                (* Exit Internal 'CheckAlarm': '<S9>:3953' *)
                (* Exit 'SetAlarmStatus': '<S9>:4018' *)
                (* Graphical Function 'setCurrentAlarm': '<S9>:3955' *)
                (* Transition: '<S9>:3975' *)
                b_s := 0;

                IF is_IsSystemMonitorFailed = 2 THEN 
                    (* Transition: '<S9>:3976' *)
                    b_s := 18;
                END_IF;


                IF is_IsLoggingFailed = 2 THEN 
                    (* Transition: '<S9>:3979' *)
                    b_s := 17;
                END_IF;


                IF is_IsPumpHot = 2 THEN 
                    (* Transition: '<S9>:3981' *)
                    b_s := 16;
                END_IF;


                IF is_IsBatteryError = 2 THEN 
                    (* Transition: '<S9>:3982' *)
                    b_s := 15;
                END_IF;


                IF is_IsConfigTimeWarning = 2 THEN 
                    (* Transition: '<S9>:3985' *)
                    b_s := 14;
                END_IF;


                IF is_IsPausedTimeExceeded = 2 THEN 
                    (* Transition: '<S9>:3986' *)
                    b_s := 13;
                END_IF;


                IF is_IsIdleTimeExceeded = 2 THEN 
                    (* Transition: '<S9>:3989' *)
                    b_s := 12;
                END_IF;


                IF is_IsFlowRateNotStable = 2 THEN 
                    (* Transition: '<S9>:3991' *)
                    b_s := 11;
                END_IF;


                IF is_IsUnderInfusion = 3 THEN 
                    (* Transition: '<S9>:3992' *)
                    b_s := 10;
                END_IF;


                IF is_IsLowReservoir = 2 THEN 
                    (* Transition: '<S9>:3994' *)
                    b_s := 9;
                END_IF;


                IF is_IsDoor_Open = 2 THEN 
                    (* Transition: '<S9>:3997' *)
                    b_s := 8;
                END_IF;


                IF is_IsOcclusion = 2 THEN 
                    (* Transition: '<S9>:3999' *)
                    b_s := 7;
                END_IF;


                IF is_IsAirInLine = 2 THEN 
                    (* Transition: '<S9>:4000' *)
                    b_s := 6;
                END_IF;


                IF is_IsOverInfusionVTBI = 2 THEN 
                    (* Transition: '<S9>:4003' *)
                    b_s := 5;
                END_IF;


                IF is_IsOverInfusionFlowRate = 3 THEN 
                    (* Transition: '<S9>:4005' *)
                    b_s := 4;
                END_IF;


                IF is_IsHardwareError = 2 THEN 
                    (* Transition: '<S9>:4007' *)
                    b_s := 3;
                END_IF;


                IF is_IsEnviromentalError = 2 THEN 
                    (* Transition: '<S9>:4009' *)
                    b_s := 2;
                END_IF;


                IF is_IsEmptyReservoir = 2 THEN 
                    (* Transition: '<S9>:4011' *)
                    b_s := 1;
                END_IF;

                currentAlarm := DINT_TO_USINT(b_s);
                (* Graphical Function 'setHighestAlarm': '<S9>:4098' *)
                (* Transition: '<S9>:4104' *)
                cancelAlarm := 0;
                (* Exit Internal 'Level1': '<S9>:4113' *)
                (* Exit Internal 'IsSystemMonitorFailed': '<S9>:4185' *)
                is_IsSystemMonitorFailed := 0;
                (* Exit Internal 'IsLoggingFailed': '<S9>:4179' *)
                is_IsLoggingFailed := 0;
                (* Exit Internal 'IsPumpHot': '<S9>:4173' *)
                is_IsPumpHot := 0;
                (* Exit Internal 'IsBatteryError': '<S9>:4167' *)
                is_IsBatteryError := 0;
                (* Exit Internal 'IsConfigTimeWarning': '<S9>:4161' *)
                is_IsConfigTimeWarning := 0;
                (* Exit Internal 'IsPausedTimeExceeded': '<S9>:4155' *)

                CASE is_IsPausedTimeExceeded OF
                    1: 
                        (* Exit 'No': '<S9>:4756' *)
                        pausedtimer := 0;
                        is_IsPausedTimeExceeded := 0;
                    3: 
                        (* Exit 'counting': '<S9>:4752' *)
                        pausedtimer := DINT_TO_USINT(USINT_TO_DINT(pausedtimer) + 1);
                        is_IsPausedTimeExceeded := 0;
                    ELSE
                        is_IsPausedTimeExceeded := 0;
                END_CASE;

                (* Exit Internal 'IsIdleTimeExceeded': '<S9>:4149' *)

                CASE is_IsIdleTimeExceeded OF
                    1: 
                        (* Exit 'No': '<S9>:4153' *)
                        idletimer := 0;
                        is_IsIdleTimeExceeded := 0;
                    3: 
                        (* Exit 'counting': '<S9>:4745' *)
                        idletimer := DINT_TO_USINT(USINT_TO_DINT(idletimer) + 1);
                        is_IsIdleTimeExceeded := 0;
                    ELSE
                        is_IsIdleTimeExceeded := 0;
                END_CASE;

                (* Exit Internal 'IsFlowRateNotStable': '<S9>:4143' *)
                is_IsFlowRateNotStable := 0;
                (* Exit Internal 'IsUnderInfusion': '<S9>:4114' *)
                is_IsUnderInfusion := 0;
                (* Exit 'IsUnderInfusion': '<S9>:4114' *)
                (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                (* Transition: '<S9>:4137' *)
                (* Exit Internal 'Level2': '<S9>:4090' *)
                (* Exit Internal 'IsLowReservoir': '<S9>:4091' *)
                is_IsLowReservoir := 0;
                (* Exit Internal 'Level3': '<S9>:4038' *)
                (* Exit Internal 'IsDoor_Open': '<S9>:4084' *)
                is_IsDoor_Open := 0;
                (* Exit Internal 'IsOcclusion': '<S9>:4078' *)
                is_IsOcclusion := 0;
                (* Exit Internal 'IsAirInLine': '<S9>:4072' *)
                is_IsAirInLine := 0;
                (* Exit Internal 'IsOverInfusionVTBI': '<S9>:4066' *)
                is_IsOverInfusionVTBI := 0;
                (* Exit Internal 'IsOverInfusionFlowRate': '<S9>:4039' *)

                CASE is_IsOverInfusionFlowRate OF
                    1: 
                        (* Exit 'Check': '<S9>:4052' *)
                        (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                        (* Transition: '<S9>:4061' *)
                        is_IsOverInfusionFlowRate := 0;
                    2: 
                        (* Exit 'Monitor': '<S9>:4053' *)
                        (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                        (* Transition: '<S9>:4061' *)
                        is_IsOverInfusionFlowRate := 0;
                    ELSE
                        is_IsOverInfusionFlowRate := 0;
                END_CASE;

                (* Exit 'IsOverInfusionFlowRate': '<S9>:4039' *)
                (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                (* Transition: '<S9>:4061' *)
                (* Exit Internal 'Level4': '<S9>:4019' *)
                (* Exit Internal 'IsEnviromentalError': '<S9>:4032' *)
                is_IsEnviromentalError := 0;
                (* Exit Internal 'IsHardwareError': '<S9>:4217' *)
                is_IsHardwareError := 0;
                (* Exit Internal 'IsEmptyReservoir': '<S9>:4020' *)
                is_IsEmptyReservoir := 0;
                (* Exit Internal 'CancelAlarm': '<S9>:4012' *)
                is_CancelAlarm := 0;
                c_is_c1_GPCA_SW_Logical_Arc := 2;
                (* Entry 'NOT_ON': '<S9>:3899' *)
                rtb_Config_Timer := 0;
            ELSE 
                (* During 'CheckAlarm': '<S9>:3953' *)
                (* During 'CancelAlarm': '<S9>:4012' *)

                IF is_CancelAlarm = 1 THEN 
                    (* During 'OFF': '<S9>:4017' *)

                    IF (currentAlarm > 0) AND OP_CMD_IN.Notification_Cancel THEN 
                        (* Transition: '<S9>:4014' *)
                        is_CancelAlarm := 2;
                        (* Entry 'ON': '<S9>:4016' *)
                        cancelAlarm := currentAlarm;
                        (* MATLAB Function 'writeLog': '<S9>:4769' *)
                        (* '<S9>:4769:3' ALARM_OUT_Log_Message_ID=logEvent; *)
                        ALARM_OUT_Log_Message_ID := 3;
                    END_IF;

                ELSE 
                    (* During 'ON': '<S9>:4016' *)
                    (* Transition: '<S9>:4015' *)
                    is_CancelAlarm := 1;
                END_IF;

                (* During 'Level4': '<S9>:4019' *)
                (* During 'IsEmptyReservoir': '<S9>:4020' *)

                IF is_IsEmptyReservoir = 1 THEN 
                    (* During 'No': '<S9>:4024' *)

                    IF rtb_ifthen6 AND rtb_ifthen THEN 
                        (* Transition: '<S9>:4022' *)
                        is_IsEmptyReservoir := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4025' *)

                    IF rtb_ifthen6 AND rtb_ifthen THEN 
                        (* Transition: '<S9>:4615' *)
                        is_IsEmptyReservoir := 2;
                    ELSIF (cancelAlarm = 1) AND ( NOT rtb_ifthen) THEN 
                        (* Transition: '<S9>:4023' *)
                        is_IsEmptyReservoir := 1;
                    END_IF;

                END_IF;

                (* During 'IsHardwareError': '<S9>:4217' *)

                IF is_IsHardwareError = 1 THEN 
                    (* During 'No': '<S9>:4222' *)

                    IF ((((SENSOR_IN.Battery_Depleted OR SENSOR_IN.RTC_Error) OR SENSOR_IN.CPU_Error) OR SENSOR_IN.Memory_Corrupted) OR SENSOR_IN.Pump_Too_Hot) OR SENSOR_IN.Watchdog_Interrupt_Detected THEN 
                        (* Transition: '<S9>:4223' *)
                        is_IsHardwareError := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4220' *)

                    IF (cancelAlarm = 2) AND ( NOT (((((SENSOR_IN.Battery_Depleted OR SENSOR_IN.RTC_Error) OR SENSOR_IN.CPU_Error) OR SENSOR_IN.Memory_Corrupted) OR SENSOR_IN.Pump_Too_Hot) OR SENSOR_IN.Watchdog_Interrupt_Detected)) THEN 
                        (* Transition: '<S9>:4221' *)
                        is_IsHardwareError := 1;
                    END_IF;

                END_IF;

                (* During 'IsEnviromentalError': '<S9>:4032' *)

                IF is_IsEnviromentalError = 1 THEN 
                    (* During 'No': '<S9>:4037' *)

                    IF (SENSOR_IN.Temprature_Out_Of_Range OR SENSOR_IN.Humidity_Out_Of_Range) OR SENSOR_IN.Air_Pressure_Out_Of_Range THEN 
                        (* Transition: '<S9>:4034' *)
                        is_IsEnviromentalError := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4036' *)

                    IF (cancelAlarm = 3) AND ( NOT ((SENSOR_IN.Temprature_Out_Of_Range OR SENSOR_IN.Humidity_Out_Of_Range) OR SENSOR_IN.Air_Pressure_Out_Of_Range)) THEN 
                        (* Transition: '<S9>:4035' *)
                        is_IsEnviromentalError := 1;
                    END_IF;

                END_IF;

                (* During 'Level3': '<S9>:4038' *)
                (* During 'IsOverInfusionFlowRate': '<S9>:4039' *)
                (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                (* Transition: '<S9>:4061' *)
                overInfusion := 0;

                IF rtb_ifthen6 THEN 
                    (* Transition: '<S9>:4062' *)

                    IF SENSOR_IN.Flow_Rate_Monitored > DB_IN.Flow_Rate_High THEN 
                        (* Transition: '<S9>:4063' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) > (((100 + USINT_TO_DINT(CONST_IN.Tolerance_Max)) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE)) THEN 
                        (* Transition: '<S9>:4064' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) > (((100 + USINT_TO_DINT(CONST_IN.Tolerance_Min)) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE)) THEN 
                        (* Transition: '<S9>:4065' *)
                        overInfusion := 2;
                    END_IF;

                END_IF;


                CASE is_IsOverInfusionFlowRate OF
                    1: 
                        (* During 'Check': '<S9>:4052' *)

                        CASE overInfusion OF
                            1: 
                                (* Transition: '<S9>:4044' *)
                                (* Exit 'Check': '<S9>:4052' *)
                                (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                                (* Transition: '<S9>:4061' *)
                                is_IsOverInfusionFlowRate := 3;
                                (* Entry 'Yes': '<S9>:4051' *)
                            2: 
                                (* Transition: '<S9>:4046' *)
                                overInfusionTimer := 0;
                                (* Exit 'Check': '<S9>:4052' *)
                                (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                                (* Transition: '<S9>:4061' *)
                                is_IsOverInfusionFlowRate := 2;
                                (* Entry 'Monitor': '<S9>:4053' *)
                                (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                                (* Transition: '<S9>:4061' *)
                        END_CASE;

                    2: 
                        (* During 'Monitor': '<S9>:4053' *)
                        (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                        (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                        IF (overInfusion = 1) OR (overInfusionTimer > CONST_IN.Max_Duration_Over_Infusion) THEN 
                            (* Transition: '<S9>:4047' *)
                            overInfusionTimer := 0;
                            (* Exit 'Monitor': '<S9>:4053' *)
                            (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                            (* Transition: '<S9>:4061' *)
                            is_IsOverInfusionFlowRate := 3;
                            (* Entry 'Yes': '<S9>:4051' *)
                        ELSE 

                            CASE overInfusion OF
                                0: 
                                    (* Transition: '<S9>:4042' *)
                                    overInfusionTimer := 0;
                                    (* Exit 'Monitor': '<S9>:4053' *)
                                    (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                                    (* Transition: '<S9>:4061' *)
                                    is_IsOverInfusionFlowRate := 1;
                                    (* Entry 'Check': '<S9>:4052' *)
                                    (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                                    (* Transition: '<S9>:4061' *)
                                2: 
                                    (* Transition: '<S9>:4049' *)
                                    overInfusionTimer := DINT_TO_USINT(USINT_TO_DINT(overInfusionTimer) + 1);
                                    (* Exit 'Monitor': '<S9>:4053' *)
                                    (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                                    (* Transition: '<S9>:4061' *)
                                    is_IsOverInfusionFlowRate := 2;
                                    (* Entry 'Monitor': '<S9>:4053' *)
                                    (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                                    (* Transition: '<S9>:4061' *)
                            END_CASE;

                        END_IF;

                    ELSE
                        (* During 'Yes': '<S9>:4051' *)

                        IF overInfusion = 1 THEN 
                            (* Transition: '<S9>:4701' *)
                            is_IsOverInfusionFlowRate := 3;
                            (* Entry 'Yes': '<S9>:4051' *)
                        ELSIF cancelAlarm = 4 THEN 
                            (* Transition: '<S9>:4501' *)
                            is_IsOverInfusionFlowRate := 1;
                            (* Entry 'Check': '<S9>:4052' *)
                            (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                            (* Transition: '<S9>:4061' *)
                        END_IF;

                END_CASE;

                (* During 'IsOverInfusionVTBI': '<S9>:4066' *)

                IF is_IsOverInfusionVTBI = 1 THEN 
                    (* During 'No': '<S9>:4071' *)

                    IF rtb_ifthen6 AND (rtb_Total_Volume_Infused > DB_IN.VTBI_High) THEN 
                        (* Transition: '<S9>:4068' *)
                        is_IsOverInfusionVTBI := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4070' *)

                    IF rtb_ifthen6 AND (rtb_Total_Volume_Infused > DB_IN.VTBI_High) THEN 
                        (* Transition: '<S9>:4702' *)
                        is_IsOverInfusionVTBI := 2;
                    ELSIF cancelAlarm = 5 THEN 
                        (* Transition: '<S9>:4069' *)
                        is_IsOverInfusionVTBI := 1;
                    END_IF;

                END_IF;

                (* During 'IsAirInLine': '<S9>:4072' *)

                IF is_IsAirInLine = 1 THEN 
                    (* During 'No': '<S9>:4077' *)

                    IF SENSOR_IN.Air_In_Line THEN 
                        (* Transition: '<S9>:4074' *)
                        is_IsAirInLine := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4076' *)

                    IF (cancelAlarm = 6) AND ( NOT SENSOR_IN.Air_In_Line) THEN 
                        (* Transition: '<S9>:4075' *)
                        is_IsAirInLine := 1;
                    END_IF;

                END_IF;

                (* During 'IsOcclusion': '<S9>:4078' *)

                IF is_IsOcclusion = 1 THEN 
                    (* During 'No': '<S9>:4083' *)

                    IF SENSOR_IN.Occlusion THEN 
                        (* Transition: '<S9>:4080' *)
                        is_IsOcclusion := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4082' *)

                    IF (cancelAlarm = 7) AND ( NOT SENSOR_IN.Occlusion) THEN 
                        (* Transition: '<S9>:4081' *)
                        is_IsOcclusion := 1;
                    END_IF;

                END_IF;

                (* During 'IsDoor_Open': '<S9>:4084' *)

                IF is_IsDoor_Open = 1 THEN 
                    (* During 'No': '<S9>:4088' *)

                    IF SENSOR_IN.Door_Open THEN 
                        (* Transition: '<S9>:4086' *)
                        is_IsDoor_Open := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4089' *)

                    IF (cancelAlarm = 8) AND ( NOT SENSOR_IN.Door_Open) THEN 
                        (* Transition: '<S9>:4087' *)
                        is_IsDoor_Open := 1;
                    END_IF;

                END_IF;

                (* During 'Level2': '<S9>:4090' *)
                (* During 'IsLowReservoir': '<S9>:4091' *)

                IF is_IsLowReservoir = 1 THEN 
                    (* During 'No': '<S9>:4095' *)

                    IF rtb_ifthen6 AND (rtb_Reservoir_Volume_l < CONST_IN.Low_Reservoir) THEN 
                        (* Transition: '<S9>:4093' *)
                        is_IsLowReservoir := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4096' *)

                    IF (cancelAlarm = 9) AND ( NOT (rtb_Reservoir_Volume_l < CONST_IN.Low_Reservoir)) THEN 
                        (* Transition: '<S9>:4094' *)
                        is_IsLowReservoir := 1;
                    END_IF;

                END_IF;

                (* During 'Level1': '<S9>:4113' *)
                (* During 'IsUnderInfusion': '<S9>:4114' *)
                (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                (* Transition: '<S9>:4137' *)
                overInfusion := 0;

                IF rtb_ifthen6 THEN 
                    (* Transition: '<S9>:4139' *)

                    IF SENSOR_IN.Flow_Rate_Monitored < DB_IN.Flow_Rate_Low THEN 
                        (* Transition: '<S9>:4138' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) < (USINT_TO_DINT(UnitDelay_2_DSTATE) - (UDINT_TO_DINT(USINT_TO_UDINT(CONST_IN.Tolerance_Max) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE))) THEN 
                        (* Transition: '<S9>:4140' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) < (USINT_TO_DINT(UnitDelay_2_DSTATE) - (UDINT_TO_DINT(USINT_TO_UDINT(CONST_IN.Tolerance_Min) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE))) THEN 
                        (* Transition: '<S9>:4142' *)
                        overInfusion := 2;
                    END_IF;

                END_IF;


                CASE is_IsUnderInfusion OF
                    1: 
                        (* During 'Check': '<S9>:4127' *)

                        CASE overInfusion OF
                            1: 
                                (* Transition: '<S9>:4119' *)
                                is_IsUnderInfusion := 3;
                                (* Entry 'Yes': '<S9>:4126' *)
                            2: 
                                (* Transition: '<S9>:4121' *)
                                underInfusionTimer := 0;
                                is_IsUnderInfusion := 2;
                                (* Entry 'Monitor': '<S9>:4128' *)
                                (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                                (* Transition: '<S9>:4137' *)
                        END_CASE;

                    2: 
                        (* During 'Monitor': '<S9>:4128' *)
                        (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                        (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                        IF (overInfusion = 1) OR (underInfusionTimer > CONST_IN.Max_Duration_Under_Infusion) THEN 
                            (* Transition: '<S9>:4122' *)
                            underInfusionTimer := 0;
                            is_IsUnderInfusion := 3;
                            (* Entry 'Yes': '<S9>:4126' *)
                        ELSE 

                            CASE overInfusion OF
                                2: 
                                    (* Transition: '<S9>:4124' *)
                                    underInfusionTimer := DINT_TO_USINT(USINT_TO_DINT(underInfusionTimer) + 1);
                                    is_IsUnderInfusion := 2;
                                    (* Entry 'Monitor': '<S9>:4128' *)
                                    (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                                    (* Transition: '<S9>:4137' *)
                                0: 
                                    (* Transition: '<S9>:4118' *)
                                    underInfusionTimer := 0;
                                    is_IsUnderInfusion := 1;
                                    (* Entry 'Check': '<S9>:4127' *)
                                    (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                                    (* Transition: '<S9>:4137' *)
                            END_CASE;

                        END_IF;

                    ELSE
                        (* During 'Yes': '<S9>:4126' *)

                        IF cancelAlarm = 10 THEN 
                            (* Transition: '<S9>:4502' *)
                            is_IsUnderInfusion := 1;
                            (* Entry 'Check': '<S9>:4127' *)
                            (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                            (* Transition: '<S9>:4137' *)
                        END_IF;

                END_CASE;

                (* During 'IsFlowRateNotStable': '<S9>:4143' *)

                IF is_IsFlowRateNotStable = 1 THEN 
                    (* During 'No': '<S9>:4148' *)

                    IF rtb_ifthen6 AND SENSOR_IN.Flow_Rate_Not_Stable THEN 
                        (* Transition: '<S9>:4145' *)
                        is_IsFlowRateNotStable := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4147' *)

                    IF (cancelAlarm = 11) AND ( NOT SENSOR_IN.Flow_Rate_Not_Stable) THEN 
                        (* Transition: '<S9>:4146' *)
                        is_IsFlowRateNotStable := 1;
                    END_IF;

                END_IF;

                (* During 'IsIdleTimeExceeded': '<S9>:4149' *)

                CASE is_IsIdleTimeExceeded OF
                    1: 
                        (* During 'No': '<S9>:4153' *)
                        (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                        (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                        IF (UnitDelay_3_DSTATE = 1) AND (CONST_IN.Max_Idle_Duration = 1) THEN 
                            (* Transition: '<S9>:4750' *)
                            (* Exit 'No': '<S9>:4153' *)
                            idletimer := 0;
                            is_IsIdleTimeExceeded := 2;
                        ELSIF UnitDelay_3_DSTATE = 1 THEN 
                            (* Transition: '<S9>:4746' *)
                            (* Exit 'No': '<S9>:4153' *)
                            idletimer := 0;
                            is_IsIdleTimeExceeded := 3;
                            (* Entry 'counting': '<S9>:4745' *)
                            idletimer := DINT_TO_USINT(USINT_TO_DINT(idletimer) + 1);
                        ELSE 
                            idletimer := 0;
                        END_IF;

                    2: 
                        (* During 'Yes': '<S9>:4154' *)

                        IF cancelAlarm = 12 THEN 
                            (* Transition: '<S9>:4152' *)
                            is_IsIdleTimeExceeded := 1;
                            (* Entry 'No': '<S9>:4153' *)
                            idletimer := 0;
                        END_IF;

                    ELSE
                        (* During 'counting': '<S9>:4745' *)
                        (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                        (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                        IF idletimer >= CONST_IN.Max_Idle_Duration THEN 
                            (* Transition: '<S9>:4747' *)
                            (* Exit 'counting': '<S9>:4745' *)
                            idletimer := DINT_TO_USINT(USINT_TO_DINT(idletimer) + 1);
                            is_IsIdleTimeExceeded := 2;
                        ELSE 
                            idletimer := DINT_TO_USINT(USINT_TO_DINT(idletimer) + 1);
                        END_IF;

                END_CASE;

                (* During 'IsPausedTimeExceeded': '<S9>:4155' *)

                CASE is_IsPausedTimeExceeded OF
                    1: 
                        (* During 'No': '<S9>:4756' *)
                        (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                        (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                        IF (((UnitDelay_3_DSTATE = 6) OR (UnitDelay_3_DSTATE = 7)) OR (UnitDelay_3_DSTATE = 8)) AND (CONST_IN.Max_Paused_Duration = 1) THEN 
                            (* Transition: '<S9>:4761' *)
                            (* Exit 'No': '<S9>:4756' *)
                            pausedtimer := 0;
                            is_IsPausedTimeExceeded := 2;
                        ELSIF ((UnitDelay_3_DSTATE = 6) OR (UnitDelay_3_DSTATE = 7)) OR (UnitDelay_3_DSTATE = 8) THEN 
                            (* Transition: '<S9>:4757' *)
                            (* Exit 'No': '<S9>:4756' *)
                            pausedtimer := 0;
                            is_IsPausedTimeExceeded := 3;
                            (* Entry 'counting': '<S9>:4752' *)
                            pausedtimer := DINT_TO_USINT(USINT_TO_DINT(pausedtimer) + 1);
                        ELSE 
                            pausedtimer := 0;
                        END_IF;

                    2: 
                        (* During 'Yes': '<S9>:4755' *)

                        IF cancelAlarm = 13 THEN 
                            (* Transition: '<S9>:4754' *)
                            is_IsPausedTimeExceeded := 1;
                            (* Entry 'No': '<S9>:4756' *)
                            pausedtimer := 0;
                        END_IF;

                    ELSE
                        (* During 'counting': '<S9>:4752' *)
                        (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                        (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                        IF pausedtimer >= CONST_IN.Max_Paused_Duration THEN 
                            (* Transition: '<S9>:4758' *)
                            (* Exit 'counting': '<S9>:4752' *)
                            pausedtimer := DINT_TO_USINT(USINT_TO_DINT(pausedtimer) + 1);
                            is_IsPausedTimeExceeded := 2;
                        ELSE 
                            pausedtimer := DINT_TO_USINT(USINT_TO_DINT(pausedtimer) + 1);
                        END_IF;

                END_CASE;

                (* During 'IsConfigTimeWarning': '<S9>:4161' *)

                IF is_IsConfigTimeWarning = 1 THEN 
                    (* During 'No': '<S9>:4166' *)
                    (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                    (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                    IF rtb_Config_Timer > CONST_IN.Config_Warning_Duration THEN 
                        (* Transition: '<S9>:4163' *)
                        is_IsConfigTimeWarning := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4165' *)
                    (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                    (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                    IF (cancelAlarm = 14) AND ( NOT (rtb_Config_Timer > CONST_IN.Config_Warning_Duration)) THEN 
                        (* Transition: '<S9>:4164' *)
                        is_IsConfigTimeWarning := 1;
                    END_IF;

                END_IF;

                (* During 'IsBatteryError': '<S9>:4167' *)

                IF is_IsBatteryError = 1 THEN 
                    (* During 'No': '<S9>:4172' *)

                    IF (SENSOR_IN.Battery_Low OR SENSOR_IN.Battery_Unable_To_Charge) OR SENSOR_IN.Supply_Voltage_Out_Of_Range THEN 
                        (* Transition: '<S9>:4169' *)
                        is_IsBatteryError := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4171' *)

                    IF (cancelAlarm = 15) AND ( NOT ((SENSOR_IN.Battery_Low OR SENSOR_IN.Battery_Unable_To_Charge) OR SENSOR_IN.Supply_Voltage_Out_Of_Range)) THEN 
                        (* Transition: '<S9>:4170' *)
                        is_IsBatteryError := 1;
                    END_IF;

                END_IF;

                (* During 'IsPumpHot': '<S9>:4173' *)

                IF is_IsPumpHot = 1 THEN 
                    (* During 'No': '<S9>:4178' *)

                    IF SENSOR_IN.Pump_Overheated THEN 
                        (* Transition: '<S9>:4175' *)
                        is_IsPumpHot := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4177' *)

                    IF (cancelAlarm = 16) AND ( NOT SENSOR_IN.Pump_Overheated) THEN 
                        (* Transition: '<S9>:4176' *)
                        is_IsPumpHot := 1;
                    END_IF;

                END_IF;

                (* During 'IsLoggingFailed': '<S9>:4179' *)

                IF is_IsLoggingFailed = 1 THEN 
                    (* During 'No': '<S9>:4184' *)

                    IF rtb_Logging_Failed THEN 
                        (* Transition: '<S9>:4181' *)
                        is_IsLoggingFailed := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4183' *)

                    IF (cancelAlarm = 17) AND ( NOT rtb_Logging_Failed) THEN 
                        (* Transition: '<S9>:4182' *)
                        is_IsLoggingFailed := 1;
                    END_IF;

                END_IF;

                (* During 'IsSystemMonitorFailed': '<S9>:4185' *)

                IF is_IsSystemMonitorFailed = 1 THEN 
                    (* During 'No': '<S9>:4190' *)

                    IF rtb_System_Monitor_Failed THEN 
                        (* Transition: '<S9>:4187' *)
                        is_IsSystemMonitorFailed := 2;
                    END_IF;

                ELSE 
                    (* During 'Yes': '<S9>:4189' *)

                    IF (cancelAlarm = 18) AND ( NOT rtb_System_Monitor_Failed) THEN 
                        (* Transition: '<S9>:4188' *)
                        is_IsSystemMonitorFailed := 1;
                    END_IF;

                END_IF;

                (* During 'SetAlarmStatus': '<S9>:4018' *)
                (* Graphical Function 'setCurrentAlarm': '<S9>:3955' *)
                (* Transition: '<S9>:3975' *)
                b_s := 0;
                rtb_Config_Timer := 0;

                IF is_IsSystemMonitorFailed = 2 THEN 
                    (* Transition: '<S9>:3976' *)
                    b_s := 18;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsLoggingFailed = 2 THEN 
                    (* Transition: '<S9>:3979' *)
                    b_s := 17;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsPumpHot = 2 THEN 
                    (* Transition: '<S9>:3981' *)
                    b_s := 16;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsBatteryError = 2 THEN 
                    (* Transition: '<S9>:3982' *)
                    b_s := 15;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsConfigTimeWarning = 2 THEN 
                    (* Transition: '<S9>:3985' *)
                    b_s := 14;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsPausedTimeExceeded = 2 THEN 
                    (* Transition: '<S9>:3986' *)
                    b_s := 13;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsIdleTimeExceeded = 2 THEN 
                    (* Transition: '<S9>:3989' *)
                    b_s := 12;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsFlowRateNotStable = 2 THEN 
                    (* Transition: '<S9>:3991' *)
                    b_s := 11;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsUnderInfusion = 3 THEN 
                    (* Transition: '<S9>:3992' *)
                    b_s := 10;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsLowReservoir = 2 THEN 
                    (* Transition: '<S9>:3994' *)
                    b_s := 9;
                    rtb_Config_Timer := 2;
                END_IF;


                IF is_IsDoor_Open = 2 THEN 
                    (* Transition: '<S9>:3997' *)
                    b_s := 8;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsOcclusion = 2 THEN 
                    (* Transition: '<S9>:3999' *)
                    b_s := 7;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsAirInLine = 2 THEN 
                    (* Transition: '<S9>:4000' *)
                    b_s := 6;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsOverInfusionVTBI = 2 THEN 
                    (* Transition: '<S9>:4003' *)
                    b_s := 5;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsOverInfusionFlowRate = 3 THEN 
                    (* Transition: '<S9>:4005' *)
                    b_s := 4;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsHardwareError = 2 THEN 
                    (* Transition: '<S9>:4007' *)
                    b_s := 3;
                    rtb_Config_Timer := 4;
                END_IF;


                IF is_IsEnviromentalError = 2 THEN 
                    (* Transition: '<S9>:4009' *)
                    b_s := 2;
                    rtb_Config_Timer := 4;
                END_IF;


                IF is_IsEmptyReservoir = 2 THEN 
                    (* Transition: '<S9>:4011' *)
                    b_s := 1;
                    rtb_Config_Timer := 4;
                END_IF;

                currentAlarm := DINT_TO_USINT(b_s);
                (* Graphical Function 'setHighestAlarm': '<S9>:4098' *)
                (* Transition: '<S9>:4104' *)
                (* During 'Notification': '<S9>:3908' *)
                (* During 'Visual': '<S9>:3909' *)

                IF is_Visual = 1 THEN 
                    (* During 'AlarmDisplay': '<S9>:3913' *)

                    IF currentAlarm = 0 THEN 
                        (* Transition: '<S9>:3912' *)
                        (* Exit 'AlarmDisplay': '<S9>:3913' *)
                        is_Visual := 2;
                        (* Entry 'OFF': '<S9>:3914' *)
                        c_ALARM_OUT_Visual_Notifica := 0;
                    ELSIF currentAlarm > 0 THEN 
                        (* Transition: '<S9>:4614' *)
                        (* Exit 'AlarmDisplay': '<S9>:3913' *)
                        is_Visual := 1;
                        (* Entry 'AlarmDisplay': '<S9>:3913' *)
                        c_ALARM_OUT_Visual_Notifica := currentAlarm;
                    ELSE 
                        c_ALARM_OUT_Visual_Notifica := currentAlarm;
                    END_IF;

                ELSE 
                    (* During 'OFF': '<S9>:3914' *)

                    IF currentAlarm > 0 THEN 
                        (* Transition: '<S9>:3911' *)
                        is_Visual := 1;
                        (* Entry 'AlarmDisplay': '<S9>:3913' *)
                        c_ALARM_OUT_Visual_Notifica := currentAlarm;
                    END_IF;

                END_IF;

                (* During 'Audio': '<S9>:3919' *)
                ALARM_OUT_Is_Audio_Disabled := OP_CMD_IN.Disable_Audio;

                CASE is_Audio OF
                    1: 
                        (* During 'Disabled': '<S9>:3939' *)

                        IF OP_CMD_IN.Disable_Audio = 2 THEN 
                            (* Transition: '<S9>:4610' *)
                            (* Exit 'Disabled': '<S9>:3939' *)
                            is_Audio := 4;
                            (* Entry 'Silenced': '<S9>:3952' *)
                            audioTimer := 0;
                            c_ALARM_OUT_Audio_Notificat := 0;
                            audioTimer := DINT_TO_USINT(USINT_TO_DINT(audioTimer) + 1);
                        ELSE 
                            (* Transition: '<S9>:4604' *)

                            IF (rtb_Config_Timer > 2) AND (OP_CMD_IN.Disable_Audio = 0) THEN 
                                (* Transition: '<S9>:4736' *)
                                (* Exit 'Disabled': '<S9>:3939' *)
                                is_Audio := 3;
                                (* Entry 'ON': '<S9>:3938' *)
                                c_ALARM_OUT_Audio_Notificat := CONST_IN.Audio_Level;
                            ELSIF OP_CMD_IN.Disable_Audio = 0 THEN 
                                (* Transition: '<S9>:3934' *)
                                (* Transition: '<S9>:3928' *)
                                (* Exit 'Disabled': '<S9>:3939' *)
                                is_Audio := 2;
                                (* Entry 'OFF': '<S9>:3937' *)
                                c_ALARM_OUT_Audio_Notificat := 0;
                            ELSE 
                                c_ALARM_OUT_Audio_Notificat := 0;
                            END_IF;

                        END_IF;

                    2: 
                        (* During 'OFF': '<S9>:3937' *)

                        CASE USINT_TO_DINT(OP_CMD_IN.Disable_Audio) OF
                            1: 
                                (* Transition: '<S9>:4743' *)
                                (* Exit 'OFF': '<S9>:3937' *)
                                is_Audio := 1;
                                (* Entry 'Disabled': '<S9>:3939' *)
                                c_ALARM_OUT_Audio_Notificat := 0;
                            2: 
                                (* Transition: '<S9>:4738' *)
                                (* Transition: '<S9>:4739' *)
                                (* Exit 'OFF': '<S9>:3937' *)
                                is_Audio := 4;
                                (* Entry 'Silenced': '<S9>:3952' *)
                                audioTimer := 0;
                                c_ALARM_OUT_Audio_Notificat := 0;
                                audioTimer := DINT_TO_USINT(USINT_TO_DINT(audioTimer) + 1);
                            ELSE

                                IF (rtb_Config_Timer > 2) AND (OP_CMD_IN.Disable_Audio = 0) THEN 
                                    (* Transition: '<S9>:3925' *)
                                    (* Exit 'OFF': '<S9>:3937' *)
                                    is_Audio := 3;
                                    (* Entry 'ON': '<S9>:3938' *)
                                    c_ALARM_OUT_Audio_Notificat := CONST_IN.Audio_Level;
                                ELSE 
                                    c_ALARM_OUT_Audio_Notificat := 0;
                                END_IF;

                        END_CASE;

                    3: 
                        (* During 'ON': '<S9>:3938' *)

                        CASE USINT_TO_DINT(OP_CMD_IN.Disable_Audio) OF
                            1: 
                                (* Transition: '<S9>:3931' *)
                                (* Exit 'ON': '<S9>:3938' *)
                                is_Audio := 1;
                                (* Entry 'Disabled': '<S9>:3939' *)
                                c_ALARM_OUT_Audio_Notificat := 0;
                            2: 
                                (* Transition: '<S9>:3927' *)
                                (* Transition: '<S9>:4739' *)
                                (* Exit 'ON': '<S9>:3938' *)
                                is_Audio := 4;
                                (* Entry 'Silenced': '<S9>:3952' *)
                                audioTimer := 0;
                                c_ALARM_OUT_Audio_Notificat := 0;
                                audioTimer := DINT_TO_USINT(USINT_TO_DINT(audioTimer) + 1);
                            ELSE

                                IF (rtb_Config_Timer > 2) AND (OP_CMD_IN.Disable_Audio = 0) THEN 
                                    (* Transition: '<S9>:4609' *)
                                    (* Exit 'ON': '<S9>:3938' *)
                                    is_Audio := 3;
                                    (* Entry 'ON': '<S9>:3938' *)
                                    c_ALARM_OUT_Audio_Notificat := CONST_IN.Audio_Level;
                                ELSE 
                                    (* Transition: '<S9>:3926' *)
                                    (* Exit 'ON': '<S9>:3938' *)
                                    is_Audio := 2;
                                    (* Entry 'OFF': '<S9>:3937' *)
                                    c_ALARM_OUT_Audio_Notificat := 0;
                                END_IF;

                        END_CASE;

                    ELSE
                        (* During 'Silenced': '<S9>:3952' *)

                        IF OP_CMD_IN.Disable_Audio = 1 THEN 
                            (* Transition: '<S9>:4611' *)
                            (* Exit 'Silenced': '<S9>:3952' *)
                            is_Audio := 1;
                            (* Entry 'Disabled': '<S9>:3939' *)
                            c_ALARM_OUT_Audio_Notificat := 0;
                        ELSE 
                            (* Transition: '<S9>:4605' *)

                            IF (rtb_Config_Timer > 2) AND (OP_CMD_IN.Disable_Audio = 0) THEN 
                                (* Transition: '<S9>:4736' *)
                                (* Exit 'Silenced': '<S9>:3952' *)
                                is_Audio := 3;
                                (* Entry 'ON': '<S9>:3938' *)
                                c_ALARM_OUT_Audio_Notificat := CONST_IN.Audio_Level;
                            ELSE 
                                (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                                (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                                IF (audioTimer > CONST_IN.Audio_Enable_Duration) OR (OP_CMD_IN.Disable_Audio = 0) THEN 
                                    (* Transition: '<S9>:3936' *)
                                    (* Transition: '<S9>:3928' *)
                                    (* Exit 'Silenced': '<S9>:3952' *)
                                    is_Audio := 2;
                                    (* Entry 'OFF': '<S9>:3937' *)
                                    c_ALARM_OUT_Audio_Notificat := 0;
                                ELSE 
                                    c_ALARM_OUT_Audio_Notificat := 0;
                                    audioTimer := DINT_TO_USINT(USINT_TO_DINT(audioTimer) + 1);
                                END_IF;

                            END_IF;

                        END_IF;

                END_CASE;

            END_IF;

        ELSE 
            (* During 'NOT_ON': '<S9>:3899' *)

            IF rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S9>:3900' *)
                (* Exit 'NOT_ON': '<S9>:3899' *)
                c_is_c1_GPCA_SW_Logical_Arc := 1;
                (* Entry Internal 'Alarms': '<S9>:3907' *)
                (* Entry Internal 'CheckAlarm': '<S9>:3953' *)
                (* Entry Internal 'CancelAlarm': '<S9>:4012' *)
                (* Transition: '<S9>:4013' *)
                is_CancelAlarm := 1;
                (* Entry Internal 'Level4': '<S9>:4019' *)
                (* Entry Internal 'IsEmptyReservoir': '<S9>:4020' *)

                IF rtb_ifthen6 AND rtb_ifthen THEN 
                    (* Transition: '<S9>:4193' *)
                    is_IsEmptyReservoir := 2;
                ELSE 
                    (* Transition: '<S9>:4021' *)
                    is_IsEmptyReservoir := 1;
                END_IF;

                (* Entry Internal 'IsHardwareError': '<S9>:4217' *)

                IF ((((SENSOR_IN.Battery_Depleted OR SENSOR_IN.RTC_Error) OR SENSOR_IN.CPU_Error) OR SENSOR_IN.Memory_Corrupted) OR SENSOR_IN.Pump_Too_Hot) OR SENSOR_IN.Watchdog_Interrupt_Detected THEN 
                    (* Transition: '<S9>:4224' *)
                    is_IsHardwareError := 2;
                ELSE 
                    (* Transition: '<S9>:4219' *)
                    is_IsHardwareError := 1;
                END_IF;

                (* Entry Internal 'IsEnviromentalError': '<S9>:4032' *)

                IF (SENSOR_IN.Temprature_Out_Of_Range OR SENSOR_IN.Humidity_Out_Of_Range) OR SENSOR_IN.Air_Pressure_Out_Of_Range THEN 
                    (* Transition: '<S9>:4198' *)
                    is_IsEnviromentalError := 2;
                ELSE 
                    (* Transition: '<S9>:4033' *)
                    is_IsEnviromentalError := 1;
                END_IF;

                (* Entry Internal 'Level3': '<S9>:4038' *)
                (* Entry 'IsOverInfusionFlowRate': '<S9>:4039' *)
                (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                (* Transition: '<S9>:4061' *)
                overInfusion := 0;

                IF rtb_ifthen6 THEN 
                    (* Transition: '<S9>:4062' *)

                    IF SENSOR_IN.Flow_Rate_Monitored > DB_IN.Flow_Rate_High THEN 
                        (* Transition: '<S9>:4063' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) > (((100 + USINT_TO_DINT(CONST_IN.Tolerance_Max)) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE)) THEN 
                        (* Transition: '<S9>:4064' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) > (((100 + USINT_TO_DINT(CONST_IN.Tolerance_Min)) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE)) THEN 
                        (* Transition: '<S9>:4065' *)
                        overInfusion := 2;
                    END_IF;

                END_IF;

                (* Entry Internal 'IsOverInfusionFlowRate': '<S9>:4039' *)

                CASE overInfusion OF
                    1: 
                        (* Transition: '<S9>:4697' *)
                        is_IsOverInfusionFlowRate := 3;
                        (* Entry 'Yes': '<S9>:4051' *)
                    2: 
                        (* Transition: '<S9>:4699' *)
                        is_IsOverInfusionFlowRate := 2;
                        (* Entry 'Monitor': '<S9>:4053' *)
                        (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                        (* Transition: '<S9>:4061' *)
                    ELSE
                        (* Transition: '<S9>:4041' *)
                        is_IsOverInfusionFlowRate := 1;
                        (* Entry 'Check': '<S9>:4052' *)
                        (* Graphical Function 'checkOverInfusionFlowRate': '<S9>:4055' *)
                        (* Transition: '<S9>:4061' *)
                END_CASE;

                (* Entry Internal 'IsOverInfusionVTBI': '<S9>:4066' *)

                IF rtb_ifthen6 AND (rtb_Total_Volume_Infused > DB_IN.VTBI_High) THEN 
                    (* Transition: '<S9>:4201' *)
                    is_IsOverInfusionVTBI := 2;
                ELSE 
                    (* Transition: '<S9>:4067' *)
                    is_IsOverInfusionVTBI := 1;
                END_IF;

                (* Entry Internal 'IsAirInLine': '<S9>:4072' *)

                IF SENSOR_IN.Air_In_Line THEN 
                    (* Transition: '<S9>:4202' *)
                    is_IsAirInLine := 2;
                ELSE 
                    (* Transition: '<S9>:4073' *)
                    is_IsAirInLine := 1;
                END_IF;

                (* Entry Internal 'IsOcclusion': '<S9>:4078' *)

                IF SENSOR_IN.Occlusion THEN 
                    (* Transition: '<S9>:4203' *)
                    is_IsOcclusion := 2;
                ELSE 
                    (* Transition: '<S9>:4079' *)
                    is_IsOcclusion := 1;
                END_IF;

                (* Entry Internal 'IsDoor_Open': '<S9>:4084' *)

                IF SENSOR_IN.Door_Open THEN 
                    (* Transition: '<S9>:4204' *)
                    is_IsDoor_Open := 2;
                ELSE 
                    (* Transition: '<S9>:4085' *)
                    is_IsDoor_Open := 1;
                END_IF;

                (* Entry Internal 'Level2': '<S9>:4090' *)
                (* Entry Internal 'IsLowReservoir': '<S9>:4091' *)

                IF rtb_ifthen6 AND (rtb_Reservoir_Volume_l < CONST_IN.Low_Reservoir) THEN 
                    (* Transition: '<S9>:4205' *)
                    is_IsLowReservoir := 2;
                ELSE 
                    (* Transition: '<S9>:4092' *)
                    is_IsLowReservoir := 1;
                END_IF;

                (* Entry Internal 'Level1': '<S9>:4113' *)
                (* Entry 'IsUnderInfusion': '<S9>:4114' *)
                (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                (* Transition: '<S9>:4137' *)
                overInfusion := 0;

                IF rtb_ifthen6 THEN 
                    (* Transition: '<S9>:4139' *)

                    IF SENSOR_IN.Flow_Rate_Monitored < DB_IN.Flow_Rate_Low THEN 
                        (* Transition: '<S9>:4138' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) < (USINT_TO_DINT(UnitDelay_2_DSTATE) - (UDINT_TO_DINT(USINT_TO_UDINT(CONST_IN.Tolerance_Max) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE))) THEN 
                        (* Transition: '<S9>:4140' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(SENSOR_IN.Flow_Rate_Monitored) < (USINT_TO_DINT(UnitDelay_2_DSTATE) - (UDINT_TO_DINT(USINT_TO_UDINT(CONST_IN.Tolerance_Min) / 100) * USINT_TO_DINT(UnitDelay_2_DSTATE))) THEN 
                        (* Transition: '<S9>:4142' *)
                        overInfusion := 2;
                    END_IF;

                END_IF;

                (* Entry Internal 'IsUnderInfusion': '<S9>:4114' *)

                CASE overInfusion OF
                    1: 
                        (* Transition: '<S9>:4709' *)
                        is_IsUnderInfusion := 3;
                        (* Entry 'Yes': '<S9>:4126' *)
                    2: 
                        (* Transition: '<S9>:4710' *)
                        is_IsUnderInfusion := 2;
                        (* Entry 'Monitor': '<S9>:4128' *)
                        (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                        (* Transition: '<S9>:4137' *)
                    ELSE
                        (* Transition: '<S9>:4116' *)
                        is_IsUnderInfusion := 1;
                        (* Entry 'Check': '<S9>:4127' *)
                        (* Graphical Function 'checkUnderInfusion': '<S9>:4130' *)
                        (* Transition: '<S9>:4137' *)
                END_CASE;

                (* Entry Internal 'IsFlowRateNotStable': '<S9>:4143' *)

                IF rtb_ifthen6 AND SENSOR_IN.Flow_Rate_Not_Stable THEN 
                    (* Transition: '<S9>:4210' *)
                    is_IsFlowRateNotStable := 2;
                ELSE 
                    (* Transition: '<S9>:4144' *)
                    is_IsFlowRateNotStable := 1;
                END_IF;

                (* Entry Internal 'IsIdleTimeExceeded': '<S9>:4149' *)
                (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                IF (UnitDelay_3_DSTATE = 1) AND (CONST_IN.Max_Idle_Duration = 1) THEN 
                    (* Transition: '<S9>:4749' *)
                    is_IsIdleTimeExceeded := 2;
                ELSIF UnitDelay_3_DSTATE = 1 THEN 
                    (* Transition: '<S9>:4748' *)
                    idletimer := 0;
                    is_IsIdleTimeExceeded := 3;
                    (* Entry 'counting': '<S9>:4745' *)
                    idletimer := DINT_TO_USINT(USINT_TO_DINT(idletimer) + 1);
                ELSE 
                    (* Transition: '<S9>:4150' *)
                    is_IsIdleTimeExceeded := 1;
                    (* Entry 'No': '<S9>:4153' *)
                    idletimer := 0;
                END_IF;

                (* Entry Internal 'IsPausedTimeExceeded': '<S9>:4155' *)
                (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                IF (((UnitDelay_3_DSTATE = 6) OR (UnitDelay_3_DSTATE = 7)) OR (UnitDelay_3_DSTATE = 8)) AND (CONST_IN.Max_Paused_Duration = 1) THEN 
                    (* Transition: '<S9>:4760' *)
                    is_IsPausedTimeExceeded := 2;
                ELSIF ((UnitDelay_3_DSTATE = 6) OR (UnitDelay_3_DSTATE = 7)) OR (UnitDelay_3_DSTATE = 8) THEN 
                    (* Transition: '<S9>:4759' *)
                    pausedtimer := 0;
                    is_IsPausedTimeExceeded := 3;
                    (* Entry 'counting': '<S9>:4752' *)
                    pausedtimer := DINT_TO_USINT(USINT_TO_DINT(pausedtimer) + 1);
                ELSE 
                    (* Transition: '<S9>:4753' *)
                    is_IsPausedTimeExceeded := 1;
                    (* Entry 'No': '<S9>:4756' *)
                    pausedtimer := 0;
                END_IF;

                (* Entry Internal 'IsConfigTimeWarning': '<S9>:4161' *)
                (* MATLAB Function 'Step_Scaling_Factor': '<S9>:4771' *)
                (* '<S9>:4771:3' returnVal=inputVal/step_size; *)

                IF rtb_Config_Timer > CONST_IN.Config_Warning_Duration THEN 
                    (* Transition: '<S9>:4207' *)
                    is_IsConfigTimeWarning := 2;
                ELSE 
                    (* Transition: '<S9>:4162' *)
                    is_IsConfigTimeWarning := 1;
                END_IF;

                (* Entry Internal 'IsBatteryError': '<S9>:4167' *)

                IF (SENSOR_IN.Battery_Low OR SENSOR_IN.Battery_Unable_To_Charge) OR SENSOR_IN.Supply_Voltage_Out_Of_Range THEN 
                    (* Transition: '<S9>:4212' *)
                    is_IsBatteryError := 2;
                ELSE 
                    (* Transition: '<S9>:4168' *)
                    is_IsBatteryError := 1;
                END_IF;

                (* Entry Internal 'IsPumpHot': '<S9>:4173' *)

                IF SENSOR_IN.Pump_Overheated THEN 
                    (* Transition: '<S9>:4208' *)
                    is_IsPumpHot := 2;
                ELSE 
                    (* Transition: '<S9>:4174' *)
                    is_IsPumpHot := 1;
                END_IF;

                (* Entry Internal 'IsLoggingFailed': '<S9>:4179' *)

                IF rtb_Logging_Failed THEN 
                    (* Transition: '<S9>:4213' *)
                    is_IsLoggingFailed := 2;
                ELSE 
                    (* Transition: '<S9>:4180' *)
                    is_IsLoggingFailed := 1;
                END_IF;

                (* Entry Internal 'IsSystemMonitorFailed': '<S9>:4185' *)

                IF rtb_System_Monitor_Failed THEN 
                    (* Transition: '<S9>:4209' *)
                    is_IsSystemMonitorFailed := 2;
                ELSE 
                    (* Transition: '<S9>:4186' *)
                    is_IsSystemMonitorFailed := 1;
                END_IF;

                (* Entry 'SetAlarmStatus': '<S9>:4018' *)
                (* Graphical Function 'setCurrentAlarm': '<S9>:3955' *)
                (* Transition: '<S9>:3975' *)
                b_s := 0;
                rtb_Config_Timer := 0;

                IF is_IsSystemMonitorFailed = 2 THEN 
                    (* Transition: '<S9>:3976' *)
                    b_s := 18;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsLoggingFailed = 2 THEN 
                    (* Transition: '<S9>:3979' *)
                    b_s := 17;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsPumpHot = 2 THEN 
                    (* Transition: '<S9>:3981' *)
                    b_s := 16;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsBatteryError = 2 THEN 
                    (* Transition: '<S9>:3982' *)
                    b_s := 15;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsConfigTimeWarning = 2 THEN 
                    (* Transition: '<S9>:3985' *)
                    b_s := 14;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsPausedTimeExceeded = 2 THEN 
                    (* Transition: '<S9>:3986' *)
                    b_s := 13;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsIdleTimeExceeded = 2 THEN 
                    (* Transition: '<S9>:3989' *)
                    b_s := 12;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsFlowRateNotStable = 2 THEN 
                    (* Transition: '<S9>:3991' *)
                    b_s := 11;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsUnderInfusion = 3 THEN 
                    (* Transition: '<S9>:3992' *)
                    b_s := 10;
                    rtb_Config_Timer := 1;
                END_IF;


                IF is_IsLowReservoir = 2 THEN 
                    (* Transition: '<S9>:3994' *)
                    b_s := 9;
                    rtb_Config_Timer := 2;
                END_IF;


                IF is_IsDoor_Open = 2 THEN 
                    (* Transition: '<S9>:3997' *)
                    b_s := 8;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsOcclusion = 2 THEN 
                    (* Transition: '<S9>:3999' *)
                    b_s := 7;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsAirInLine = 2 THEN 
                    (* Transition: '<S9>:4000' *)
                    b_s := 6;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsOverInfusionVTBI = 2 THEN 
                    (* Transition: '<S9>:4003' *)
                    b_s := 5;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsOverInfusionFlowRate = 3 THEN 
                    (* Transition: '<S9>:4005' *)
                    b_s := 4;
                    rtb_Config_Timer := 3;
                END_IF;


                IF is_IsHardwareError = 2 THEN 
                    (* Transition: '<S9>:4007' *)
                    b_s := 3;
                    rtb_Config_Timer := 4;
                END_IF;


                IF is_IsEnviromentalError = 2 THEN 
                    (* Transition: '<S9>:4009' *)
                    b_s := 2;
                    rtb_Config_Timer := 4;
                END_IF;


                IF is_IsEmptyReservoir = 2 THEN 
                    (* Transition: '<S9>:4011' *)
                    b_s := 1;
                    rtb_Config_Timer := 4;
                END_IF;

                currentAlarm := DINT_TO_USINT(b_s);
                (* Graphical Function 'setHighestAlarm': '<S9>:4098' *)
                (* Transition: '<S9>:4104' *)
                (* Entry Internal 'Notification': '<S9>:3908' *)
                (* Entry Internal 'Visual': '<S9>:3909' *)

                IF currentAlarm > 0 THEN 
                    (* Transition: '<S9>:4608' *)
                    is_Visual := 1;
                    (* Entry 'AlarmDisplay': '<S9>:3913' *)
                    c_ALARM_OUT_Visual_Notifica := currentAlarm;
                ELSE 
                    (* Transition: '<S9>:3910' *)
                    is_Visual := 2;
                    (* Entry 'OFF': '<S9>:3914' *)
                    c_ALARM_OUT_Visual_Notifica := 0;
                END_IF;

                (* Entry 'Audio': '<S9>:3919' *)
                ALARM_OUT_Is_Audio_Disabled := OP_CMD_IN.Disable_Audio;
                (* Entry Internal 'Audio': '<S9>:3919' *)

                CASE USINT_TO_DINT(OP_CMD_IN.Disable_Audio) OF
                    1: 
                        (* Transition: '<S9>:4599' *)
                        is_Audio := 1;
                        (* Entry 'Disabled': '<S9>:3939' *)
                        c_ALARM_OUT_Audio_Notificat := 0;
                    2: 
                        (* Transition: '<S9>:4600' *)
                        is_Audio := 4;
                        (* Entry 'Silenced': '<S9>:3952' *)
                        audioTimer := 0;
                        c_ALARM_OUT_Audio_Notificat := 0;
                        audioTimer := DINT_TO_USINT(USINT_TO_DINT(audioTimer) + 1);
                    ELSE

                        IF (rtb_Config_Timer > 2) AND (OP_CMD_IN.Disable_Audio = 0) THEN 
                            (* Transition: '<S9>:4601' *)
                            is_Audio := 3;
                            (* Entry 'ON': '<S9>:3938' *)
                            c_ALARM_OUT_Audio_Notificat := CONST_IN.Audio_Level;
                        ELSE 
                            (* Transition: '<S9>:3924' *)
                            is_Audio := 2;
                            (* Entry 'OFF': '<S9>:3937' *)
                            c_ALARM_OUT_Audio_Notificat := 0;
                        END_IF;

                END_CASE;

            ELSE 
                rtb_Config_Timer := 0;
            END_IF;

        END_IF;

        (* End of Chart: '<S2>/Alarm  Sub-System' *)
        

        (* Chart: '<S3>/Config  Sub-System' incorporates:
         *  Inport: '<Root>/CONST_IN'
         *  Inport: '<Root>/DB_IN'
         *  Inport: '<Root>/OP_CMD_IN'
         *  Inport: '<Root>/PRES_IN'
         *  SignalConversion: '<Root>/BusConversion_InsertedFor_CONST_IN_at_outport_0' *)
        (* Gateway: GPCA_SW_Logical_Architecture_Subsystem/CONFIG_Functional_Subsystem/Config  Sub-System *)
        (* During: GPCA_SW_Logical_Architecture_Subsystem/CONFIG_Functional_Subsystem/Config  Sub-System *)

        IF c_is_active_c3_GPCA_SW_Logi = 0 THEN 
            (* Entry: GPCA_SW_Logical_Architecture_Subsystem/CONFIG_Functional_Subsystem/Config  Sub-System *)
            c_is_active_c3_GPCA_SW_Logi := 1;
            (* Entry Internal: GPCA_SW_Logical_Architecture_Subsystem/CONFIG_Functional_Subsystem/Config  Sub-System *)

            IF rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S10>:4535' *)
                c_is_c3_GPCA_SW_Logical_Arc := 1;
                (* Entry Internal 'Configuration': '<S10>:4440' *)
                (* Transition: '<S10>:4441' *)
                is_Configuration := 1;
                (* Entry 'MAIN': '<S10>:4518' *)
                CONFIG_OUT_Config_Timer := 0;
                (* Graphical Function 'setReservoirVolume': '<S10>:4596' *)
                (* Graphical Function 'checkIfPrescriptionAvailable': '<S10>:4573' *)
                (* Transition: '<S10>:4584' *)

                IF  NOT New_Configuration THEN 
                    (* Transition: '<S10>:4603' *)
                    CONFIG_OUT_Reservoir_Volume := rtb_Reservoir_Volume_l;
                    (* Transition: '<S10>:4581' *)

                    IF (((((CONFIG_OUT_Patient_ID > 0) AND (CONFIG_OUT_Drug_Name > 0)) AND (c_CONFIG_OUT_Drug_Concentra > 0)) AND (CONFIG_OUT_VTBI_Total > 0)) AND (CONFIG_OUT_Total_Duration > 0)) AND (CONFIG_OUT_Flow_Rate_Basal > 0) THEN 
                        (* Transition: '<S10>:4575' *)
                        CONFIG_OUT_Configured := 3;
                    ELSE 
                        (* Transition: '<S10>:4582' *)
                        CONFIG_OUT_Configured := 0;
                    END_IF;

                ELSE 
                    (* Transition: '<S10>:4586' *)
                    New_Configuration := FALSE;
                END_IF;

            ELSE 
                (* Transition: '<S10>:4534' *)
                c_is_c3_GPCA_SW_Logical_Arc := 2;
            END_IF;

        ELSIF c_is_c3_GPCA_SW_Logical_Arc = 1 THEN 
            (* During 'Configuration': '<S10>:4440' *)

            IF  NOT rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S10>:4531' *)
                (* Exit Internal 'Configuration': '<S10>:4440' *)

                CASE is_Configuration OF
                    1: 
                        (* Exit 'MAIN': '<S10>:4518' *)
                        CONFIG_OUT_Config_Timer := 0;
                        (* Graphical Function 'setReservoirVolume': '<S10>:4596' *)
                        (* Graphical Function 'checkIfPrescriptionAvailable': '<S10>:4573' *)
                        (* Transition: '<S10>:4584' *)

                        IF  NOT New_Configuration THEN 
                            (* Transition: '<S10>:4603' *)
                            CONFIG_OUT_Reservoir_Volume := rtb_Reservoir_Volume_l;
                            (* Transition: '<S10>:4581' *)

                            IF (((((CONFIG_OUT_Patient_ID > 0) AND (CONFIG_OUT_Drug_Name > 0)) AND (c_CONFIG_OUT_Drug_Concentra > 0)) AND (CONFIG_OUT_VTBI_Total > 0)) AND (CONFIG_OUT_Total_Duration > 0)) AND (CONFIG_OUT_Flow_Rate_Basal > 0) THEN 
                                (* Transition: '<S10>:4575' *)
                                CONFIG_OUT_Configured := 3;
                            ELSE 
                                (* Transition: '<S10>:4582' *)
                                CONFIG_OUT_Configured := 0;
                            END_IF;

                        ELSE 
                            (* Transition: '<S10>:4586' *)
                            New_Configuration := FALSE;
                        END_IF;

                        is_Configuration := 0;
                    2: 
                        (* Exit Internal 'Prescription_Config': '<S10>:4445' *)

                        CASE is_Prescription_Config OF
                            2: 
                                (* Exit Internal 'Infusion_info': '<S10>:4487' *)
                                is_Infusion_info := 0;
                                (* Exit 'Infusion_info': '<S10>:4487' *)
                                is_Prescription_Config := 0;
                            3: 
                                (* Exit Internal 'Patient_Drug_info': '<S10>:4456' *)
                                is_Patient_Drug_info := 0;
                                (* Exit 'Patient_Drug_info': '<S10>:4456' *)
                                is_Prescription_Config := 0;
                            ELSE
                                is_Prescription_Config := 0;
                        END_CASE;

                        (* Exit 'Prescription_Config': '<S10>:4445' *)
                        CONFIG_OUT_Config_Timer := DINT_TO_USINT(USINT_TO_DINT(CONFIG_OUT_Config_Timer) + 1);
                        is_Configuration := 0;
                END_CASE;

                c_is_c3_GPCA_SW_Logical_Arc := 2;
            ELSIF is_Configuration = 1 THEN 
                (* During 'MAIN': '<S10>:4518' *)

                IF OP_CMD_IN.Data_Config OR (OP_CMD_IN.Infusion_Initiate AND (CONFIG_OUT_Configured = 0)) THEN 
                    (* Transition: '<S10>:4442' *)
                    (* Exit 'MAIN': '<S10>:4518' *)
                    CONFIG_OUT_Config_Timer := 0;
                    (* Graphical Function 'setReservoirVolume': '<S10>:4596' *)
                    (* Graphical Function 'checkIfPrescriptionAvailable': '<S10>:4573' *)
                    (* Transition: '<S10>:4584' *)

                    IF  NOT New_Configuration THEN 
                        (* Transition: '<S10>:4603' *)
                        CONFIG_OUT_Reservoir_Volume := rtb_Reservoir_Volume_l;
                        (* Transition: '<S10>:4581' *)

                        IF (((((CONFIG_OUT_Patient_ID > 0) AND (CONFIG_OUT_Drug_Name > 0)) AND (c_CONFIG_OUT_Drug_Concentra > 0)) AND (CONFIG_OUT_VTBI_Total > 0)) AND (CONFIG_OUT_Total_Duration > 0)) AND (CONFIG_OUT_Flow_Rate_Basal > 0) THEN 
                            (* Transition: '<S10>:4575' *)
                            CONFIG_OUT_Configured := 3;
                        ELSE 
                            (* Transition: '<S10>:4582' *)
                            CONFIG_OUT_Configured := 0;
                        END_IF;

                    ELSE 
                        (* Transition: '<S10>:4586' *)
                        New_Configuration := FALSE;
                    END_IF;

                    is_Configuration := 2;
                    (* Entry 'Prescription_Config': '<S10>:4445' *)
                    CONFIG_OUT_Config_Timer := DINT_TO_USINT(USINT_TO_DINT(CONFIG_OUT_Config_Timer) + 1);
                    CONFIG_OUT_Reservoir_Volume := rtb_Reservoir_Volume_l;
                    (* Graphical Function 'checkIfPrescriptionAvailable': '<S10>:4573' *)
                    (* Transition: '<S10>:4584' *)

                    IF  NOT New_Configuration THEN 
                        (* Transition: '<S10>:4581' *)

                        IF (((((CONFIG_OUT_Patient_ID > 0) AND (CONFIG_OUT_Drug_Name > 0)) AND (c_CONFIG_OUT_Drug_Concentra > 0)) AND (CONFIG_OUT_VTBI_Total > 0)) AND (CONFIG_OUT_Total_Duration > 0)) AND (CONFIG_OUT_Flow_Rate_Basal > 0) THEN 
                            (* Transition: '<S10>:4575' *)
                            CONFIG_OUT_Configured := 3;
                        ELSE 
                            (* Transition: '<S10>:4582' *)
                            CONFIG_OUT_Configured := 0;
                        END_IF;

                    ELSE 
                        (* Transition: '<S10>:4586' *)
                        New_Configuration := FALSE;
                    END_IF;

                    (* Entry Internal 'Prescription_Config': '<S10>:4445' *)
                    (* Transition: '<S10>:4449' *)
                    is_Prescription_Config := 4;
                    (* Entry 'SelectType': '<S10>:4486' *)
                    c_CONFIG_OUT_Request_Config := TRUE;
                ELSE 
                    CONFIG_OUT_Config_Timer := 0;
                    (* Graphical Function 'setReservoirVolume': '<S10>:4596' *)
                    (* Graphical Function 'checkIfPrescriptionAvailable': '<S10>:4573' *)
                    (* Transition: '<S10>:4584' *)

                    IF  NOT New_Configuration THEN 
                        (* Transition: '<S10>:4603' *)
                        CONFIG_OUT_Reservoir_Volume := rtb_Reservoir_Volume_l;
                        (* Transition: '<S10>:4581' *)

                        IF (((((CONFIG_OUT_Patient_ID > 0) AND (CONFIG_OUT_Drug_Name > 0)) AND (c_CONFIG_OUT_Drug_Concentra > 0)) AND (CONFIG_OUT_VTBI_Total > 0)) AND (CONFIG_OUT_Total_Duration > 0)) AND (CONFIG_OUT_Flow_Rate_Basal > 0) THEN 
                            (* Transition: '<S10>:4575' *)
                            CONFIG_OUT_Configured := 3;
                        ELSE 
                            (* Transition: '<S10>:4582' *)
                            CONFIG_OUT_Configured := 0;
                        END_IF;

                    ELSE 
                        (* Transition: '<S10>:4586' *)
                        New_Configuration := FALSE;
                    END_IF;

                END_IF;

            ELSE 
                (* During 'Prescription_Config': '<S10>:4445' *)
                (* Graphical Function 'Step_Scaling_Factor': '<S10>:4565' *)
                (* Transition: '<S10>:4566' *)

                IF (CONFIG_OUT_Config_Timer > CONST_IN.Max_Config_Duration) OR OP_CMD_IN.Cancel THEN 
                    (* Transition: '<S10>:4443' *)
                    (* Graphical Function 'cancelConfigValues': '<S10>:4522' *)
                    (* Transition: '<S10>:4524' *)
                    t_PatientID := 0;
                    t_DrugName := 0;
                    t_DrugConcentration := 0;
                    t_EnteredReservoirVolume := 0;
                    t_VTBI_total := 0;
                    t_Duration_total := 0;
                    t_FlowRate_basal := 0;
                    t_FlowRate_sbolus := 0;
                    t_FlowRate_pbolus := 0;
                    t_FlowRate_kvo := 0;
                    t_Duration_sbolus := 0;
                    t_Duration_pbolus := 0;
                    t_LockOutPeriod_pbolus := 0;
                    t_NumberMax_pbolus := 0;
                    t_Interval_sbolus := 0;
                    (* Graphical Function 'writeLog': '<S10>:4537' *)
                    (* Transition: '<S10>:4539' *)
                    CONFIG_OUT_Log_Message_ID := 2;
                    (* Exit Internal 'Prescription_Config': '<S10>:4445' *)

                    CASE is_Prescription_Config OF
                        2: 
                            (* Exit Internal 'Infusion_info': '<S10>:4487' *)
                            is_Infusion_info := 0;
                            (* Exit 'Infusion_info': '<S10>:4487' *)
                            is_Prescription_Config := 0;
                        3: 
                            (* Exit Internal 'Patient_Drug_info': '<S10>:4456' *)
                            is_Patient_Drug_info := 0;
                            (* Exit 'Patient_Drug_info': '<S10>:4456' *)
                            is_Prescription_Config := 0;
                        ELSE
                            is_Prescription_Config := 0;
                    END_CASE;

                    (* Exit 'Prescription_Config': '<S10>:4445' *)
                    is_Configuration := 1;
                    (* Entry 'MAIN': '<S10>:4518' *)
                    CONFIG_OUT_Config_Timer := 0;
                    (* Graphical Function 'setReservoirVolume': '<S10>:4596' *)
                    (* Graphical Function 'checkIfPrescriptionAvailable': '<S10>:4573' *)
                    (* Transition: '<S10>:4584' *)

                    IF  NOT New_Configuration THEN 
                        (* Transition: '<S10>:4603' *)
                        CONFIG_OUT_Reservoir_Volume := rtb_Reservoir_Volume_l;
                        (* Transition: '<S10>:4581' *)

                        IF (((((CONFIG_OUT_Patient_ID > 0) AND (CONFIG_OUT_Drug_Name > 0)) AND (c_CONFIG_OUT_Drug_Concentra > 0)) AND (CONFIG_OUT_VTBI_Total > 0)) AND (CONFIG_OUT_Total_Duration > 0)) AND (CONFIG_OUT_Flow_Rate_Basal > 0) THEN 
                            (* Transition: '<S10>:4575' *)
                            CONFIG_OUT_Configured := 3;
                        ELSE 
                            (* Transition: '<S10>:4582' *)
                            CONFIG_OUT_Configured := 0;
                        END_IF;

                    ELSE 
                        (* Transition: '<S10>:4586' *)
                        New_Configuration := FALSE;
                    END_IF;

                ELSE 
                    CONFIG_OUT_Config_Timer := DINT_TO_USINT(USINT_TO_DINT(CONFIG_OUT_Config_Timer) + 1);
                    CONFIG_OUT_Reservoir_Volume := rtb_Reservoir_Volume_l;
                    (* Graphical Function 'checkIfPrescriptionAvailable': '<S10>:4573' *)
                    (* Transition: '<S10>:4584' *)

                    IF  NOT New_Configuration THEN 
                        (* Transition: '<S10>:4581' *)

                        IF (((((CONFIG_OUT_Patient_ID > 0) AND (CONFIG_OUT_Drug_Name > 0)) AND (c_CONFIG_OUT_Drug_Concentra > 0)) AND (CONFIG_OUT_VTBI_Total > 0)) AND (CONFIG_OUT_Total_Duration > 0)) AND (CONFIG_OUT_Flow_Rate_Basal > 0) THEN 
                            (* Transition: '<S10>:4575' *)
                            CONFIG_OUT_Configured := 3;
                        ELSE 
                            (* Transition: '<S10>:4582' *)
                            CONFIG_OUT_Configured := 0;
                        END_IF;

                    ELSE 
                        (* Transition: '<S10>:4586' *)
                        New_Configuration := FALSE;
                    END_IF;


                    CASE is_Prescription_Config OF
                        1: 
                            (* During 'ConfirmInfusionInitation': '<S10>:4517' *)

                            IF OP_CMD_IN.Infusion_Initiate THEN 
                                (* Transition: '<S10>:4444' *)
                                CONFIG_OUT_Request_Confirmv := FALSE;
                                (* Graphical Function 'saveConfigValues': '<S10>:4519' *)
                                (* Transition: '<S10>:4521' *)
                                CONFIG_OUT_Patient_ID := t_PatientID;
                                CONFIG_OUT_Drug_Name := t_DrugName;
                                c_CONFIG_OUT_Drug_Concentra := t_DrugConcentration;
                                c_CONFIG_OUT_Entered_Reserv := t_EnteredReservoirVolume;
                                CONFIG_OUT_VTBI_Total := t_VTBI_total;
                                CONFIG_OUT_Total_Duration := t_Duration_total;
                                CONFIG_OUT_Flow_Rate_Basal := t_FlowRate_basal;
                                c_CONFIG_OUT_Flow_Rate_Inte := t_FlowRate_sbolus;
                                c_CONFIG_OUT_Flow_Rate_Pati := t_FlowRate_pbolus;
                                CONFIG_OUT_Flow_Rate_KVO := t_FlowRate_kvo;
                                c_CONFIG_OUT_Duration_Inter := t_Duration_sbolus;
                                c_CONFIG_OUT_Duration_Patie := t_Duration_pbolus;
                                c_CONFIG_OUT_Lockout_Period := t_LockOutPeriod_pbolus;
                                c_CONFIG_OUT_Max_Number_ofv := t_NumberMax_pbolus;
                                c_CONFIG_OUT_Interval_Inter := t_Interval_sbolus;
                                CONFIG_OUT_Reservoir_Volume := c_CONFIG_OUT_Entered_Reserv;
                                CONFIG_OUT_Configured := Selected_Configuration_Type;
                                New_Configuration := TRUE;
                                (* Graphical Function 'cancelConfigValues': '<S10>:4522' *)
                                (* Transition: '<S10>:4524' *)
                                t_PatientID := 0;
                                t_DrugName := 0;
                                t_DrugConcentration := 0;
                                t_EnteredReservoirVolume := 0;
                                t_VTBI_total := 0;
                                t_Duration_total := 0;
                                t_FlowRate_basal := 0;
                                t_FlowRate_sbolus := 0;
                                t_FlowRate_pbolus := 0;
                                t_FlowRate_kvo := 0;
                                t_Duration_sbolus := 0;
                                t_Duration_pbolus := 0;
                                t_LockOutPeriod_pbolus := 0;
                                t_NumberMax_pbolus := 0;
                                t_Interval_sbolus := 0;
                                (* Graphical Function 'writeLog': '<S10>:4537' *)
                                (* Transition: '<S10>:4539' *)
                                (* Graphical Function 'writeLog': '<S10>:4537' *)
                                (* Transition: '<S10>:4539' *)
                                CONFIG_OUT_Log_Message_ID := 1;
                                is_Prescription_Config := 0;
                                (* Exit 'Prescription_Config': '<S10>:4445' *)
                                is_Configuration := 1;
                                (* Entry 'MAIN': '<S10>:4518' *)
                                CONFIG_OUT_Config_Timer := 0;
                                (* Graphical Function 'setReservoirVolume': '<S10>:4596' *)
                                (* Graphical Function 'checkIfPrescriptionAvailable': '<S10>:4573' *)
                                (* Transition: '<S10>:4584' *)

                                IF  NOT New_Configuration THEN 
                                    (* Transition: '<S10>:4603' *)
                                    CONFIG_OUT_Reservoir_Volume := rtb_Reservoir_Volume_l;
                                    (* Transition: '<S10>:4581' *)

                                    IF (((((CONFIG_OUT_Patient_ID > 0) AND (CONFIG_OUT_Drug_Name > 0)) AND (c_CONFIG_OUT_Drug_Concentra > 0)) AND (CONFIG_OUT_VTBI_Total > 0)) AND (CONFIG_OUT_Total_Duration > 0)) AND (CONFIG_OUT_Flow_Rate_Basal > 0) THEN 
                                        (* Transition: '<S10>:4575' *)
                                        CONFIG_OUT_Configured := 3;
                                    ELSE 
                                        (* Transition: '<S10>:4582' *)
                                        CONFIG_OUT_Configured := 0;
                                    END_IF;

                                ELSE 
                                    (* Transition: '<S10>:4586' *)
                                    New_Configuration := FALSE;
                                END_IF;

                            ELSE 
                                CONFIG_OUT_Request_Confirmv := TRUE;
                            END_IF;

                        2: 
                            (* During 'Infusion_info': '<S10>:4487' *)

                            IF OP_CMD_IN.Back AND ( NOT rtb_ifthen6) THEN 
                                (* Transition: '<S10>:4450' *)
                                (* Exit Internal 'Infusion_info': '<S10>:4487' *)
                                is_Infusion_info := 0;
                                (* Exit 'Infusion_info': '<S10>:4487' *)
                                is_Prescription_Config := 3;
                                (* Entry 'Patient_Drug_info': '<S10>:4456' *)
                                (* Entry Internal 'Patient_Drug_info': '<S10>:4456' *)
                                (* Transition: '<S10>:4459' *)
                                is_Patient_Drug_info := 2;
                                (* Entry 'DisplayParam': '<S10>:4466' *)
                                CONFIG_OUT_Request_Patientv := TRUE;
                                validate := 0;
                            ELSE 

                                CASE is_Infusion_info OF
                                    1: 
                                        (* During 'GetInfusionParam': '<S10>:4495' *)

                                        IF OP_CMD_IN.Next THEN 
                                            (* Transition: '<S10>:4491' *)
                                            is_Infusion_info := 3;
                                            (* Entry 'ValidateInfusionParam': '<S10>:4496' *)
                                            (* Graphical Function 'checkInfusionParam': '<S10>:4498' *)
                                            (* Transition: '<S10>:4508' *)
                                            b_s := 1;

                                            IF (t_VTBI_total > DB_IN.VTBI_High) OR (t_VTBI_total < DB_IN.VTBI_Low) THEN 
                                                (* Transition: '<S10>:4509' *)
                                                b_s := 0;
                                            ELSIF (t_FlowRate_basal < DB_IN.Flow_Rate_Low) OR (t_FlowRate_basal > DB_IN.Flow_Rate_High) THEN 
                                                (* Transition: '<S10>:4510' *)
                                                b_s := 0;
                                            ELSIF (t_FlowRate_sbolus < DB_IN.Flow_Rate_Low) OR (t_FlowRate_sbolus > DB_IN.Flow_Rate_High) THEN 
                                                (* Transition: '<S10>:4511' *)
                                                b_s := 0;
                                            ELSIF (t_FlowRate_pbolus < DB_IN.Flow_Rate_Low) OR (t_FlowRate_pbolus > DB_IN.Flow_Rate_High) THEN 
                                                (* Transition: '<S10>:4512' *)
                                                b_s := 0;
                                            ELSIF t_Duration_sbolus > t_Interval_sbolus THEN 
                                                (* Transition: '<S10>:4513' *)
                                                b_s := 0;
                                            ELSIF t_NumberMax_pbolus > DB_IN.Number_Max_Patient_Bolus THEN 
                                                (* Transition: '<S10>:4515' *)
                                                b_s := 0;
                                            ELSIF (t_FlowRate_pbolus < t_FlowRate_basal) OR (t_FlowRate_sbolus < t_FlowRate_basal) THEN 
                                                (* Transition: '<S10>:4514' *)
                                                b_s := 0;
                                            END_IF;

                                            validate := DINT_TO_USINT(b_s);
                                        END_IF;

                                    2: 
                                        (* During 'RequestInfusionParam': '<S10>:4494' *)

                                        IF OP_CMD_IN.Next THEN 
                                            (* Transition: '<S10>:4488' *)
                                            is_Infusion_info := 1;
                                            (* Entry 'GetInfusionParam': '<S10>:4495' *)
                                            t_VTBI_total := PRES_IN.VTBI_Total;
                                            t_Duration_total := PRES_IN.Total_Duration;
                                            t_FlowRate_basal := PRES_IN.Flow_Rate_Basal;
                                            t_FlowRate_sbolus := PRES_IN.c_Flow_Rate_Intermittent_Bo;
                                            t_FlowRate_pbolus := PRES_IN.Flow_Rate_Patient_Bolus;
                                            t_Duration_sbolus := PRES_IN.Duration_Intermittent_Bolus;
                                            t_Duration_pbolus := PRES_IN.Duration_Patient_Bolus;
                                            t_LockOutPeriod_pbolus := PRES_IN.c_Lockout_Period_Patient_Bo;
                                            t_NumberMax_pbolus := PRES_IN.Max_Number_of_Patient_Bolus;
                                            t_Interval_sbolus := PRES_IN.Interval_Intermittent_Bolus;
                                            t_FlowRate_kvo := DB_IN.Flow_Rate_KVO;
                                            c_CONFIG_OUT_Request_Infusi := FALSE;
                                        ELSIF OP_CMD_IN.Next THEN 
                                            (* Transition: '<S10>:4490' *)
                                            is_Infusion_info := 3;
                                            (* Entry 'ValidateInfusionParam': '<S10>:4496' *)
                                            (* Graphical Function 'checkInfusionParam': '<S10>:4498' *)
                                            (* Transition: '<S10>:4508' *)
                                            b_s := 1;

                                            IF (t_VTBI_total > DB_IN.VTBI_High) OR (t_VTBI_total < DB_IN.VTBI_Low) THEN 
                                                (* Transition: '<S10>:4509' *)
                                                b_s := 0;
                                            ELSIF (t_FlowRate_basal < DB_IN.Flow_Rate_Low) OR (t_FlowRate_basal > DB_IN.Flow_Rate_High) THEN 
                                                (* Transition: '<S10>:4510' *)
                                                b_s := 0;
                                            ELSIF (t_FlowRate_sbolus < DB_IN.Flow_Rate_Low) OR (t_FlowRate_sbolus > DB_IN.Flow_Rate_High) THEN 
                                                (* Transition: '<S10>:4511' *)
                                                b_s := 0;
                                            ELSIF (t_FlowRate_pbolus < DB_IN.Flow_Rate_Low) OR (t_FlowRate_pbolus > DB_IN.Flow_Rate_High) THEN 
                                                (* Transition: '<S10>:4512' *)
                                                b_s := 0;
                                            ELSIF t_Duration_sbolus > t_Interval_sbolus THEN 
                                                (* Transition: '<S10>:4513' *)
                                                b_s := 0;
                                            ELSIF t_NumberMax_pbolus > DB_IN.Number_Max_Patient_Bolus THEN 
                                                (* Transition: '<S10>:4515' *)
                                                b_s := 0;
                                            ELSIF (t_FlowRate_pbolus < t_FlowRate_basal) OR (t_FlowRate_sbolus < t_FlowRate_basal) THEN 
                                                (* Transition: '<S10>:4514' *)
                                                b_s := 0;
                                            END_IF;

                                            validate := DINT_TO_USINT(b_s);
                                        END_IF;

                                    ELSE
                                        (* During 'ValidateInfusionParam': '<S10>:4496' *)

                                        IF  NOT (validate <> 0) THEN 
                                            (* Transition: '<S10>:4492' *)
                                            is_Infusion_info := 2;
                                            (* Entry 'RequestInfusionParam': '<S10>:4494' *)
                                            c_CONFIG_OUT_Request_Infusi := TRUE;
                                            validate := 0;
                                        ELSE 
                                            (* Transition: '<S10>:4493' *)
                                            is_Infusion_info := 0;
                                            (* Exit 'Infusion_info': '<S10>:4487' *)
                                            is_Prescription_Config := 1;
                                            (* Entry 'ConfirmInfusionInitation': '<S10>:4517' *)
                                            CONFIG_OUT_Request_Confirmv := TRUE;
                                        END_IF;

                                END_CASE;

                            END_IF;

                        3: 
                            (* During 'Patient_Drug_info': '<S10>:4456' *)

                            CASE is_Patient_Drug_info OF
                                1: 
                                    CONFIG_OUT_Error_Message_ID := 5;
                                    (* During 'DisplayErrorMessage': '<S10>:4468' *)
                                    (* Transition: '<S10>:4460' *)
                                    is_Patient_Drug_info := 2;
                                    (* Entry 'DisplayParam': '<S10>:4466' *)
                                    CONFIG_OUT_Request_Patientv := TRUE;
                                    validate := 0;
                                2: 
                                    (* During 'DisplayParam': '<S10>:4466' *)

                                    IF OP_CMD_IN.Next THEN 
                                        (* Transition: '<S10>:4457' *)
                                        is_Patient_Drug_info := 4;
                                        (* Entry 'GetParam': '<S10>:4467' *)
                                        t_PatientID := PRES_IN.Patient_ID;
                                        t_DrugName := PRES_IN.Drug_Name;
                                        t_DrugConcentration := PRES_IN.Drug_Concentration;
                                        t_EnteredReservoirVolume := PRES_IN.Entered_Reservoir_Volume;
                                        CONFIG_OUT_Request_Patientv := FALSE;
                                    ELSIF OP_CMD_IN.Next THEN 
                                        (* Transition: '<S10>:4461' *)
                                        is_Patient_Drug_info := 5;
                                        (* Entry 'ValidateParam': '<S10>:4470' *)
                                        (* Graphical Function 'checkPatient_DrugParam': '<S10>:4472' *)
                                        (* Transition: '<S10>:4476' *)
                                        b_s := 1;

                                        IF (t_DrugConcentration < DB_IN.Drug_Concentration_Low) OR (t_DrugConcentration > DB_IN.Drug_Concentration_High) THEN 
                                            (* Transition: '<S10>:4477' *)
                                            b_s := 0;
                                        ELSIF t_EnteredReservoirVolume < CONST_IN.Empty_Reservoir THEN 
                                            (* Transition: '<S10>:4478' *)
                                            b_s := 0;
                                        END_IF;

                                        validate := DINT_TO_USINT(b_s);
                                        CONFIG_OUT_Request_Patientv := FALSE;
                                        value := 0;
                                    END_IF;

                                3: 
                                    (* During 'GetDrugSafeValues': '<S10>:4469' *)

                                    IF value <> 0 THEN 
                                        (* Transition: '<S10>:4464' *)
                                        is_Patient_Drug_info := 5;
                                        (* Entry 'ValidateParam': '<S10>:4470' *)
                                        (* Graphical Function 'checkPatient_DrugParam': '<S10>:4472' *)
                                        (* Transition: '<S10>:4476' *)
                                        b_s := 1;

                                        IF (t_DrugConcentration < DB_IN.Drug_Concentration_Low) OR (t_DrugConcentration > DB_IN.Drug_Concentration_High) THEN 
                                            (* Transition: '<S10>:4477' *)
                                            b_s := 0;
                                        ELSIF t_EnteredReservoirVolume < CONST_IN.Empty_Reservoir THEN 
                                            (* Transition: '<S10>:4478' *)
                                            b_s := 0;
                                        END_IF;

                                        validate := DINT_TO_USINT(b_s);
                                        CONFIG_OUT_Request_Patientv := FALSE;
                                        value := 0;
                                    ELSE 
                                        (* Transition: '<S10>:4462' *)
                                        is_Patient_Drug_info := 1;
                                        (* Entry 'DisplayErrorMessage': '<S10>:4468' *)
                                        CONFIG_OUT_Error_Message_ID := 5;
                                    END_IF;

                                4: 
                                    (* During 'GetParam': '<S10>:4467' *)

                                    IF OP_CMD_IN.Next THEN 
                                        (* Transition: '<S10>:4458' *)
                                        value := 0;
                                        is_Patient_Drug_info := 3;
                                        (* Entry 'GetDrugSafeValues': '<S10>:4469' *)
                                        CONFIG_OUT_Drug_Name := t_DrugName;
                                        (* Graphical Function 'CheckDrugName': '<S10>:4481' *)
                                        (* Transition: '<S10>:4484' *)
                                        b_s := 1;

                                        IF t_DrugName <> DB_IN.Drug_Name THEN 
                                            (* Transition: '<S10>:4485' *)
                                            b_s := 0;
                                        END_IF;

                                        value := DINT_TO_USINT(b_s);
                                    END_IF;

                                ELSE
                                    (* During 'ValidateParam': '<S10>:4470' *)

                                    IF  NOT (validate <> 0) THEN 
                                        (* Transition: '<S10>:4463' *)
                                        is_Patient_Drug_info := 1;
                                        (* Entry 'DisplayErrorMessage': '<S10>:4468' *)
                                        CONFIG_OUT_Error_Message_ID := 5;
                                    ELSE 
                                        (* Transition: '<S10>:4465' *)
                                        is_Patient_Drug_info := 0;
                                        (* Exit 'Patient_Drug_info': '<S10>:4456' *)
                                        is_Prescription_Config := 2;
                                        (* Entry 'Infusion_info': '<S10>:4487' *)
                                        (* Entry Internal 'Infusion_info': '<S10>:4487' *)
                                        (* Transition: '<S10>:4489' *)
                                        is_Infusion_info := 2;
                                        (* Entry 'RequestInfusionParam': '<S10>:4494' *)
                                        c_CONFIG_OUT_Request_Infusi := TRUE;
                                        validate := 0;
                                    END_IF;

                            END_CASE;

                        ELSE
                            (* During 'SelectType': '<S10>:4486' *)

                            IF OP_CMD_IN.Configuration_Type > 0 THEN 
                                (* Transition: '<S10>:4451' *)
                                c_CONFIG_OUT_Request_Config := FALSE;
                                Selected_Configuration_Type := OP_CMD_IN.Configuration_Type;
                                (* Graphical Function 'copyCurrentValuesToTemp': '<S10>:4592' *)
                                (* Transition: '<S10>:4594' *)
                                t_PatientID := CONFIG_OUT_Patient_ID;
                                t_DrugName := CONFIG_OUT_Drug_Name;
                                t_DrugConcentration := c_CONFIG_OUT_Drug_Concentra;
                                t_VTBI_total := CONFIG_OUT_VTBI_Total;
                                t_Duration_total := CONFIG_OUT_Total_Duration;
                                t_FlowRate_basal := CONFIG_OUT_Flow_Rate_Basal;
                                t_FlowRate_sbolus := c_CONFIG_OUT_Flow_Rate_Inte;
                                t_FlowRate_pbolus := c_CONFIG_OUT_Flow_Rate_Pati;
                                t_FlowRate_kvo := CONFIG_OUT_Flow_Rate_KVO;
                                t_Duration_sbolus := c_CONFIG_OUT_Duration_Inter;
                                t_Duration_pbolus := c_CONFIG_OUT_Duration_Patie;
                                t_LockOutPeriod_pbolus := c_CONFIG_OUT_Lockout_Period;
                                t_NumberMax_pbolus := c_CONFIG_OUT_Max_Number_ofv;
                                t_Interval_sbolus := c_CONFIG_OUT_Interval_Inter;
                                t_EnteredReservoirVolume := c_CONFIG_OUT_Entered_Reserv;

                                IF rtb_ifthen6 THEN 
                                    (* Transition: '<S10>:4452' *)
                                    is_Prescription_Config := 2;
                                    (* Entry 'Infusion_info': '<S10>:4487' *)
                                    (* Entry Internal 'Infusion_info': '<S10>:4487' *)
                                    (* Transition: '<S10>:4489' *)
                                    is_Infusion_info := 2;
                                    (* Entry 'RequestInfusionParam': '<S10>:4494' *)
                                    c_CONFIG_OUT_Request_Infusi := TRUE;
                                    validate := 0;
                                ELSE 
                                    (* Transition: '<S10>:4447' *)
                                    is_Prescription_Config := 3;
                                    (* Entry 'Patient_Drug_info': '<S10>:4456' *)
                                    (* Entry Internal 'Patient_Drug_info': '<S10>:4456' *)
                                    (* Transition: '<S10>:4459' *)
                                    is_Patient_Drug_info := 2;
                                    (* Entry 'DisplayParam': '<S10>:4466' *)
                                    CONFIG_OUT_Request_Patientv := TRUE;
                                    validate := 0;
                                END_IF;

                            END_IF;

                    END_CASE;

                END_IF;

            END_IF;

        ELSE 
            (* During 'NOT_ON': '<S10>:4532' *)

            IF rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S10>:4533' *)
                c_is_c3_GPCA_SW_Logical_Arc := 1;
                (* Entry Internal 'Configuration': '<S10>:4440' *)
                (* Transition: '<S10>:4441' *)
                is_Configuration := 1;
                (* Entry 'MAIN': '<S10>:4518' *)
                CONFIG_OUT_Config_Timer := 0;
                (* Graphical Function 'setReservoirVolume': '<S10>:4596' *)
                (* Graphical Function 'checkIfPrescriptionAvailable': '<S10>:4573' *)
                (* Transition: '<S10>:4584' *)

                IF  NOT New_Configuration THEN 
                    (* Transition: '<S10>:4603' *)
                    CONFIG_OUT_Reservoir_Volume := rtb_Reservoir_Volume_l;
                    (* Transition: '<S10>:4581' *)

                    IF (((((CONFIG_OUT_Patient_ID > 0) AND (CONFIG_OUT_Drug_Name > 0)) AND (c_CONFIG_OUT_Drug_Concentra > 0)) AND (CONFIG_OUT_VTBI_Total > 0)) AND (CONFIG_OUT_Total_Duration > 0)) AND (CONFIG_OUT_Flow_Rate_Basal > 0) THEN 
                        (* Transition: '<S10>:4575' *)
                        CONFIG_OUT_Configured := 3;
                    ELSE 
                        (* Transition: '<S10>:4582' *)
                        CONFIG_OUT_Configured := 0;
                    END_IF;

                ELSE 
                    (* Transition: '<S10>:4586' *)
                    New_Configuration := FALSE;
                END_IF;

            END_IF;

        END_IF;

        (* End of Chart: '<S3>/Config  Sub-System' *)
        

        (* Chart: '<S4>/Infusion Manager Sub-System' incorporates:
         *  Inport: '<Root>/OP_CMD_IN'
         *  Inport: '<Root>/PATIENT_IN' *)
        (* Gateway: GPCA_SW_Logical_Architecture_Subsystem/INFUSION_MGR_Functional_Subsystem/Infusion Manager Sub-System *)
        (* During: GPCA_SW_Logical_Architecture_Subsystem/INFUSION_MGR_Functional_Subsystem/Infusion Manager Sub-System *)

        IF c_is_active_c4_GPCA_SW_Logi = 0 THEN 
            (* Entry: GPCA_SW_Logical_Architecture_Subsystem/INFUSION_MGR_Functional_Subsystem/Infusion Manager Sub-System *)
            c_is_active_c4_GPCA_SW_Logi := 1;
            (* Entry Internal: GPCA_SW_Logical_Architecture_Subsystem/INFUSION_MGR_Functional_Subsystem/Infusion Manager Sub-System *)

            IF rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S11>:3986' *)
                c_is_c4_GPCA_SW_Logical_Arc := 1;
                (* Entry Internal 'Infusion_Manager': '<S11>:3858' *)
                (* Transition: '<S11>:3860' *)
                is_Infusion_Manager := 1;
                (* Entry 'IDLE': '<S11>:3866' *)
                rtb_Config_Timer := 1;
                (* Graphical Function 'resetAllInfusionDetails': '<S11>:3959' *)
                (* Transition: '<S11>:3961' *)
                (* Graphical Function 'resetForNewInfusion': '<S11>:3956' *)
                (* Transition: '<S11>:3958' *)
                sbolus_timer := 0;
                pbolus_timer := 0;
                sbolusInter_timer := 0;
                overInfusion := 0;
                c_IM_OUT_Actual_Infusion_Du := 0;
                IM_OUT_Lock_Timer := 0;
                inPatientBolus := FALSE;
                number_pbolus := 0;
            ELSE 
                (* Transition: '<S11>:3744' *)
                c_is_c4_GPCA_SW_Logical_Arc := 2;
                (* Entry 'NOT_ON': '<S11>:3740' *)
                rtb_Config_Timer := 0;
                overInfusion := 0;
            END_IF;

        ELSIF c_is_c4_GPCA_SW_Logical_Arc = 1 THEN 
            (* During 'Infusion_Manager': '<S11>:3858' *)

            IF  NOT rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S11>:3732' *)
                (* Exit Internal 'Infusion_Manager': '<S11>:3858' *)

                CASE is_Infusion_Manager OF
                    1: 
                        (* Exit 'IDLE': '<S11>:3866' *)
                        (* Graphical Function 'resetAllInfusionDetails': '<S11>:3959' *)
                        (* Transition: '<S11>:3961' *)
                        (* Graphical Function 'resetForNewInfusion': '<S11>:3956' *)
                        (* Transition: '<S11>:3958' *)
                        sbolus_timer := 0;
                        pbolus_timer := 0;
                        sbolusInter_timer := 0;
                        c_IM_OUT_Actual_Infusion_Du := 0;
                        IM_OUT_Lock_Timer := 0;
                        inPatientBolus := FALSE;
                        number_pbolus := 0;
                        is_Infusion_Manager := 0;
                    2: 
                        (* Exit Internal 'THERAPY': '<S11>:3867' *)

                        CASE is_THERAPY OF
                            1: 
                                (* Exit Internal 'ACTIVE': '<S11>:3905' *)
                                (* Exit Internal 'Arbiter': '<S11>:3913' *)
                                is_Arbiter := 0;
                                (* Exit Internal 'INTERMITTENT': '<S11>:3936' *)

                                IF is_INTERMITTENT = 2 THEN 
                                    (* Exit 'ON': '<S11>:3941' *)
                                    sbolus_timer := DINT_TO_USINT(USINT_TO_DINT(sbolus_timer) + 1);
                                    sbolus_req := FALSE;
                                    is_INTERMITTENT := 0;
                                ELSE 
                                    is_INTERMITTENT := 0;
                                END_IF;

                                (* Exit Internal 'PATIENT': '<S11>:3927' *)

                                IF is_PATIENT = 3 THEN 
                                    (* Exit 'ON': '<S11>:3934' *)
                                    pbolus_timer := DINT_TO_USINT(USINT_TO_DINT(pbolus_timer) + 1);
                                    is_PATIENT := 0;
                                ELSE 
                                    is_PATIENT := 0;
                                END_IF;

                                (* Exit Internal 'BASAL': '<S11>:3907' *)
                                is_BASAL := 0;
                                is_THERAPY := 0;
                            2: 
                                (* Exit Internal 'PAUSED': '<S11>:3876' *)
                                (* Exit Internal 'Arbiter': '<S11>:3877' *)

                                CASE is_Arbiter_f OF
                                    1: 
                                        (* Exit 'Manual_Paused_KVO': '<S11>:3892' *)
                                        is_Arbiter_f := 0;
                                    2: 
                                        (* Exit 'Paused_KVO': '<S11>:3891' *)
                                        is_Arbiter_f := 0;
                                    3: 
                                        (* Exit 'Paused_NoKVO': '<S11>:3890' *)
                                        is_Arbiter_f := 0;
                                END_CASE;

                                (* Exit Internal 'Manual_Paused': '<S11>:3899' *)
                                is_Manual_Paused := 0;
                                (* Exit Internal 'Alarm_Paused': '<S11>:3893' *)
                                is_Alarm_Paused := 0;
                                is_THERAPY := 0;
                        END_CASE;

                        (* Exit 'THERAPY': '<S11>:3867' *)
                        (* Graphical Function 'TherapyExitOperations': '<S11>:3953' *)
                        (* Transition: '<S11>:3955' *)
                        IM_OUT_New_Infusion := FALSE;
                        is_Infusion_Manager := 0;
                END_CASE;

                c_is_c4_GPCA_SW_Logical_Arc := 2;
                (* Entry 'NOT_ON': '<S11>:3740' *)
                rtb_Config_Timer := 0;
                overInfusion := 0;
            ELSIF is_Infusion_Manager = 1 THEN 
                (* During 'IDLE': '<S11>:3866' *)

                IF OP_CMD_IN.Infusion_Cancel THEN 
                    (* Transition: '<S11>:3993' *)
                    (* Exit 'IDLE': '<S11>:3866' *)
                    (* Graphical Function 'resetAllInfusionDetails': '<S11>:3959' *)
                    (* Transition: '<S11>:3961' *)
                    (* Graphical Function 'resetForNewInfusion': '<S11>:3956' *)
                    (* Transition: '<S11>:3958' *)
                    is_Infusion_Manager := 1;
                    (* Entry 'IDLE': '<S11>:3866' *)
                    rtb_Config_Timer := 1;
                    (* Graphical Function 'resetAllInfusionDetails': '<S11>:3959' *)
                    (* Transition: '<S11>:3961' *)
                    (* Graphical Function 'resetForNewInfusion': '<S11>:3956' *)
                    (* Transition: '<S11>:3958' *)
                    sbolus_timer := 0;
                    pbolus_timer := 0;
                    sbolusInter_timer := 0;
                    overInfusion := 0;
                    c_IM_OUT_Actual_Infusion_Du := 0;
                    IM_OUT_Lock_Timer := 0;
                    inPatientBolus := FALSE;
                    number_pbolus := 0;
                ELSIF (OP_CMD_IN.Infusion_Initiate AND (CONFIG_OUT_Configured > 0)) AND ( NOT rtb_ifthen) THEN 
                    (* Transition: '<S11>:3864' *)
                    (* Graphical Function 'resetAllInfusionDetails': '<S11>:3959' *)
                    (* Transition: '<S11>:3961' *)
                    (* Graphical Function 'resetForNewInfusion': '<S11>:3956' *)
                    (* Transition: '<S11>:3958' *)
                    (* Transition: '<S11>:3863' *)
                    IM_OUT_New_Infusion := TRUE;
                    (* Exit 'IDLE': '<S11>:3866' *)
                    (* Graphical Function 'resetAllInfusionDetails': '<S11>:3959' *)
                    (* Transition: '<S11>:3961' *)
                    (* Graphical Function 'resetForNewInfusion': '<S11>:3956' *)
                    (* Transition: '<S11>:3958' *)
                    sbolus_timer := 0;
                    pbolus_timer := 0;
                    sbolusInter_timer := 0;
                    c_IM_OUT_Actual_Infusion_Du := 0;
                    IM_OUT_Lock_Timer := 0;
                    inPatientBolus := FALSE;
                    number_pbolus := 0;
                    is_Infusion_Manager := 2;
                    (* Entry Internal 'THERAPY': '<S11>:3867' *)

                    IF OP_CMD_IN.Infusion_Inhibit OR (rtb_Config_Timer >= 3) THEN 
                        (* Transition: '<S11>:3994' *)
                        is_THERAPY := 2;
                        (* Entry Internal 'PAUSED': '<S11>:3876' *)
                        (* Entry Internal 'Alarm_Paused': '<S11>:3893' *)

                        IF rtb_Config_Timer >= 3 THEN 
                            (* Transition: '<S11>:3964' *)
                            is_Alarm_Paused := 2;
                        ELSE 
                            (* Transition: '<S11>:3894' *)
                            is_Alarm_Paused := 1;
                        END_IF;

                        (* Entry Internal 'Manual_Paused': '<S11>:3899' *)

                        IF OP_CMD_IN.Infusion_Inhibit THEN 
                            (* Transition: '<S11>:3965' *)
                            is_Manual_Paused := 2;
                        ELSE 
                            (* Transition: '<S11>:3900' *)
                            is_Manual_Paused := 1;
                        END_IF;

                        (* Entry Internal 'Arbiter': '<S11>:3877' *)
                        (* Transition: '<S11>:3881' *)

                        IF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 4) THEN 
                            (* Transition: '<S11>:3882' *)
                            is_Arbiter_f := 3;
                            (* Entry 'Paused_NoKVO': '<S11>:3890' *)
                            overInfusion := 0;
                            rtb_Config_Timer := 6;
                        ELSIF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 3) THEN 
                            (* Transition: '<S11>:3884' *)
                            is_Arbiter_f := 2;
                            (* Entry 'Paused_KVO': '<S11>:3891' *)
                            overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                            rtb_Config_Timer := 7;
                        ELSE 
                            (* Transition: '<S11>:3883' *)
                            is_Arbiter_f := 1;
                            (* Entry 'Manual_Paused_KVO': '<S11>:3892' *)
                            overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                            rtb_Config_Timer := 8;
                        END_IF;

                    ELSE 
                        (* Transition: '<S11>:3875' *)
                        is_THERAPY := 1;
                        (* Entry Internal 'ACTIVE': '<S11>:3905' *)
                        (* Entry Internal 'BASAL': '<S11>:3907' *)
                        (* Transition: '<S11>:3908' *)
                        is_BASAL := 2;
                        (* Entry Internal 'PATIENT': '<S11>:3927' *)

                        IF inPatientBolus THEN 
                            (* Transition: '<S11>:3930' *)
                            is_PATIENT := 1;
                            (* Entry 'LOCKOUT': '<S11>:4030' *)
                            IM_OUT_Lock_Timer := DINT_TO_USINT(USINT_TO_DINT(IM_OUT_Lock_Timer) + 1);
                        ELSE 
                            (* Transition: '<S11>:3928' *)
                            is_PATIENT := 2;
                            (* Entry 'OFF': '<S11>:3933' *)
                            pbolus_timer := 0;
                            inPatientBolus := FALSE;
                        END_IF;

                        (* Entry 'INTERMITTENT': '<S11>:3936' *)
                        sbolusInter_timer := DINT_TO_USINT(USINT_TO_DINT(sbolusInter_timer) + 1);
                        (* Entry Internal 'INTERMITTENT': '<S11>:3936' *)
                        (* Transition: '<S11>:3937' *)
                        is_INTERMITTENT := 1;
                        (* Entry 'OFF': '<S11>:3940' *)
                        sbolus_timer := 0;
                        sbolus_req := FALSE;
                        (* Graphical Function 'sbolus_trigger': '<S11>:3943' *)
                        (* Transition: '<S11>:3947' *)
                        b_s := 0;
                        (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                        (* '<S11>:4038:3' returnVal=inputVal/step_size; *)
                        (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                        (* '<S11>:4038:3' returnVal=inputVal/step_size; *)

                        IF ( NOT ((sbolusInter_timer > c_CONFIG_OUT_Interval_Inter) OR (sbolusInter_timer < c_CONFIG_OUT_Interval_Inter))) AND (sbolusInter_timer = c_CONFIG_OUT_Interval_Inter) THEN 
                            (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                            (* '<S11>:4038:3' returnVal=inputVal/step_size; *)
                            (* Transition: '<S11>:3949' *)
                            b_s := 1;
                            sbolusInter_timer := 0;
                        END_IF;

                        sbolus_req := b_s <> 0;
                        (* Entry Internal 'Arbiter': '<S11>:3913' *)
                        (* Transition: '<S11>:3916' *)

                        IF is_PATIENT = 3 THEN 
                            (* Transition: '<S11>:3917' *)
                            is_Arbiter := 3;
                            (* Entry 'Patient_Bolus': '<S11>:3924' *)
                            overInfusion := c_CONFIG_OUT_Flow_Rate_Pati;
                            rtb_Config_Timer := 4;
                        ELSIF is_INTERMITTENT = 2 THEN 
                            (* Transition: '<S11>:3918' *)
                            is_Arbiter := 2;
                            (* Entry 'Intermittent_Bolus': '<S11>:3925' *)
                            overInfusion := c_CONFIG_OUT_Flow_Rate_Inte;
                            rtb_Config_Timer := 3;
                        ELSE 
                            (* Transition: '<S11>:3919' *)
                            is_Arbiter := 1;
                            (* Entry 'Basal': '<S11>:3926' *)
                            overInfusion := CONFIG_OUT_Flow_Rate_Basal;
                            rtb_Config_Timer := 2;
                        END_IF;

                    END_IF;

                ELSE 
                    rtb_Config_Timer := 1;
                    overInfusion := 0;
                END_IF;

            ELSE 
                (* During 'THERAPY': '<S11>:3867' *)

                IF (OP_CMD_IN.Infusion_Initiate AND (CONFIG_OUT_Configured = 1)) AND ( NOT rtb_ifthen) THEN 
                    (* Transition: '<S11>:3861' *)
                    (* Graphical Function 'resetForNewInfusion': '<S11>:3956' *)
                    (* Transition: '<S11>:3958' *)
                    sbolus_timer := 0;
                    pbolus_timer := 0;
                    number_pbolus := 0;
                    sbolusInter_timer := 0;
                    c_IM_OUT_Actual_Infusion_Du := 0;
                    (* Transition: '<S11>:3863' *)
                    IM_OUT_New_Infusion := TRUE;
                    (* Exit Internal 'THERAPY': '<S11>:3867' *)

                    CASE is_THERAPY OF
                        1: 
                            (* Exit Internal 'ACTIVE': '<S11>:3905' *)
                            (* Exit Internal 'Arbiter': '<S11>:3913' *)
                            is_Arbiter := 0;
                            (* Exit Internal 'INTERMITTENT': '<S11>:3936' *)

                            IF is_INTERMITTENT = 2 THEN 
                                (* Exit 'ON': '<S11>:3941' *)
                                sbolus_timer := DINT_TO_USINT(USINT_TO_DINT(sbolus_timer) + 1);
                                sbolus_req := FALSE;
                                is_INTERMITTENT := 0;
                            ELSE 
                                is_INTERMITTENT := 0;
                            END_IF;

                            (* Exit Internal 'PATIENT': '<S11>:3927' *)

                            IF is_PATIENT = 3 THEN 
                                (* Exit 'ON': '<S11>:3934' *)
                                pbolus_timer := DINT_TO_USINT(USINT_TO_DINT(pbolus_timer) + 1);
                                is_PATIENT := 0;
                            ELSE 
                                is_PATIENT := 0;
                            END_IF;

                            (* Exit Internal 'BASAL': '<S11>:3907' *)
                            is_BASAL := 0;
                            is_THERAPY := 0;
                        2: 
                            (* Exit Internal 'PAUSED': '<S11>:3876' *)
                            (* Exit Internal 'Arbiter': '<S11>:3877' *)

                            CASE is_Arbiter_f OF
                                1: 
                                    (* Exit 'Manual_Paused_KVO': '<S11>:3892' *)
                                    is_Arbiter_f := 0;
                                2: 
                                    (* Exit 'Paused_KVO': '<S11>:3891' *)
                                    is_Arbiter_f := 0;
                                3: 
                                    (* Exit 'Paused_NoKVO': '<S11>:3890' *)
                                    is_Arbiter_f := 0;
                            END_CASE;

                            (* Exit Internal 'Manual_Paused': '<S11>:3899' *)
                            is_Manual_Paused := 0;
                            (* Exit Internal 'Alarm_Paused': '<S11>:3893' *)
                            is_Alarm_Paused := 0;
                            is_THERAPY := 0;
                    END_CASE;

                    (* Exit 'THERAPY': '<S11>:3867' *)
                    (* Graphical Function 'TherapyExitOperations': '<S11>:3953' *)
                    (* Transition: '<S11>:3955' *)
                    IM_OUT_New_Infusion := FALSE;
                    is_Infusion_Manager := 2;
                    (* Entry Internal 'THERAPY': '<S11>:3867' *)

                    IF OP_CMD_IN.Infusion_Inhibit OR (rtb_Config_Timer >= 3) THEN 
                        (* Transition: '<S11>:3994' *)
                        is_THERAPY := 2;
                        (* Entry Internal 'PAUSED': '<S11>:3876' *)
                        (* Entry Internal 'Alarm_Paused': '<S11>:3893' *)

                        IF rtb_Config_Timer >= 3 THEN 
                            (* Transition: '<S11>:3964' *)
                            is_Alarm_Paused := 2;
                        ELSE 
                            (* Transition: '<S11>:3894' *)
                            is_Alarm_Paused := 1;
                        END_IF;

                        (* Entry Internal 'Manual_Paused': '<S11>:3899' *)

                        IF OP_CMD_IN.Infusion_Inhibit THEN 
                            (* Transition: '<S11>:3965' *)
                            is_Manual_Paused := 2;
                        ELSE 
                            (* Transition: '<S11>:3900' *)
                            is_Manual_Paused := 1;
                        END_IF;

                        (* Entry Internal 'Arbiter': '<S11>:3877' *)
                        (* Transition: '<S11>:3881' *)

                        IF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 4) THEN 
                            (* Transition: '<S11>:3882' *)
                            is_Arbiter_f := 3;
                            (* Entry 'Paused_NoKVO': '<S11>:3890' *)
                            overInfusion := 0;
                            rtb_Config_Timer := 6;
                        ELSIF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 3) THEN 
                            (* Transition: '<S11>:3884' *)
                            is_Arbiter_f := 2;
                            (* Entry 'Paused_KVO': '<S11>:3891' *)
                            overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                            rtb_Config_Timer := 7;
                        ELSE 
                            (* Transition: '<S11>:3883' *)
                            is_Arbiter_f := 1;
                            (* Entry 'Manual_Paused_KVO': '<S11>:3892' *)
                            overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                            rtb_Config_Timer := 8;
                        END_IF;

                    ELSE 
                        (* Transition: '<S11>:3875' *)
                        is_THERAPY := 1;
                        (* Entry Internal 'ACTIVE': '<S11>:3905' *)
                        (* Entry Internal 'BASAL': '<S11>:3907' *)
                        (* Transition: '<S11>:3908' *)
                        is_BASAL := 2;
                        (* Entry Internal 'PATIENT': '<S11>:3927' *)

                        IF inPatientBolus THEN 
                            (* Transition: '<S11>:3930' *)
                            is_PATIENT := 1;
                            (* Entry 'LOCKOUT': '<S11>:4030' *)
                            IM_OUT_Lock_Timer := DINT_TO_USINT(USINT_TO_DINT(IM_OUT_Lock_Timer) + 1);
                        ELSE 
                            (* Transition: '<S11>:3928' *)
                            is_PATIENT := 2;
                            (* Entry 'OFF': '<S11>:3933' *)
                            pbolus_timer := 0;
                            inPatientBolus := FALSE;
                        END_IF;

                        (* Entry 'INTERMITTENT': '<S11>:3936' *)
                        sbolusInter_timer := DINT_TO_USINT(USINT_TO_DINT(sbolusInter_timer) + 1);
                        (* Entry Internal 'INTERMITTENT': '<S11>:3936' *)
                        (* Transition: '<S11>:3937' *)
                        is_INTERMITTENT := 1;
                        (* Entry 'OFF': '<S11>:3940' *)
                        sbolus_timer := 0;
                        sbolus_req := FALSE;
                        (* Graphical Function 'sbolus_trigger': '<S11>:3943' *)
                        (* Transition: '<S11>:3947' *)
                        b_s := 0;
                        (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                        (* '<S11>:4038:3' returnVal=inputVal/step_size; *)
                        (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                        (* '<S11>:4038:3' returnVal=inputVal/step_size; *)

                        IF ( NOT ((sbolusInter_timer > c_CONFIG_OUT_Interval_Inter) OR (sbolusInter_timer < c_CONFIG_OUT_Interval_Inter))) AND (sbolusInter_timer = c_CONFIG_OUT_Interval_Inter) THEN 
                            (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                            (* '<S11>:4038:3' returnVal=inputVal/step_size; *)
                            (* Transition: '<S11>:3949' *)
                            b_s := 1;
                            sbolusInter_timer := 0;
                        END_IF;

                        sbolus_req := b_s <> 0;
                        (* Entry Internal 'Arbiter': '<S11>:3913' *)
                        (* Transition: '<S11>:3916' *)

                        IF is_PATIENT = 3 THEN 
                            (* Transition: '<S11>:3917' *)
                            is_Arbiter := 3;
                            (* Entry 'Patient_Bolus': '<S11>:3924' *)
                            overInfusion := c_CONFIG_OUT_Flow_Rate_Pati;
                            rtb_Config_Timer := 4;
                        ELSIF is_INTERMITTENT = 2 THEN 
                            (* Transition: '<S11>:3918' *)
                            is_Arbiter := 2;
                            (* Entry 'Intermittent_Bolus': '<S11>:3925' *)
                            overInfusion := c_CONFIG_OUT_Flow_Rate_Inte;
                            rtb_Config_Timer := 3;
                        ELSE 
                            (* Transition: '<S11>:3919' *)
                            is_Arbiter := 1;
                            (* Entry 'Basal': '<S11>:3926' *)
                            overInfusion := CONFIG_OUT_Flow_Rate_Basal;
                            rtb_Config_Timer := 2;
                        END_IF;

                    END_IF;

                ELSE 
                    (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                    (* '<S11>:4038:3' returnVal=inputVal/step_size; *)

                    IF (((USINT_TO_DINT(c_IM_OUT_Actual_Infusion_Du) >= (USINT_TO_DINT(CONFIG_OUT_Total_Duration) - 1)) OR (rtb_Total_Volume_Infused >= CONFIG_OUT_VTBI_Total)) OR (CONFIG_OUT_Configured < 1)) OR OP_CMD_IN.Infusion_Cancel THEN 
                        (* Transition: '<S11>:3865' *)
                        (* Exit Internal 'THERAPY': '<S11>:3867' *)

                        CASE is_THERAPY OF
                            1: 
                                (* Exit Internal 'ACTIVE': '<S11>:3905' *)
                                (* Exit Internal 'Arbiter': '<S11>:3913' *)
                                is_Arbiter := 0;
                                (* Exit Internal 'INTERMITTENT': '<S11>:3936' *)

                                IF is_INTERMITTENT = 2 THEN 
                                    (* Exit 'ON': '<S11>:3941' *)
                                    sbolus_timer := DINT_TO_USINT(USINT_TO_DINT(sbolus_timer) + 1);
                                    sbolus_req := FALSE;
                                    is_INTERMITTENT := 0;
                                ELSE 
                                    is_INTERMITTENT := 0;
                                END_IF;

                                (* Exit Internal 'PATIENT': '<S11>:3927' *)

                                IF is_PATIENT = 3 THEN 
                                    (* Exit 'ON': '<S11>:3934' *)
                                    pbolus_timer := DINT_TO_USINT(USINT_TO_DINT(pbolus_timer) + 1);
                                    is_PATIENT := 0;
                                ELSE 
                                    is_PATIENT := 0;
                                END_IF;

                                (* Exit Internal 'BASAL': '<S11>:3907' *)
                                is_BASAL := 0;
                                is_THERAPY := 0;
                            2: 
                                (* Exit Internal 'PAUSED': '<S11>:3876' *)
                                (* Exit Internal 'Arbiter': '<S11>:3877' *)

                                CASE is_Arbiter_f OF
                                    1: 
                                        (* Exit 'Manual_Paused_KVO': '<S11>:3892' *)
                                        is_Arbiter_f := 0;
                                    2: 
                                        (* Exit 'Paused_KVO': '<S11>:3891' *)
                                        is_Arbiter_f := 0;
                                    3: 
                                        (* Exit 'Paused_NoKVO': '<S11>:3890' *)
                                        is_Arbiter_f := 0;
                                END_CASE;

                                (* Exit Internal 'Manual_Paused': '<S11>:3899' *)
                                is_Manual_Paused := 0;
                                (* Exit Internal 'Alarm_Paused': '<S11>:3893' *)
                                is_Alarm_Paused := 0;
                                is_THERAPY := 0;
                        END_CASE;

                        (* Exit 'THERAPY': '<S11>:3867' *)
                        (* Graphical Function 'TherapyExitOperations': '<S11>:3953' *)
                        (* Transition: '<S11>:3955' *)
                        IM_OUT_New_Infusion := FALSE;
                        is_Infusion_Manager := 1;
                        (* Entry 'IDLE': '<S11>:3866' *)
                        rtb_Config_Timer := 1;
                        (* Graphical Function 'resetAllInfusionDetails': '<S11>:3959' *)
                        (* Transition: '<S11>:3961' *)
                        (* Graphical Function 'resetForNewInfusion': '<S11>:3956' *)
                        (* Transition: '<S11>:3958' *)
                        sbolus_timer := 0;
                        pbolus_timer := 0;
                        sbolusInter_timer := 0;
                        overInfusion := 0;
                        c_IM_OUT_Actual_Infusion_Du := 0;
                        IM_OUT_Lock_Timer := 0;
                        inPatientBolus := FALSE;
                        number_pbolus := 0;
                    ELSE 
                        IM_OUT_New_Infusion := FALSE;

                        IF is_THERAPY = 1 THEN 
                            (* During 'ACTIVE': '<S11>:3905' *)

                            IF OP_CMD_IN.Infusion_Inhibit OR (rtb_Config_Timer >= 3) THEN 
                                (* Transition: '<S11>:3871' *)
                                (* Exit Internal 'ACTIVE': '<S11>:3905' *)
                                (* Exit Internal 'Arbiter': '<S11>:3913' *)
                                is_Arbiter := 0;
                                (* Exit Internal 'INTERMITTENT': '<S11>:3936' *)

                                IF is_INTERMITTENT = 2 THEN 
                                    (* Exit 'ON': '<S11>:3941' *)
                                    sbolus_timer := DINT_TO_USINT(USINT_TO_DINT(sbolus_timer) + 1);
                                    sbolus_req := FALSE;
                                    is_INTERMITTENT := 0;
                                ELSE 
                                    is_INTERMITTENT := 0;
                                END_IF;

                                (* Exit Internal 'PATIENT': '<S11>:3927' *)

                                IF is_PATIENT = 3 THEN 
                                    (* Exit 'ON': '<S11>:3934' *)
                                    pbolus_timer := DINT_TO_USINT(USINT_TO_DINT(pbolus_timer) + 1);
                                    is_PATIENT := 0;
                                ELSE 
                                    is_PATIENT := 0;
                                END_IF;

                                (* Exit Internal 'BASAL': '<S11>:3907' *)
                                is_BASAL := 0;
                                is_THERAPY := 2;
                                (* Entry Internal 'PAUSED': '<S11>:3876' *)
                                (* Entry Internal 'Alarm_Paused': '<S11>:3893' *)

                                IF rtb_Config_Timer >= 3 THEN 
                                    (* Transition: '<S11>:3964' *)
                                    is_Alarm_Paused := 2;
                                ELSE 
                                    (* Transition: '<S11>:3894' *)
                                    is_Alarm_Paused := 1;
                                END_IF;

                                (* Entry Internal 'Manual_Paused': '<S11>:3899' *)

                                IF OP_CMD_IN.Infusion_Inhibit THEN 
                                    (* Transition: '<S11>:3965' *)
                                    is_Manual_Paused := 2;
                                ELSE 
                                    (* Transition: '<S11>:3900' *)
                                    is_Manual_Paused := 1;
                                END_IF;

                                (* Entry Internal 'Arbiter': '<S11>:3877' *)
                                (* Transition: '<S11>:3881' *)

                                IF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 4) THEN 
                                    (* Transition: '<S11>:3882' *)
                                    is_Arbiter_f := 3;
                                    (* Entry 'Paused_NoKVO': '<S11>:3890' *)
                                    overInfusion := 0;
                                    rtb_Config_Timer := 6;
                                ELSIF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 3) THEN 
                                    (* Transition: '<S11>:3884' *)
                                    is_Arbiter_f := 2;
                                    (* Entry 'Paused_KVO': '<S11>:3891' *)
                                    overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                                    rtb_Config_Timer := 7;
                                ELSE 
                                    (* Transition: '<S11>:3883' *)
                                    is_Arbiter_f := 1;
                                    (* Entry 'Manual_Paused_KVO': '<S11>:3892' *)
                                    overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                                    rtb_Config_Timer := 8;
                                END_IF;

                            ELSE 
                                (* During 'BASAL': '<S11>:3907' *)

                                IF is_BASAL = 1 THEN 
                                    (* During 'OFF': '<S11>:3912' *)

                                    IF OP_CMD_IN.Infusion_Initiate THEN 
                                        (* Transition: '<S11>:3909' *)
                                        is_BASAL := 2;
                                    END_IF;

                                ELSE 
                                    (* During 'ON': '<S11>:3911' *)
                                    (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                    (* '<S11>:4038:3' returnVal=inputVal/step_size; *)

                                    IF USINT_TO_DINT(c_IM_OUT_Actual_Infusion_Du) >= (USINT_TO_DINT(CONFIG_OUT_Total_Duration) - 1) THEN 
                                        (* Transition: '<S11>:3910' *)
                                        is_BASAL := 1;
                                    END_IF;

                                END_IF;

                                (* During 'PATIENT': '<S11>:3927' *)

                                CASE is_PATIENT OF
                                    1: 
                                        (* During 'LOCKOUT': '<S11>:4030' *)
                                        (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                        (* '<S11>:4038:3' returnVal=inputVal/step_size; *)

                                        IF USINT_TO_DINT(IM_OUT_Lock_Timer) >= (USINT_TO_DINT(c_CONFIG_OUT_Lockout_Period) - 1) THEN 
                                            (* Transition: '<S11>:3931' *)
                                            is_PATIENT := 2;
                                            (* Entry 'OFF': '<S11>:3933' *)
                                            pbolus_timer := 0;
                                            inPatientBolus := FALSE;
                                        ELSE 
                                            IM_OUT_Lock_Timer := DINT_TO_USINT(USINT_TO_DINT(IM_OUT_Lock_Timer) + 1);
                                        END_IF;

                                    2: 
                                        (* During 'OFF': '<S11>:3933' *)

                                        IF (PATIENT_IN.Patient_Bolus_Request AND (rtb_Config_Timer < 2)) AND (number_pbolus < c_CONFIG_OUT_Max_Number_ofv) THEN 
                                            (* Transition: '<S11>:3929' *)
                                            is_PATIENT := 3;
                                            (* Entry 'ON': '<S11>:3934' *)
                                            number_pbolus := DINT_TO_USINT(USINT_TO_DINT(number_pbolus) + 1);
                                            inPatientBolus := TRUE;
                                            pbolus_timer := DINT_TO_USINT(USINT_TO_DINT(pbolus_timer) + 1);
                                        END_IF;

                                    ELSE
                                        (* During 'ON': '<S11>:3934' *)
                                        (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                        (* '<S11>:4038:3' returnVal=inputVal/step_size; *)

                                        IF (USINT_TO_DINT(pbolus_timer) >= (USINT_TO_DINT(c_CONFIG_OUT_Duration_Patie) - 1)) OR (rtb_Config_Timer = 2) THEN 
                                            (* Transition: '<S11>:3932' *)
                                            IM_OUT_Lock_Timer := 0;
                                            (* Exit 'ON': '<S11>:3934' *)
                                            pbolus_timer := DINT_TO_USINT(USINT_TO_DINT(pbolus_timer) + 1);
                                            is_PATIENT := 1;
                                            (* Entry 'LOCKOUT': '<S11>:4030' *)
                                            IM_OUT_Lock_Timer := DINT_TO_USINT(USINT_TO_DINT(IM_OUT_Lock_Timer) + 1);
                                        ELSE 
                                            pbolus_timer := DINT_TO_USINT(USINT_TO_DINT(pbolus_timer) + 1);
                                        END_IF;

                                END_CASE;

                                (* During 'INTERMITTENT': '<S11>:3936' *)
                                sbolusInter_timer := DINT_TO_USINT(USINT_TO_DINT(sbolusInter_timer) + 1);

                                IF is_INTERMITTENT = 1 THEN 
                                    (* During 'OFF': '<S11>:3940' *)

                                    IF sbolus_req AND (rtb_Config_Timer < 2) THEN 
                                        (* Transition: '<S11>:3938' *)
                                        is_INTERMITTENT := 2;
                                    ELSE 
                                        (* Graphical Function 'sbolus_trigger': '<S11>:3943' *)
                                        (* Transition: '<S11>:3947' *)
                                        b_s := 0;
                                        (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                        (* '<S11>:4038:3' returnVal=inputVal/step_size; *)
                                        (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                        (* '<S11>:4038:3' returnVal=inputVal/step_size; *)

                                        IF ( NOT ((sbolusInter_timer > c_CONFIG_OUT_Interval_Inter) OR (sbolusInter_timer < c_CONFIG_OUT_Interval_Inter))) AND (sbolusInter_timer = c_CONFIG_OUT_Interval_Inter) THEN 
                                            (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                            (* '<S11>:4038:3' returnVal=inputVal/step_size; *)
                                            (* Transition: '<S11>:3949' *)
                                            b_s := 1;
                                            sbolusInter_timer := 0;
                                        END_IF;

                                        sbolus_req := b_s <> 0;
                                    END_IF;

                                ELSE 
                                    (* During 'ON': '<S11>:3941' *)
                                    (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                    (* '<S11>:4038:3' returnVal=inputVal/step_size; *)

                                    IF (USINT_TO_DINT(sbolus_timer) >= (USINT_TO_DINT(c_CONFIG_OUT_Duration_Inter) - 1)) OR (rtb_Config_Timer = 2) THEN 
                                        (* Transition: '<S11>:3939' *)
                                        (* Exit 'ON': '<S11>:3941' *)
                                        is_INTERMITTENT := 1;
                                        (* Entry 'OFF': '<S11>:3940' *)
                                        sbolus_timer := 0;
                                        sbolus_req := FALSE;
                                        (* Graphical Function 'sbolus_trigger': '<S11>:3943' *)
                                        (* Transition: '<S11>:3947' *)
                                        b_s := 0;
                                        (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                        (* '<S11>:4038:3' returnVal=inputVal/step_size; *)
                                        (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                        (* '<S11>:4038:3' returnVal=inputVal/step_size; *)

                                        IF ( NOT ((sbolusInter_timer > c_CONFIG_OUT_Interval_Inter) OR (sbolusInter_timer < c_CONFIG_OUT_Interval_Inter))) AND (sbolusInter_timer = c_CONFIG_OUT_Interval_Inter) THEN 
                                            (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                            (* '<S11>:4038:3' returnVal=inputVal/step_size; *)
                                            (* Transition: '<S11>:3949' *)
                                            b_s := 1;
                                            sbolusInter_timer := 0;
                                        END_IF;

                                        sbolus_req := b_s <> 0;
                                    ELSE 
                                        sbolus_timer := DINT_TO_USINT(USINT_TO_DINT(sbolus_timer) + 1);
                                        sbolus_req := FALSE;
                                    END_IF;

                                END_IF;

                                (* During 'Arbiter': '<S11>:3913' *)

                                CASE is_Arbiter OF
                                    1: 
                                        (* During 'Basal': '<S11>:3926' *)
                                        (* Transition: '<S11>:3923' *)
                                        (* Transition: '<S11>:3920' *)
                                        c_IM_OUT_Actual_Infusion_Du := DINT_TO_USINT(USINT_TO_DINT(c_IM_OUT_Actual_Infusion_Du) + 1);
                                        (* Transition: '<S11>:4002' *)

                                        IF is_PATIENT = 3 THEN 
                                            (* Transition: '<S11>:3917' *)
                                            is_Arbiter := 3;
                                            (* Entry 'Patient_Bolus': '<S11>:3924' *)
                                            overInfusion := c_CONFIG_OUT_Flow_Rate_Pati;
                                            rtb_Config_Timer := 4;
                                        ELSIF is_INTERMITTENT = 2 THEN 
                                            (* Transition: '<S11>:3918' *)
                                            is_Arbiter := 2;
                                            (* Entry 'Intermittent_Bolus': '<S11>:3925' *)
                                            overInfusion := c_CONFIG_OUT_Flow_Rate_Inte;
                                            rtb_Config_Timer := 3;
                                        ELSE 
                                            (* Transition: '<S11>:3919' *)
                                            is_Arbiter := 1;
                                            (* Entry 'Basal': '<S11>:3926' *)
                                            overInfusion := CONFIG_OUT_Flow_Rate_Basal;
                                            rtb_Config_Timer := 2;
                                        END_IF;

                                    2: 
                                        (* During 'Intermittent_Bolus': '<S11>:3925' *)
                                        (* Transition: '<S11>:3922' *)
                                        (* Transition: '<S11>:3920' *)
                                        c_IM_OUT_Actual_Infusion_Du := DINT_TO_USINT(USINT_TO_DINT(c_IM_OUT_Actual_Infusion_Du) + 1);
                                        (* Transition: '<S11>:4002' *)

                                        IF is_PATIENT = 3 THEN 
                                            (* Transition: '<S11>:3917' *)
                                            is_Arbiter := 3;
                                            (* Entry 'Patient_Bolus': '<S11>:3924' *)
                                            overInfusion := c_CONFIG_OUT_Flow_Rate_Pati;
                                            rtb_Config_Timer := 4;
                                        ELSIF is_INTERMITTENT = 2 THEN 
                                            (* Transition: '<S11>:3918' *)
                                            is_Arbiter := 2;
                                            (* Entry 'Intermittent_Bolus': '<S11>:3925' *)
                                            overInfusion := c_CONFIG_OUT_Flow_Rate_Inte;
                                            rtb_Config_Timer := 3;
                                        ELSE 
                                            (* Transition: '<S11>:3919' *)
                                            is_Arbiter := 1;
                                            (* Entry 'Basal': '<S11>:3926' *)
                                            overInfusion := CONFIG_OUT_Flow_Rate_Basal;
                                            rtb_Config_Timer := 2;
                                        END_IF;

                                    ELSE
                                        (* During 'Patient_Bolus': '<S11>:3924' *)
                                        (* Transition: '<S11>:3921' *)
                                        (* Transition: '<S11>:3920' *)
                                        c_IM_OUT_Actual_Infusion_Du := DINT_TO_USINT(USINT_TO_DINT(c_IM_OUT_Actual_Infusion_Du) + 1);
                                        (* Transition: '<S11>:4002' *)

                                        IF is_PATIENT = 3 THEN 
                                            (* Transition: '<S11>:3917' *)
                                            is_Arbiter := 3;
                                            (* Entry 'Patient_Bolus': '<S11>:3924' *)
                                            overInfusion := c_CONFIG_OUT_Flow_Rate_Pati;
                                            rtb_Config_Timer := 4;
                                        ELSIF is_INTERMITTENT = 2 THEN 
                                            (* Transition: '<S11>:3918' *)
                                            is_Arbiter := 2;
                                            (* Entry 'Intermittent_Bolus': '<S11>:3925' *)
                                            overInfusion := c_CONFIG_OUT_Flow_Rate_Inte;
                                            rtb_Config_Timer := 3;
                                        ELSE 
                                            (* Transition: '<S11>:3919' *)
                                            is_Arbiter := 1;
                                            (* Entry 'Basal': '<S11>:3926' *)
                                            overInfusion := CONFIG_OUT_Flow_Rate_Basal;
                                            rtb_Config_Timer := 2;
                                        END_IF;

                                END_CASE;

                            END_IF;

                        ELSE 
                            (* During 'PAUSED': '<S11>:3876' *)

                            IF (OP_CMD_IN.Infusion_Initiate AND (rtb_Config_Timer < 3)) AND ( NOT OP_CMD_IN.Infusion_Inhibit) THEN 
                                (* Transition: '<S11>:3870' *)
                                (* Exit Internal 'PAUSED': '<S11>:3876' *)
                                (* Exit Internal 'Arbiter': '<S11>:3877' *)

                                CASE is_Arbiter_f OF
                                    1: 
                                        (* Exit 'Manual_Paused_KVO': '<S11>:3892' *)
                                        is_Arbiter_f := 0;
                                    2: 
                                        (* Exit 'Paused_KVO': '<S11>:3891' *)
                                        is_Arbiter_f := 0;
                                    3: 
                                        (* Exit 'Paused_NoKVO': '<S11>:3890' *)
                                        is_Arbiter_f := 0;
                                END_CASE;

                                (* Exit Internal 'Manual_Paused': '<S11>:3899' *)
                                is_Manual_Paused := 0;
                                (* Exit Internal 'Alarm_Paused': '<S11>:3893' *)
                                is_Alarm_Paused := 0;
                                is_THERAPY := 1;
                                (* Entry Internal 'ACTIVE': '<S11>:3905' *)
                                (* Entry Internal 'BASAL': '<S11>:3907' *)
                                (* Transition: '<S11>:3908' *)
                                is_BASAL := 2;
                                (* Entry Internal 'PATIENT': '<S11>:3927' *)

                                IF inPatientBolus THEN 
                                    (* Transition: '<S11>:3930' *)
                                    is_PATIENT := 1;
                                    (* Entry 'LOCKOUT': '<S11>:4030' *)
                                    IM_OUT_Lock_Timer := DINT_TO_USINT(USINT_TO_DINT(IM_OUT_Lock_Timer) + 1);
                                ELSE 
                                    (* Transition: '<S11>:3928' *)
                                    is_PATIENT := 2;
                                    (* Entry 'OFF': '<S11>:3933' *)
                                    pbolus_timer := 0;
                                    inPatientBolus := FALSE;
                                END_IF;

                                (* Entry 'INTERMITTENT': '<S11>:3936' *)
                                sbolusInter_timer := DINT_TO_USINT(USINT_TO_DINT(sbolusInter_timer) + 1);
                                (* Entry Internal 'INTERMITTENT': '<S11>:3936' *)
                                (* Transition: '<S11>:3937' *)
                                is_INTERMITTENT := 1;
                                (* Entry 'OFF': '<S11>:3940' *)
                                sbolus_timer := 0;
                                sbolus_req := FALSE;
                                (* Graphical Function 'sbolus_trigger': '<S11>:3943' *)
                                (* Transition: '<S11>:3947' *)
                                b_s := 0;
                                (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                (* '<S11>:4038:3' returnVal=inputVal/step_size; *)
                                (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                (* '<S11>:4038:3' returnVal=inputVal/step_size; *)

                                IF ( NOT ((sbolusInter_timer > c_CONFIG_OUT_Interval_Inter) OR (sbolusInter_timer < c_CONFIG_OUT_Interval_Inter))) AND (sbolusInter_timer = c_CONFIG_OUT_Interval_Inter) THEN 
                                    (* MATLAB Function 'Step_Scaling_Factor': '<S11>:4038' *)
                                    (* '<S11>:4038:3' returnVal=inputVal/step_size; *)
                                    (* Transition: '<S11>:3949' *)
                                    b_s := 1;
                                    sbolusInter_timer := 0;
                                END_IF;

                                sbolus_req := b_s <> 0;
                                (* Entry Internal 'Arbiter': '<S11>:3913' *)
                                (* Transition: '<S11>:3916' *)

                                IF is_PATIENT = 3 THEN 
                                    (* Transition: '<S11>:3917' *)
                                    is_Arbiter := 3;
                                    (* Entry 'Patient_Bolus': '<S11>:3924' *)
                                    overInfusion := c_CONFIG_OUT_Flow_Rate_Pati;
                                    rtb_Config_Timer := 4;
                                ELSIF is_INTERMITTENT = 2 THEN 
                                    (* Transition: '<S11>:3918' *)
                                    is_Arbiter := 2;
                                    (* Entry 'Intermittent_Bolus': '<S11>:3925' *)
                                    overInfusion := c_CONFIG_OUT_Flow_Rate_Inte;
                                    rtb_Config_Timer := 3;
                                ELSE 
                                    (* Transition: '<S11>:3919' *)
                                    is_Arbiter := 1;
                                    (* Entry 'Basal': '<S11>:3926' *)
                                    overInfusion := CONFIG_OUT_Flow_Rate_Basal;
                                    rtb_Config_Timer := 2;
                                END_IF;

                            ELSE 
                                (* During 'Alarm_Paused': '<S11>:3893' *)

                                IF is_Alarm_Paused = 1 THEN 
                                    (* During 'OFF': '<S11>:3897' *)

                                    IF rtb_Config_Timer >= 3 THEN 
                                        (* Transition: '<S11>:3895' *)
                                        is_Alarm_Paused := 2;
                                    END_IF;

                                ELSE 
                                    (* During 'ON': '<S11>:3898' *)

                                    IF OP_CMD_IN.Infusion_Initiate AND (rtb_Config_Timer < 3) THEN 
                                        (* Transition: '<S11>:3896' *)
                                        is_Alarm_Paused := 1;
                                    END_IF;

                                END_IF;

                                (* During 'Manual_Paused': '<S11>:3899' *)

                                IF is_Manual_Paused = 1 THEN 
                                    (* During 'OFF': '<S11>:3903' *)

                                    IF OP_CMD_IN.Infusion_Inhibit THEN 
                                        (* Transition: '<S11>:3901' *)
                                        is_Manual_Paused := 2;
                                    END_IF;

                                ELSE 
                                    (* During 'ON': '<S11>:3904' *)

                                    IF OP_CMD_IN.Infusion_Initiate AND ( NOT OP_CMD_IN.Infusion_Inhibit) THEN 
                                        (* Transition: '<S11>:3902' *)
                                        is_Manual_Paused := 1;
                                    END_IF;

                                END_IF;

                                (* During 'Arbiter': '<S11>:3877' *)

                                CASE is_Arbiter_f OF
                                    1: 
                                        (* During 'Manual_Paused_KVO': '<S11>:3892' *)
                                        (* Transition: '<S11>:3888' *)
                                        (* Transition: '<S11>:3889' *)
                                        (* Transition: '<S11>:3885' *)

                                        IF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 4) THEN 
                                            (* Transition: '<S11>:3882' *)
                                            (* Exit 'Manual_Paused_KVO': '<S11>:3892' *)
                                            is_Arbiter_f := 3;
                                            (* Entry 'Paused_NoKVO': '<S11>:3890' *)
                                            overInfusion := 0;
                                            rtb_Config_Timer := 6;
                                        ELSIF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 3) THEN 
                                            (* Transition: '<S11>:3884' *)
                                            (* Exit 'Manual_Paused_KVO': '<S11>:3892' *)
                                            is_Arbiter_f := 2;
                                            (* Entry 'Paused_KVO': '<S11>:3891' *)
                                            overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                                            rtb_Config_Timer := 7;
                                        ELSE 
                                            (* Transition: '<S11>:3883' *)
                                            (* Exit 'Manual_Paused_KVO': '<S11>:3892' *)
                                            is_Arbiter_f := 1;
                                            (* Entry 'Manual_Paused_KVO': '<S11>:3892' *)
                                            overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                                            rtb_Config_Timer := 8;
                                        END_IF;

                                    2: 
                                        (* During 'Paused_KVO': '<S11>:3891' *)
                                        (* Transition: '<S11>:3887' *)
                                        (* Transition: '<S11>:3889' *)
                                        (* Transition: '<S11>:3885' *)

                                        IF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 4) THEN 
                                            (* Transition: '<S11>:3882' *)
                                            (* Exit 'Paused_KVO': '<S11>:3891' *)
                                            is_Arbiter_f := 3;
                                            (* Entry 'Paused_NoKVO': '<S11>:3890' *)
                                            overInfusion := 0;
                                            rtb_Config_Timer := 6;
                                        ELSIF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 3) THEN 
                                            (* Transition: '<S11>:3884' *)
                                            (* Exit 'Paused_KVO': '<S11>:3891' *)
                                            is_Arbiter_f := 2;
                                            (* Entry 'Paused_KVO': '<S11>:3891' *)
                                            overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                                            rtb_Config_Timer := 7;
                                        ELSE 
                                            (* Transition: '<S11>:3883' *)
                                            (* Exit 'Paused_KVO': '<S11>:3891' *)
                                            is_Arbiter_f := 1;
                                            (* Entry 'Manual_Paused_KVO': '<S11>:3892' *)
                                            overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                                            rtb_Config_Timer := 8;
                                        END_IF;

                                    ELSE
                                        (* During 'Paused_NoKVO': '<S11>:3890' *)
                                        (* Transition: '<S11>:3886' *)
                                        (* Transition: '<S11>:3889' *)
                                        (* Transition: '<S11>:3885' *)

                                        IF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 4) THEN 
                                            (* Transition: '<S11>:3882' *)
                                            (* Exit 'Paused_NoKVO': '<S11>:3890' *)
                                            is_Arbiter_f := 3;
                                            (* Entry 'Paused_NoKVO': '<S11>:3890' *)
                                            overInfusion := 0;
                                            rtb_Config_Timer := 6;
                                        ELSIF (is_Alarm_Paused = 2) AND (rtb_Config_Timer = 3) THEN 
                                            (* Transition: '<S11>:3884' *)
                                            (* Exit 'Paused_NoKVO': '<S11>:3890' *)
                                            is_Arbiter_f := 2;
                                            (* Entry 'Paused_KVO': '<S11>:3891' *)
                                            overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                                            rtb_Config_Timer := 7;
                                        ELSE 
                                            (* Transition: '<S11>:3883' *)
                                            (* Exit 'Paused_NoKVO': '<S11>:3890' *)
                                            is_Arbiter_f := 1;
                                            (* Entry 'Manual_Paused_KVO': '<S11>:3892' *)
                                            overInfusion := CONFIG_OUT_Flow_Rate_KVO;
                                            rtb_Config_Timer := 8;
                                        END_IF;

                                END_CASE;

                            END_IF;

                        END_IF;

                    END_IF;

                END_IF;

            END_IF;

        ELSE 
            (* During 'NOT_ON': '<S11>:3740' *)

            IF rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S11>:3741' *)
                (* Exit 'NOT_ON': '<S11>:3740' *)
                c_is_c4_GPCA_SW_Logical_Arc := 1;
                (* Entry Internal 'Infusion_Manager': '<S11>:3858' *)
                (* Transition: '<S11>:3860' *)
                is_Infusion_Manager := 1;
                (* Entry 'IDLE': '<S11>:3866' *)
                rtb_Config_Timer := 1;
                (* Graphical Function 'resetAllInfusionDetails': '<S11>:3959' *)
                (* Transition: '<S11>:3961' *)
                (* Graphical Function 'resetForNewInfusion': '<S11>:3956' *)
                (* Transition: '<S11>:3958' *)
                sbolus_timer := 0;
                pbolus_timer := 0;
                sbolusInter_timer := 0;
                overInfusion := 0;
                c_IM_OUT_Actual_Infusion_Du := 0;
                IM_OUT_Lock_Timer := 0;
                inPatientBolus := FALSE;
                number_pbolus := 0;
            ELSE 
                rtb_Config_Timer := 0;
                overInfusion := 0;
            END_IF;

        END_IF;

        (* End of Chart: '<S4>/Infusion Manager Sub-System' *)
        

        (* Chart: '<S5>/Log Sub-System' *)
        (* Gateway: GPCA_SW_Logical_Architecture_Subsystem/Logging_Functional_Subsystem/Log Sub-System *)
        (* During: GPCA_SW_Logical_Architecture_Subsystem/Logging_Functional_Subsystem/Log Sub-System *)

        IF c_is_active_c6_GPCA_SW_Logi = 0 THEN 
            (* Entry: GPCA_SW_Logical_Architecture_Subsystem/Logging_Functional_Subsystem/Log Sub-System *)
            c_is_active_c6_GPCA_SW_Logi := 1;
            (* Entry Internal: GPCA_SW_Logical_Architecture_Subsystem/Logging_Functional_Subsystem/Log Sub-System *)

            IF rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S12>:4040' *)
                c_is_c6_GPCA_SW_Logical_Arc := 1;
                (* Entry 'LOG': '<S12>:4024' *)
                LOGGING_OUT_Logging_Failed := FALSE;
                (* Graphical Function 'writeLog': '<S12>:4055' *)
                (* Transition: '<S12>:4059' *)
                rtb_LOGGING_OUT_Log := 0;

                IF ((((TLM_MODE_OUT_Log_Message_ID > 0) OR (rtb_Total_Volume_Infused2 > 0)) OR (ALARM_OUT_Log_Message_ID > 0)) OR (CONFIG_OUT_Log_Message_ID > 0)) OR (IM_OUT_Log_Message_ID > 0) THEN 
                    (* Transition: '<S12>:4057' *)
                    rtb_LOGGING_OUT_Log := 1;
                END_IF;

            ELSE 
                (* Transition: '<S12>:4038' *)
                c_is_c6_GPCA_SW_Logical_Arc := 2;
                (* Entry 'NOT_ON': '<S12>:4034' *)
                rtb_LOGGING_OUT_Log := 0;
            END_IF;

        ELSIF c_is_c6_GPCA_SW_Logical_Arc = 1 THEN 
            (* During 'LOG': '<S12>:4024' *)

            IF  NOT rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S12>:4039' *)
                (* Exit 'LOG': '<S12>:4024' *)
                LOGGING_OUT_Logging_Failed := FALSE;
                (* Graphical Function 'writeLog': '<S12>:4055' *)
                (* Transition: '<S12>:4059' *)
                c_is_c6_GPCA_SW_Logical_Arc := 2;
                (* Entry 'NOT_ON': '<S12>:4034' *)
                rtb_LOGGING_OUT_Log := 0;
            ELSE 
                LOGGING_OUT_Logging_Failed := FALSE;
                (* Graphical Function 'writeLog': '<S12>:4055' *)
                (* Transition: '<S12>:4059' *)
                rtb_LOGGING_OUT_Log := 0;

                IF ((((TLM_MODE_OUT_Log_Message_ID > 0) OR (rtb_Total_Volume_Infused2 > 0)) OR (ALARM_OUT_Log_Message_ID > 0)) OR (CONFIG_OUT_Log_Message_ID > 0)) OR (IM_OUT_Log_Message_ID > 0) THEN 
                    (* Transition: '<S12>:4057' *)
                    rtb_LOGGING_OUT_Log := 1;
                END_IF;

            END_IF;

        ELSE 
            (* During 'NOT_ON': '<S12>:4034' *)

            IF rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S12>:4042' *)
                (* Exit 'NOT_ON': '<S12>:4034' *)
                c_is_c6_GPCA_SW_Logical_Arc := 1;
                (* Entry 'LOG': '<S12>:4024' *)
                LOGGING_OUT_Logging_Failed := FALSE;
                (* Graphical Function 'writeLog': '<S12>:4055' *)
                (* Transition: '<S12>:4059' *)
                rtb_LOGGING_OUT_Log := 0;

                IF ((((TLM_MODE_OUT_Log_Message_ID > 0) OR (rtb_Total_Volume_Infused2 > 0)) OR (ALARM_OUT_Log_Message_ID > 0)) OR (CONFIG_OUT_Log_Message_ID > 0)) OR (IM_OUT_Log_Message_ID > 0) THEN 
                    (* Transition: '<S12>:4057' *)
                    rtb_LOGGING_OUT_Log := 1;
                END_IF;

            ELSE 
                rtb_LOGGING_OUT_Log := 0;
            END_IF;

        END_IF;

        (* End of Chart: '<S5>/Log Sub-System' *)
        

        (* BusCreator: '<Root>/BusConversion_InsertedFor_GPCA_SW_OUT_at_inport_0' incorporates:
         *  Outport: '<Root>/GPCA_SW_OUT' *)
        GPCA_SW_OUT.Request_Confirm_Stop := c_TLM_MODE_OUT_Request_Conf;
        GPCA_SW_OUT.b_Log := rtb_LOGGING_OUT_Log;
        GPCA_SW_OUT.Current_System_Mode := rtb_Config_Timer;
        GPCA_SW_OUT.Actual_Infusion_Duration := c_IM_OUT_Actual_Infusion_Du;
        GPCA_SW_OUT.Flow_Rate_Commanded := overInfusion;
        GPCA_SW_OUT.New_Infusion := IM_OUT_New_Infusion;
        GPCA_SW_OUT.Lock_Timer := IM_OUT_Lock_Timer;
        GPCA_SW_OUT.Volume_Infused := rtb_Total_Volume_Infused;
        GPCA_SW_OUT.Reservoir_Volume := rtb_Reservoir_Volume_l;
        GPCA_SW_OUT.Is_Audio_Disabled := ALARM_OUT_Is_Audio_Disabled;
        GPCA_SW_OUT.Visual_Notification_Message := c_ALARM_OUT_Visual_Notifica;
        GPCA_SW_OUT.Audio_Notification_Command := c_ALARM_OUT_Audio_Notificat;
        GPCA_SW_OUT.Patient_ID := CONFIG_OUT_Patient_ID;
        GPCA_SW_OUT.Drug_Name := CONFIG_OUT_Drug_Name;
        GPCA_SW_OUT.Drug_Concentration := c_CONFIG_OUT_Drug_Concentra;
        GPCA_SW_OUT.Infusion_Total_Duration := CONFIG_OUT_Total_Duration;
        GPCA_SW_OUT.VTBI_Total := CONFIG_OUT_VTBI_Total;
        GPCA_SW_OUT.Flow_Rate_Basal := CONFIG_OUT_Flow_Rate_Basal;
        GPCA_SW_OUT.c_Flow_Rate_Intermittent_Bo := c_CONFIG_OUT_Flow_Rate_Inte;
        GPCA_SW_OUT.Duration_Intermittent_Bolus := c_CONFIG_OUT_Duration_Inter;
        GPCA_SW_OUT.Interval_Intermittent_Bolus := c_CONFIG_OUT_Interval_Inter;
        GPCA_SW_OUT.Flow_Rate_Patient_Bolus := c_CONFIG_OUT_Flow_Rate_Pati;
        GPCA_SW_OUT.Duration_Patient_Bolus := c_CONFIG_OUT_Duration_Patie;
        GPCA_SW_OUT.c_Lockout_Period_Patient_Bo := c_CONFIG_OUT_Lockout_Period;
        GPCA_SW_OUT.Max_Number_of_Patient_Bolus := c_CONFIG_OUT_Max_Number_ofv;
        GPCA_SW_OUT.Flow_Rate_KVO := CONFIG_OUT_Flow_Rate_KVO;
        GPCA_SW_OUT.Entered_Reservoir_Volume := c_CONFIG_OUT_Entered_Reserv;
        GPCA_SW_OUT.Configured := CONFIG_OUT_Configured;
        GPCA_SW_OUT.Error_Message_ID := CONFIG_OUT_Error_Message_ID;
        GPCA_SW_OUT.Request_Config_Type := c_CONFIG_OUT_Request_Config;
        GPCA_SW_OUT.c_Request_Confirm_Infusionv := CONFIG_OUT_Request_Confirmv;
        GPCA_SW_OUT.Request_Patient_Drug_Info := CONFIG_OUT_Request_Patientv;
        GPCA_SW_OUT.Request_Infusion_Info := c_CONFIG_OUT_Request_Infusi;
        (* Chart: '<S7>/System Monitor Sub-System' *)
        (* Gateway: GPCA_SW_Logical_Architecture_Subsystem/System_Monitor_Functional_Subsystem/System Monitor Sub-System *)
        (* During: GPCA_SW_Logical_Architecture_Subsystem/System_Monitor_Functional_Subsystem/System Monitor Sub-System *)

        IF c_is_active_c5_GPCA_SW_Logi = 0 THEN 
            (* Entry: GPCA_SW_Logical_Architecture_Subsystem/System_Monitor_Functional_Subsystem/System Monitor Sub-System *)
            c_is_active_c5_GPCA_SW_Logi := 1;
            (* Entry Internal: GPCA_SW_Logical_Architecture_Subsystem/System_Monitor_Functional_Subsystem/System Monitor Sub-System *)

            IF rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S18>:1' *)
                c_is_c5_GPCA_SW_Logical_Arc := 2;
                (* Entry 'System_Monitor': '<S18>:6' *)
                SYS_MON_OUT_System_Monitorv := FALSE;
            ELSE 
                (* Transition: '<S18>:5' *)
                c_is_c5_GPCA_SW_Logical_Arc := 1;
            END_IF;

        ELSIF c_is_c5_GPCA_SW_Logical_Arc = 1 THEN 
            (* During 'NOT_ON': '<S18>:3' *)

            IF rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S18>:2' *)
                c_is_c5_GPCA_SW_Logical_Arc := 2;
                (* Entry 'System_Monitor': '<S18>:6' *)
                SYS_MON_OUT_System_Monitorv := FALSE;
            END_IF;

        ELSE 
            (* During 'System_Monitor': '<S18>:6' *)

            IF  NOT rtb_TLM_MODE_OUT_System_On THEN 
                (* Transition: '<S18>:4' *)
                (* Exit 'System_Monitor': '<S18>:6' *)
                SYS_MON_OUT_System_Monitorv := FALSE;
                c_is_c5_GPCA_SW_Logical_Arc := 1;
            ELSE 
                SYS_MON_OUT_System_Monitorv := FALSE;
            END_IF;

        END_IF;

        (* End of Chart: '<S7>/System Monitor Sub-System' *)
        

        (* Update for UnitDelay: '<S1>/Unit Delay' *)
        UnitDelay_2_DSTATE := overInfusion;
        UnitDelay_3_DSTATE := rtb_Config_Timer;
        (* Update for UnitDelay: '<S1>/Unit Delay2' *)
        UnitDelay2_1_DSTATE := SYS_MON_OUT_System_Monitorv;
        (* Update for UnitDelay: '<S1>/Unit Delay3' *)
        UnitDelay3_2_DSTATE := LOGGING_OUT_Logging_Failed;
        (* Update for UnitDelay: '<S1>/Unit Delay1' *)
        UnitDelay1_16_DSTATE := CONFIG_OUT_Reservoir_Volume;
        (* Update for UnitDelay: '<S17>/Unit Delay' *)
        UnitDelay_DSTATE := rtb_ifthen4;
        (* Update for UnitDelay: '<S1>/Unit Delay' *)
        UnitDelay_4_DSTATE := IM_OUT_New_Infusion;
        (* Update for UnitDelay: '<S1>/Unit Delay1' *)
        UnitDelay1_24_DSTATE := CONFIG_OUT_Config_Timer;
END_CASE;

]]>
</xhtml>
               </ST>
            </body>
         </pou>
      </pous>
   </types>
   <instances>
      <configurations/>
   </instances>
</project>