Int_ctx ctx0 = mk_ctx();
Int_type type0 = mk_boolean_type(ctx0);
Int_type type1 = mk_int8_type(ctx0);
Int_type type2 = mk_int16_type(ctx0);
Int_type type3 = mk_int32_type(ctx0);
Int_type type4 = mk_uint8_type(ctx0);
Int_type type5 = mk_uint16_type(ctx0);
Int_type type6 = mk_uint32_type(ctx0);
Int_type type7 = mk_real_type(ctx0);
Int_type type8 = mk_float16_type(ctx0);
Int_type type9 = mk_float32_type(ctx0);
Int_type type10 = mk_double_type(ctx0);
Int_net net4294967295 = mk_undef(ctx0);
Int_net net1 = mk_true(ctx0);
Int_net net2 = mk_false(ctx0);
Int_net net8 = mk_latch(ctx0, "__first_tick", type0);
set_latch_init_next(ctx0, net8, net1, net2);
Int_net net9 = mk_input(ctx0, "i0", type3);
push_namespace(ctx0, "firefly.1");
Int_net net10 = mk_latch(ctx0, "pre_invalid", type3);
Int_net net11 = mk_ite(ctx0, net8, net9, net10);
Int_net net12 = mk_number(ctx0, "0", type3);
set_latch_init_next(ctx0, net10, net12, net11);
pop_namespace(ctx0);
Int_net net13 = mk_number(ctx0, "1", type3);
Int_net net14 = mk_eq(ctx0, net9, net13);
push_namespace(ctx0, "Sofar.2");
Int_net net15 = mk_latch(ctx0, "pre_Sofar", type0);
Int_net net16 = mk_or(ctx0, net14, net15);
Int_net net17 = mk_ite(ctx0, net8, net14, net16);
set_latch_init_next(ctx0, net15, net2, net17);
pop_namespace(ctx0);
Int_net net18 = mk_geq(ctx0, net11, net12);
Int_net net19 = mk_not(ctx0, net17);
Int_net net20 = mk_or(ctx0, net19, net18);
Int_net net21 = mk_not(ctx0, net20);
Int_engine_br br0 = mk_engine_br(ctx0);
br_add_target(ctx0, br0, net21);
br_reach_targets(br0);
