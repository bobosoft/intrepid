<?xml version="1.0" encoding="ISO-8859-1"?>
<project><!--(*
 *
 * File: GPCA_Alarm.xml
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "GPCA_Alarm/Subsystem"
 *
 * Model name                      : GPCA_Alarm
 * Model version                   : 1.63
 * Model creator                   : bourbouh
 * Model last modified by          : bourbouh
 * Model last modified on          : Thu Oct 20 01:16:00 2016
 * Model sample time               : 0s
 * Subsystem name                  : GPCA_Alarm/Subsystem
 * Subsystem sample time           : 0.2s
 * Simulink PLC Coder version      : 2.6 (R2018b) 24-May-2018
 * ST code generated on            : Fri Mar 15 21:48:14 2019
 *
 * Target IDE selection            : PLCopen XML
 * Test Bench included             : No
 *
 *)
-->
   <fileHeader companyName="The Mathworks, Inc." companyURL="www.mathworks.com" contentDescription="" creationDateTime="2019-03-15T21:48:14" productName="Simulink PLC Coder" productRelease="(R2018b)" productVersion="2.6"/>
   <contentHeader name="GPCA_Alarm">
      <coordinateInfo>
         <fbd>
            <scaling x="0" y="0"/>
         </fbd>
         <ld>
            <scaling x="0" y="0"/>
         </ld>
         <sfc>
            <scaling x="0" y="0"/>
         </sfc>
      </coordinateInfo>
   </contentHeader>
   <types>
      <dataTypes/>
      <pous>
         <pou name="Subsystem" pouType="functionBlock">
            <interface>
               <inputVars>
                  <variable name="ssMethodType">
                     <type>
                        <SINT/>
                     </type>
                  </variable>
                  <variable name="In1">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="In2">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="System_On">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In4">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In5">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Disable_Audio">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="In7">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In8">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="In9">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="VTBI_High">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="In11">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="In12">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Air_In_Line">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Occlusion">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="Door_Open">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In16">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In17">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In18">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In19">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In20">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In21">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In22">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In23">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In24">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In25">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In26">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In27">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In28">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In29">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
                  <variable name="Audio_Level">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="In31">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="In32">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
                  <variable name="In33">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
                  <variable name="In34">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="In35">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="In36">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
                  <variable name="In37">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
                  <variable name="In38">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
                  <variable name="Reservoir_Empty">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In40">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Volume_Infused">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="In_Therapy">
                     <type>
                        <BOOL/>
                     </type>
                  </variable>
                  <variable name="In43">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
               </inputVars>
               <outputVars>
                  <variable name="Is_Audio_Disabled">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Visual_Notification_Message">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Audio_Notification_Command">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Highest_Level_Alarm">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Log_Message_ID">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
               </outputVars>
               <localVars>
                  <variable name="overInfusion">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_active_c2_Subsystem">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_c2_Subsystem">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_CancelAlarm">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsEmptyReservoir">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsHardwareError">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsEnviromentalError">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsOverInfusionFlowRate">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsOverInfusionVTBI">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsAirInLine">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsOcclusion">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsDoor_Open">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsLowReservoir">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsUnderInfusion">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsFlowRateNotStable">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsIdleTimeExceeded">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="idletimer">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
                  <variable name="is_IsPausedTimeExceeded">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="pausedtimer">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
                  <variable name="is_IsConfigTimeWarning">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsBatteryError">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsPumpHot">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsLoggingFailed">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_IsSystemMonitorFailed">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="Max_Alarm_Level">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="currentAlarm">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Visual">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="is_Audio">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="audioTimer">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
                  <variable name="cancelAlarm">
                     <type>
                        <USINT/>
                     </type>
                  </variable>
                  <variable name="overInfusionTimer">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
                  <variable name="underInfusionTimer">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
               </localVars>
            </interface>
            <body>
               <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
<![CDATA[

CASE ssMethodType OF
    0: 
        (* SystemInitialize for Chart: '<S1>/Alarm  Sub-System' incorporates:
         *  Outport: '<Root>/Audio_Notification_Command'
         *  Outport: '<Root>/Highest_Level_Alarm'
         *  Outport: '<Root>/Is_Audio_Disabled'
         *  Outport: '<Root>/Log_Message_ID'
         *  Outport: '<Root>/Visual_Notification_Message' *)
        is_CancelAlarm := 0;
        is_IsBatteryError := 0;
        is_IsConfigTimeWarning := 0;
        is_IsFlowRateNotStable := 0;
        is_IsIdleTimeExceeded := 0;
        is_IsLoggingFailed := 0;
        is_IsPausedTimeExceeded := 0;
        is_IsPumpHot := 0;
        is_IsSystemMonitorFailed := 0;
        is_IsUnderInfusion := 0;
        is_IsLowReservoir := 0;
        is_IsAirInLine := 0;
        is_IsDoor_Open := 0;
        is_IsOcclusion := 0;
        is_IsOverInfusionFlowRate := 0;
        is_IsOverInfusionVTBI := 0;
        is_IsEmptyReservoir := 0;
        is_IsEnviromentalError := 0;
        is_IsHardwareError := 0;
        is_Audio := 0;
        is_Visual := 0;
        is_active_c2_Subsystem := 0;
        is_c2_Subsystem := 0;
        overInfusionTimer := 0.0;
        underInfusionTimer := 0.0;
        currentAlarm := 0;
        audioTimer := 0.0;
        cancelAlarm := 0;
        Max_Alarm_Level := 0;
        idletimer := 0.0;
        pausedtimer := 0.0;
        Is_Audio_Disabled := 0;
        Visual_Notification_Message := 0;
        Audio_Notification_Command := 0;
        Highest_Level_Alarm := 0;
        Log_Message_ID := 0;
    1: 
        (* Chart: '<S1>/Alarm  Sub-System' incorporates:
         *  Outport: '<Root>/Audio_Notification_Command'
         *  Outport: '<Root>/Highest_Level_Alarm'
         *  Outport: '<Root>/Is_Audio_Disabled'
         *  Outport: '<Root>/Log_Message_ID'
         *  Outport: '<Root>/Visual_Notification_Message' *)
        (* Gateway: Subsystem/Alarm  Sub-System *)
        (* During: Subsystem/Alarm  Sub-System *)

        IF is_active_c2_Subsystem = 0 THEN 
            (* Entry: Subsystem/Alarm  Sub-System *)
            is_active_c2_Subsystem := 1;
            (* Entry Internal: Subsystem/Alarm  Sub-System *)

            IF System_On THEN 
                (* Transition: '<S2>:4696' *)
                is_c2_Subsystem := 1;
                (* Entry Internal 'Alarms': '<S2>:3907' *)
                (* Entry Internal 'CheckAlarm': '<S2>:3953' *)
                (* Entry Internal 'CancelAlarm': '<S2>:4012' *)
                (* Transition: '<S2>:4013' *)
                is_CancelAlarm := 1;
                (* Entry Internal 'Level4': '<S2>:4019' *)
                (* Entry Internal 'IsEmptyReservoir': '<S2>:4020' *)

                IF In_Therapy AND Reservoir_Empty THEN 
                    (* Transition: '<S2>:4193' *)
                    is_IsEmptyReservoir := 2;
                ELSE 
                    (* Transition: '<S2>:4021' *)
                    is_IsEmptyReservoir := 1;
                END_IF;

                (* Entry Internal 'IsHardwareError': '<S2>:4217' *)

                IF ((((In19 OR In24) OR In23) OR In26) OR In28) OR In25 THEN 
                    (* Transition: '<S2>:4224' *)
                    is_IsHardwareError := 2;
                ELSE 
                    (* Transition: '<S2>:4219' *)
                    is_IsHardwareError := 1;
                END_IF;

                (* Entry Internal 'IsEnviromentalError': '<S2>:4032' *)

                IF (In17 OR In18) OR In16 THEN 
                    (* Transition: '<S2>:4198' *)
                    is_IsEnviromentalError := 2;
                ELSE 
                    (* Transition: '<S2>:4033' *)
                    is_IsEnviromentalError := 1;
                END_IF;

                (* Entry Internal 'Level3': '<S2>:4038' *)
                (* Entry 'IsOverInfusionFlowRate': '<S2>:4039' *)
                (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                (* Transition: '<S2>:4061' *)
                overInfusion := 0;

                IF In_Therapy THEN 
                    (* Transition: '<S2>:4062' *)

                    IF In11 > In8 THEN 
                        (* Transition: '<S2>:4063' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(In11) > (((100 + USINT_TO_DINT(In34)) / 100) * USINT_TO_DINT(In1)) THEN 
                        (* Transition: '<S2>:4064' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(In11) > (((100 + USINT_TO_DINT(In35)) / 100) * USINT_TO_DINT(In1)) THEN 
                        (* Transition: '<S2>:4065' *)
                        overInfusion := 2;
                    END_IF;

                END_IF;

                (* Entry Internal 'IsOverInfusionFlowRate': '<S2>:4039' *)

                CASE overInfusion OF
                    1: 
                        (* Transition: '<S2>:4697' *)
                        is_IsOverInfusionFlowRate := 3;
                        (* Entry 'Yes': '<S2>:4051' *)
                    2: 
                        (* Transition: '<S2>:4699' *)
                        is_IsOverInfusionFlowRate := 2;
                        (* Entry 'Monitor': '<S2>:4053' *)
                        (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                        (* Transition: '<S2>:4061' *)
                    ELSE
                        (* Transition: '<S2>:4041' *)
                        is_IsOverInfusionFlowRate := 1;
                        (* Entry 'Check': '<S2>:4052' *)
                        (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                        (* Transition: '<S2>:4061' *)
                END_CASE;

                (* Entry Internal 'IsOverInfusionVTBI': '<S2>:4066' *)

                IF In_Therapy AND (Volume_Infused > VTBI_High) THEN 
                    (* Transition: '<S2>:4201' *)
                    is_IsOverInfusionVTBI := 2;
                ELSE 
                    (* Transition: '<S2>:4067' *)
                    is_IsOverInfusionVTBI := 1;
                END_IF;

                (* Entry Internal 'IsAirInLine': '<S2>:4072' *)

                IF Air_In_Line THEN 
                    (* Transition: '<S2>:4202' *)
                    is_IsAirInLine := 2;
                ELSE 
                    (* Transition: '<S2>:4073' *)
                    is_IsAirInLine := 1;
                END_IF;

                (* Entry Internal 'IsOcclusion': '<S2>:4078' *)

                IF Occlusion THEN 
                    (* Transition: '<S2>:4203' *)
                    is_IsOcclusion := 2;
                ELSE 
                    (* Transition: '<S2>:4079' *)
                    is_IsOcclusion := 1;
                END_IF;

                (* Entry Internal 'IsDoor_Open': '<S2>:4084' *)

                IF Door_Open THEN 
                    (* Transition: '<S2>:4204' *)
                    is_IsDoor_Open := 2;
                ELSE 
                    (* Transition: '<S2>:4085' *)
                    is_IsDoor_Open := 1;
                END_IF;

                (* Entry Internal 'Level2': '<S2>:4090' *)
                (* Entry Internal 'IsLowReservoir': '<S2>:4091' *)

                IF In_Therapy AND (In40 < In31) THEN 
                    (* Transition: '<S2>:4205' *)
                    is_IsLowReservoir := 2;
                ELSE 
                    (* Transition: '<S2>:4092' *)
                    is_IsLowReservoir := 1;
                END_IF;

                (* Entry Internal 'Level1': '<S2>:4113' *)
                (* Entry 'IsUnderInfusion': '<S2>:4114' *)
                (* Graphical Function 'checkUnderInfusion': '<S2>:4130' *)
                (* Transition: '<S2>:4137' *)
                overInfusion := 0;

                IF In_Therapy THEN 
                    (* Transition: '<S2>:4139' *)

                    IF In11 < In9 THEN 
                        (* Transition: '<S2>:4138' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(In11) < (USINT_TO_DINT(In1) - (UDINT_TO_DINT(USINT_TO_UDINT(In34) / 100) * USINT_TO_DINT(In1))) THEN 
                        (* Transition: '<S2>:4140' *)
                        overInfusion := 1;
                    ELSIF USINT_TO_DINT(In11) < (USINT_TO_DINT(In1) - (UDINT_TO_DINT(USINT_TO_UDINT(In35) / 100) * USINT_TO_DINT(In1))) THEN 
                        (* Transition: '<S2>:4142' *)
                        overInfusion := 2;
                    END_IF;

                END_IF;

                (* Entry Internal 'IsUnderInfusion': '<S2>:4114' *)

                CASE overInfusion OF
                    1: 
                        (* Transition: '<S2>:4709' *)
                        is_IsUnderInfusion := 3;
                        (* Entry 'Yes': '<S2>:4126' *)
                    2: 
                        (* Transition: '<S2>:4710' *)
                        is_IsUnderInfusion := 2;
                        (* Entry 'Monitor': '<S2>:4128' *)
                        (* Graphical Function 'checkUnderInfusion': '<S2>:4130' *)
                        (* Transition: '<S2>:4137' *)
                    ELSE
                        (* Transition: '<S2>:4116' *)
                        is_IsUnderInfusion := 1;
                        (* Entry 'Check': '<S2>:4127' *)
                END_CASE;

                (* Entry Internal 'IsFlowRateNotStable': '<S2>:4143' *)

                IF In_Therapy AND In12 THEN 
                    (* Transition: '<S2>:4210' *)
                    is_IsFlowRateNotStable := 2;
                ELSE 
                    (* Transition: '<S2>:4144' *)
                    is_IsFlowRateNotStable := 1;
                END_IF;

                (* Entry Internal 'IsIdleTimeExceeded': '<S2>:4149' *)

                IF (In2 = 1) AND (Step_Scaling_Factor(inputVal := In37, b_step_size := 1.0) = 1.0) THEN 
                    (* Transition: '<S2>:4749' *)
                    is_IsIdleTimeExceeded := 2;
                ELSIF In2 = 1 THEN 
                    (* Transition: '<S2>:4748' *)
                    idletimer := 0.0;
                    is_IsIdleTimeExceeded := 3;
                    (* Entry 'counting': '<S2>:4745' *)
                    idletimer := idletimer + 1.0;
                ELSE 
                    (* Transition: '<S2>:4150' *)
                    is_IsIdleTimeExceeded := 1;
                    (* Entry 'No': '<S2>:4153' *)
                    idletimer := 0.0;
                END_IF;

                (* Entry Internal 'IsPausedTimeExceeded': '<S2>:4155' *)

                IF (((In2 = 6) OR (In2 = 7)) OR (In2 = 8)) AND (Step_Scaling_Factor(inputVal := In38, b_step_size := 1.0) = 1.0) THEN 
                    (* Transition: '<S2>:4760' *)
                    is_IsPausedTimeExceeded := 2;
                ELSIF ((In2 = 6) OR (In2 = 7)) OR (In2 = 8) THEN 
                    (* Transition: '<S2>:4759' *)
                    pausedtimer := 0.0;
                    is_IsPausedTimeExceeded := 3;
                    (* Entry 'counting': '<S2>:4752' *)
                    pausedtimer := pausedtimer + 1.0;
                ELSE 
                    (* Transition: '<S2>:4753' *)
                    is_IsPausedTimeExceeded := 1;
                    (* Entry 'No': '<S2>:4756' *)
                    pausedtimer := 0.0;
                END_IF;

                (* Entry Internal 'IsConfigTimeWarning': '<S2>:4161' *)

                IF In43 > Step_Scaling_Factor(inputVal := In36, b_step_size := 1.0) THEN 
                    (* Transition: '<S2>:4207' *)
                    is_IsConfigTimeWarning := 2;
                ELSE 
                    (* Transition: '<S2>:4162' *)
                    is_IsConfigTimeWarning := 1;
                END_IF;

                (* Entry Internal 'IsBatteryError': '<S2>:4167' *)

                IF (In20 OR In21) OR In22 THEN 
                    (* Transition: '<S2>:4212' *)
                    is_IsBatteryError := 2;
                ELSE 
                    (* Transition: '<S2>:4168' *)
                    is_IsBatteryError := 1;
                END_IF;

                (* Entry Internal 'IsPumpHot': '<S2>:4173' *)

                IF In27 THEN 
                    (* Transition: '<S2>:4208' *)
                    is_IsPumpHot := 2;
                ELSE 
                    (* Transition: '<S2>:4174' *)
                    is_IsPumpHot := 1;
                END_IF;

                (* Entry Internal 'IsLoggingFailed': '<S2>:4179' *)

                IF In5 THEN 
                    (* Transition: '<S2>:4213' *)
                    is_IsLoggingFailed := 2;
                ELSE 
                    (* Transition: '<S2>:4180' *)
                    is_IsLoggingFailed := 1;
                END_IF;

                (* Entry Internal 'IsSystemMonitorFailed': '<S2>:4185' *)

                IF In4 THEN 
                    (* Transition: '<S2>:4209' *)
                    is_IsSystemMonitorFailed := 2;
                ELSE 
                    (* Transition: '<S2>:4186' *)
                    is_IsSystemMonitorFailed := 1;
                END_IF;

                (* Entry 'SetAlarmStatus': '<S2>:4018' *)
                (* Graphical Function 'setHighestAlarm': '<S2>:4098' *)
                (* Transition: '<S2>:4104' *)
                Highest_Level_Alarm := Max_Alarm_Level;
                (* Graphical Function 'setCurrentAlarm': '<S2>:4785' *)
                (* Transition: '<S2>:4811' *)
                currentAlarm := 0;
                Max_Alarm_Level := 0;

                IF is_IsEmptyReservoir = 2 THEN 
                    (* Transition: '<S2>:4810' *)
                    currentAlarm := 1;
                    Max_Alarm_Level := 4;
                ELSIF is_IsEnviromentalError = 2 THEN 
                    (* Transition: '<S2>:4808' *)
                    currentAlarm := 2;
                    Max_Alarm_Level := 4;
                ELSIF is_IsHardwareError = 2 THEN 
                    (* Transition: '<S2>:4837' *)
                    currentAlarm := 3;
                    Max_Alarm_Level := 4;
                ELSIF is_IsOverInfusionFlowRate = 3 THEN 
                    (* Transition: '<S2>:4835' *)
                    currentAlarm := 4;
                    Max_Alarm_Level := 3;
                ELSIF is_IsOverInfusionVTBI = 2 THEN 
                    (* Transition: '<S2>:4834' *)
                    currentAlarm := 5;
                    Max_Alarm_Level := 3;
                ELSIF is_IsAirInLine = 2 THEN 
                    (* Transition: '<S2>:4831' *)
                    currentAlarm := 6;
                    Max_Alarm_Level := 3;
                ELSIF is_IsOcclusion = 2 THEN 
                    (* Transition: '<S2>:4830' *)
                    currentAlarm := 7;
                    Max_Alarm_Level := 3;
                ELSIF is_IsDoor_Open = 2 THEN 
                    (* Transition: '<S2>:4828' *)
                    currentAlarm := 8;
                    Max_Alarm_Level := 3;
                ELSIF is_IsLowReservoir = 2 THEN 
                    (* Transition: '<S2>:4825' *)
                    currentAlarm := 9;
                    Max_Alarm_Level := 2;
                ELSIF is_IsUnderInfusion = 3 THEN 
                    (* Transition: '<S2>:4787' *)
                    currentAlarm := 10;
                    Max_Alarm_Level := 1;
                ELSIF is_IsFlowRateNotStable = 2 THEN 
                    (* Transition: '<S2>:4821' *)
                    currentAlarm := 11;
                    Max_Alarm_Level := 1;
                ELSIF is_IsIdleTimeExceeded = 2 THEN 
                    (* Transition: '<S2>:4820' *)
                    currentAlarm := 12;
                    Max_Alarm_Level := 1;
                ELSIF is_IsPausedTimeExceeded = 2 THEN 
                    (* Transition: '<S2>:4817' *)
                    currentAlarm := 13;
                    Max_Alarm_Level := 1;
                ELSIF is_IsConfigTimeWarning = 2 THEN 
                    (* Transition: '<S2>:4816' *)
                    currentAlarm := 14;
                    Max_Alarm_Level := 1;
                ELSIF is_IsBatteryError = 2 THEN 
                    (* Transition: '<S2>:4799' *)
                    currentAlarm := 15;
                    Max_Alarm_Level := 1;
                ELSIF is_IsPumpHot = 2 THEN 
                    (* Transition: '<S2>:4798' *)
                    currentAlarm := 16;
                    Max_Alarm_Level := 1;
                ELSIF is_IsLoggingFailed = 2 THEN 
                    (* Transition: '<S2>:4813' *)
                    currentAlarm := 17;
                    Max_Alarm_Level := 1;
                ELSIF is_IsSystemMonitorFailed = 2 THEN 
                    (* Transition: '<S2>:4812' *)
                    currentAlarm := 18;
                    Max_Alarm_Level := 1;
                END_IF;

                (* Entry Internal 'Notification': '<S2>:3908' *)
                (* Entry Internal 'Visual': '<S2>:3909' *)

                IF currentAlarm > 0 THEN 
                    (* Transition: '<S2>:4608' *)
                    is_Visual := 1;
                    (* Entry 'AlarmDisplay': '<S2>:3913' *)
                    Visual_Notification_Message := currentAlarm;
                ELSE 
                    (* Transition: '<S2>:3910' *)
                    is_Visual := 2;
                    (* Entry 'OFF': '<S2>:3914' *)
                    Visual_Notification_Message := 0;
                END_IF;

                (* Entry 'Audio': '<S2>:3919' *)
                Is_Audio_Disabled := Disable_Audio;
                (* Entry Internal 'Audio': '<S2>:3919' *)

                CASE Disable_Audio OF
                    1: 
                        (* Transition: '<S2>:4599' *)
                        is_Audio := 1;
                        (* Entry 'Disabled': '<S2>:3939' *)
                        Audio_Notification_Command := 0;
                    2: 
                        (* Transition: '<S2>:4600' *)
                        is_Audio := 4;
                        (* Entry 'Silenced': '<S2>:3952' *)
                        audioTimer := 0.0;
                        Audio_Notification_Command := 0;
                        audioTimer := audioTimer + 1.0;
                    ELSE

                        IF (Highest_Level_Alarm > 2) AND (Disable_Audio = 0) THEN 
                            (* Transition: '<S2>:4601' *)
                            is_Audio := 3;
                            (* Entry 'ON': '<S2>:3938' *)
                            Audio_Notification_Command := Audio_Level;
                        ELSE 
                            (* Transition: '<S2>:3924' *)
                            is_Audio := 2;
                            (* Entry 'OFF': '<S2>:3937' *)
                            Audio_Notification_Command := 0;
                        END_IF;

                END_CASE;

            ELSE 
                (* Transition: '<S2>:3904' *)
                is_c2_Subsystem := 2;
            END_IF;

        ELSE 

            CASE is_c2_Subsystem OF
                1: 
                    (* During 'Alarms': '<S2>:3907' *)

                    IF  NOT System_On THEN 
                        (* Transition: '<S2>:3901' *)
                        (* Exit Internal 'Alarms': '<S2>:3907' *)
                        (* Exit Internal 'Notification': '<S2>:3908' *)
                        (* Exit Internal 'Audio': '<S2>:3919' *)

                        CASE is_Audio OF
                            1: 
                                (* Exit 'Disabled': '<S2>:3939' *)
                                Audio_Notification_Command := 0;
                                is_Audio := 0;
                            2: 
                                (* Exit 'OFF': '<S2>:3937' *)
                                Audio_Notification_Command := 0;
                                is_Audio := 0;
                            3: 
                                (* Exit 'ON': '<S2>:3938' *)
                                Audio_Notification_Command := Audio_Level;
                                is_Audio := 0;
                            4: 
                                (* Exit 'Silenced': '<S2>:3952' *)
                                Audio_Notification_Command := 0;
                                is_Audio := 0;
                        END_CASE;

                        (* Exit 'Audio': '<S2>:3919' *)
                        Is_Audio_Disabled := Disable_Audio;
                        (* Exit Internal 'Visual': '<S2>:3909' *)

                        CASE is_Visual OF
                            1: 
                                (* Exit 'AlarmDisplay': '<S2>:3913' *)
                                Visual_Notification_Message := currentAlarm;
                                is_Visual := 0;
                            ELSE
                                is_Visual := 0;
                        END_CASE;

                        (* Exit Internal 'CheckAlarm': '<S2>:3953' *)
                        (* Exit 'SetAlarmStatus': '<S2>:4018' *)
                        (* Graphical Function 'setHighestAlarm': '<S2>:4098' *)
                        (* Transition: '<S2>:4104' *)
                        Highest_Level_Alarm := Max_Alarm_Level;
                        (* Graphical Function 'setCurrentAlarm': '<S2>:4785' *)
                        (* Transition: '<S2>:4811' *)
                        currentAlarm := 0;
                        Max_Alarm_Level := 0;

                        IF is_IsEmptyReservoir = 2 THEN 
                            (* Transition: '<S2>:4810' *)
                            currentAlarm := 1;
                            Max_Alarm_Level := 4;
                        ELSIF is_IsEnviromentalError = 2 THEN 
                            (* Transition: '<S2>:4808' *)
                            currentAlarm := 2;
                            Max_Alarm_Level := 4;
                        ELSIF is_IsHardwareError = 2 THEN 
                            (* Transition: '<S2>:4837' *)
                            currentAlarm := 3;
                            Max_Alarm_Level := 4;
                        ELSIF is_IsOverInfusionFlowRate = 3 THEN 
                            (* Transition: '<S2>:4835' *)
                            currentAlarm := 4;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsOverInfusionVTBI = 2 THEN 
                            (* Transition: '<S2>:4834' *)
                            currentAlarm := 5;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsAirInLine = 2 THEN 
                            (* Transition: '<S2>:4831' *)
                            currentAlarm := 6;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsOcclusion = 2 THEN 
                            (* Transition: '<S2>:4830' *)
                            currentAlarm := 7;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsDoor_Open = 2 THEN 
                            (* Transition: '<S2>:4828' *)
                            currentAlarm := 8;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsLowReservoir = 2 THEN 
                            (* Transition: '<S2>:4825' *)
                            currentAlarm := 9;
                            Max_Alarm_Level := 2;
                        ELSIF is_IsUnderInfusion = 3 THEN 
                            (* Transition: '<S2>:4787' *)
                            currentAlarm := 10;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsFlowRateNotStable = 2 THEN 
                            (* Transition: '<S2>:4821' *)
                            currentAlarm := 11;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsIdleTimeExceeded = 2 THEN 
                            (* Transition: '<S2>:4820' *)
                            currentAlarm := 12;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsPausedTimeExceeded = 2 THEN 
                            (* Transition: '<S2>:4817' *)
                            currentAlarm := 13;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsConfigTimeWarning = 2 THEN 
                            (* Transition: '<S2>:4816' *)
                            currentAlarm := 14;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsBatteryError = 2 THEN 
                            (* Transition: '<S2>:4799' *)
                            currentAlarm := 15;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsPumpHot = 2 THEN 
                            (* Transition: '<S2>:4798' *)
                            currentAlarm := 16;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsLoggingFailed = 2 THEN 
                            (* Transition: '<S2>:4813' *)
                            currentAlarm := 17;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsSystemMonitorFailed = 2 THEN 
                            (* Transition: '<S2>:4812' *)
                            currentAlarm := 18;
                            Max_Alarm_Level := 1;
                        END_IF;

                        cancelAlarm := 0;
                        (* Exit Internal 'Level1': '<S2>:4113' *)
                        (* Exit Internal 'IsSystemMonitorFailed': '<S2>:4185' *)
                        is_IsSystemMonitorFailed := 0;
                        (* Exit Internal 'IsLoggingFailed': '<S2>:4179' *)
                        is_IsLoggingFailed := 0;
                        (* Exit Internal 'IsPumpHot': '<S2>:4173' *)
                        is_IsPumpHot := 0;
                        (* Exit Internal 'IsBatteryError': '<S2>:4167' *)
                        is_IsBatteryError := 0;
                        (* Exit Internal 'IsConfigTimeWarning': '<S2>:4161' *)
                        is_IsConfigTimeWarning := 0;
                        (* Exit Internal 'IsPausedTimeExceeded': '<S2>:4155' *)

                        CASE is_IsPausedTimeExceeded OF
                            1: 
                                (* Exit 'No': '<S2>:4756' *)
                                pausedtimer := 0.0;
                                is_IsPausedTimeExceeded := 0;
                            3: 
                                (* Exit 'counting': '<S2>:4752' *)
                                pausedtimer := pausedtimer + 1.0;
                                is_IsPausedTimeExceeded := 0;
                            ELSE
                                is_IsPausedTimeExceeded := 0;
                        END_CASE;

                        (* Exit Internal 'IsIdleTimeExceeded': '<S2>:4149' *)

                        CASE is_IsIdleTimeExceeded OF
                            1: 
                                (* Exit 'No': '<S2>:4153' *)
                                idletimer := 0.0;
                                is_IsIdleTimeExceeded := 0;
                            3: 
                                (* Exit 'counting': '<S2>:4745' *)
                                idletimer := idletimer + 1.0;
                                is_IsIdleTimeExceeded := 0;
                            ELSE
                                is_IsIdleTimeExceeded := 0;
                        END_CASE;

                        (* Exit Internal 'IsFlowRateNotStable': '<S2>:4143' *)
                        is_IsFlowRateNotStable := 0;
                        (* Exit Internal 'IsUnderInfusion': '<S2>:4114' *)
                        is_IsUnderInfusion := 0;
                        (* Exit 'IsUnderInfusion': '<S2>:4114' *)
                        (* Graphical Function 'checkUnderInfusion': '<S2>:4130' *)
                        (* Transition: '<S2>:4137' *)
                        (* Exit Internal 'Level2': '<S2>:4090' *)
                        (* Exit Internal 'IsLowReservoir': '<S2>:4091' *)
                        is_IsLowReservoir := 0;
                        (* Exit Internal 'Level3': '<S2>:4038' *)
                        (* Exit Internal 'IsDoor_Open': '<S2>:4084' *)
                        is_IsDoor_Open := 0;
                        (* Exit Internal 'IsOcclusion': '<S2>:4078' *)
                        is_IsOcclusion := 0;
                        (* Exit Internal 'IsAirInLine': '<S2>:4072' *)
                        is_IsAirInLine := 0;
                        (* Exit Internal 'IsOverInfusionVTBI': '<S2>:4066' *)
                        is_IsOverInfusionVTBI := 0;
                        (* Exit Internal 'IsOverInfusionFlowRate': '<S2>:4039' *)

                        CASE is_IsOverInfusionFlowRate OF
                            1: 
                                (* Exit 'Check': '<S2>:4052' *)
                                (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                (* Transition: '<S2>:4061' *)
                                is_IsOverInfusionFlowRate := 0;
                            2: 
                                (* Exit 'Monitor': '<S2>:4053' *)
                                (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                (* Transition: '<S2>:4061' *)
                                is_IsOverInfusionFlowRate := 0;
                            ELSE
                                is_IsOverInfusionFlowRate := 0;
                        END_CASE;

                        (* Exit 'IsOverInfusionFlowRate': '<S2>:4039' *)
                        (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                        (* Transition: '<S2>:4061' *)
                        (* Exit Internal 'Level4': '<S2>:4019' *)
                        (* Exit Internal 'IsEnviromentalError': '<S2>:4032' *)
                        is_IsEnviromentalError := 0;
                        (* Exit Internal 'IsHardwareError': '<S2>:4217' *)
                        is_IsHardwareError := 0;
                        (* Exit Internal 'IsEmptyReservoir': '<S2>:4020' *)
                        is_IsEmptyReservoir := 0;
                        (* Exit Internal 'CancelAlarm': '<S2>:4012' *)
                        is_CancelAlarm := 0;
                        is_c2_Subsystem := 2;
                    ELSE 
                        (* During 'CheckAlarm': '<S2>:3953' *)
                        (* During 'CancelAlarm': '<S2>:4012' *)

                        CASE is_CancelAlarm OF
                            1: 
                                (* During 'OFF': '<S2>:4017' *)

                                IF (currentAlarm > 0) AND In7 THEN 
                                    (* Transition: '<S2>:4014' *)
                                    is_CancelAlarm := 2;
                                    (* Entry 'ON': '<S2>:4016' *)
                                    cancelAlarm := currentAlarm;
                                    (* Graphical Function 'writeLog': '<S2>:4778' *)
                                    (* Transition: '<S2>:4774' *)
                                    Log_Message_ID := 3;
                                END_IF;

                            ELSE
                                (* During 'ON': '<S2>:4016' *)
                                (* Transition: '<S2>:4015' *)
                                is_CancelAlarm := 1;
                        END_CASE;

                        (* During 'Level4': '<S2>:4019' *)
                        (* During 'IsEmptyReservoir': '<S2>:4020' *)

                        CASE is_IsEmptyReservoir OF
                            1: 
                                (* During 'No': '<S2>:4024' *)

                                IF In_Therapy AND Reservoir_Empty THEN 
                                    (* Transition: '<S2>:4022' *)
                                    is_IsEmptyReservoir := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4025' *)

                                IF In_Therapy AND Reservoir_Empty THEN 
                                    (* Transition: '<S2>:4615' *)
                                    is_IsEmptyReservoir := 2;
                                ELSIF (cancelAlarm = 1) AND ( NOT Reservoir_Empty) THEN 
                                    (* Transition: '<S2>:4023' *)
                                    is_IsEmptyReservoir := 1;
                                END_IF;

                        END_CASE;

                        (* During 'IsHardwareError': '<S2>:4217' *)

                        CASE is_IsHardwareError OF
                            1: 
                                (* During 'No': '<S2>:4222' *)

                                IF ((((In19 OR In24) OR In23) OR In26) OR In28) OR In25 THEN 
                                    (* Transition: '<S2>:4223' *)
                                    is_IsHardwareError := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4220' *)

                                IF (cancelAlarm = 2) AND (((((( NOT In19) AND ( NOT In24)) AND ( NOT In23)) AND ( NOT In26)) AND ( NOT In28)) AND ( NOT In25)) THEN 
                                    (* Transition: '<S2>:4221' *)
                                    is_IsHardwareError := 1;
                                END_IF;

                        END_CASE;

                        (* During 'IsEnviromentalError': '<S2>:4032' *)

                        CASE is_IsEnviromentalError OF
                            1: 
                                (* During 'No': '<S2>:4037' *)

                                IF (In17 OR In18) OR In16 THEN 
                                    (* Transition: '<S2>:4034' *)
                                    is_IsEnviromentalError := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4036' *)

                                IF (cancelAlarm = 3) AND ((( NOT In17) AND ( NOT In18)) AND ( NOT In16)) THEN 
                                    (* Transition: '<S2>:4035' *)
                                    is_IsEnviromentalError := 1;
                                END_IF;

                        END_CASE;

                        (* During 'Level3': '<S2>:4038' *)
                        (* During 'IsOverInfusionFlowRate': '<S2>:4039' *)
                        (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                        (* Transition: '<S2>:4061' *)
                        overInfusion := 0;

                        IF In_Therapy THEN 
                            (* Transition: '<S2>:4062' *)

                            IF In11 > In8 THEN 
                                (* Transition: '<S2>:4063' *)
                                overInfusion := 1;
                            ELSIF USINT_TO_DINT(In11) > (((100 + USINT_TO_DINT(In34)) / 100) * USINT_TO_DINT(In1)) THEN 
                                (* Transition: '<S2>:4064' *)
                                overInfusion := 1;
                            ELSIF USINT_TO_DINT(In11) > (((100 + USINT_TO_DINT(In35)) / 100) * USINT_TO_DINT(In1)) THEN 
                                (* Transition: '<S2>:4065' *)
                                overInfusion := 2;
                            END_IF;

                        END_IF;


                        CASE is_IsOverInfusionFlowRate OF
                            1: 
                                (* During 'Check': '<S2>:4052' *)

                                CASE overInfusion OF
                                    1: 
                                        (* Transition: '<S2>:4044' *)
                                        (* Exit 'Check': '<S2>:4052' *)
                                        (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                        (* Transition: '<S2>:4061' *)
                                        is_IsOverInfusionFlowRate := 3;
                                        (* Entry 'Yes': '<S2>:4051' *)
                                    2: 
                                        (* Transition: '<S2>:4046' *)
                                        overInfusionTimer := 0.0;
                                        (* Exit 'Check': '<S2>:4052' *)
                                        (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                        (* Transition: '<S2>:4061' *)
                                        is_IsOverInfusionFlowRate := 2;
                                        (* Entry 'Monitor': '<S2>:4053' *)
                                        (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                        (* Transition: '<S2>:4061' *)
                                END_CASE;

                            2: 
                                (* During 'Monitor': '<S2>:4053' *)

                                IF (overInfusion = 1) OR (overInfusionTimer > Step_Scaling_Factor(inputVal := In32, b_step_size := 1.0)) THEN 
                                    (* Transition: '<S2>:4047' *)
                                    overInfusionTimer := 0.0;
                                    (* Exit 'Monitor': '<S2>:4053' *)
                                    (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                    (* Transition: '<S2>:4061' *)
                                    is_IsOverInfusionFlowRate := 3;
                                    (* Entry 'Yes': '<S2>:4051' *)
                                ELSE 

                                    CASE overInfusion OF
                                        0: 
                                            (* Transition: '<S2>:4042' *)
                                            overInfusionTimer := 0.0;
                                            (* Exit 'Monitor': '<S2>:4053' *)
                                            (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                            (* Transition: '<S2>:4061' *)
                                            is_IsOverInfusionFlowRate := 1;
                                            (* Entry 'Check': '<S2>:4052' *)
                                            (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                            (* Transition: '<S2>:4061' *)
                                        2: 
                                            (* Transition: '<S2>:4049' *)
                                            overInfusionTimer := overInfusionTimer + 1.0;
                                            (* Exit 'Monitor': '<S2>:4053' *)
                                            (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                            (* Transition: '<S2>:4061' *)
                                            is_IsOverInfusionFlowRate := 2;
                                            (* Entry 'Monitor': '<S2>:4053' *)
                                            (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                            (* Transition: '<S2>:4061' *)
                                    END_CASE;

                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4051' *)

                                IF overInfusion = 1 THEN 
                                    (* Transition: '<S2>:4701' *)
                                    is_IsOverInfusionFlowRate := 3;
                                    (* Entry 'Yes': '<S2>:4051' *)
                                ELSIF cancelAlarm = 4 THEN 
                                    (* Transition: '<S2>:4501' *)
                                    is_IsOverInfusionFlowRate := 1;
                                    (* Entry 'Check': '<S2>:4052' *)
                                    (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                    (* Transition: '<S2>:4061' *)
                                END_IF;

                        END_CASE;

                        (* During 'IsOverInfusionVTBI': '<S2>:4066' *)

                        CASE is_IsOverInfusionVTBI OF
                            1: 
                                (* During 'No': '<S2>:4071' *)

                                IF In_Therapy AND (Volume_Infused > VTBI_High) THEN 
                                    (* Transition: '<S2>:4068' *)
                                    is_IsOverInfusionVTBI := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4070' *)

                                IF In_Therapy AND (Volume_Infused > VTBI_High) THEN 
                                    (* Transition: '<S2>:4702' *)
                                    is_IsOverInfusionVTBI := 2;
                                ELSIF cancelAlarm = 5 THEN 
                                    (* Transition: '<S2>:4069' *)
                                    is_IsOverInfusionVTBI := 1;
                                END_IF;

                        END_CASE;

                        (* During 'IsAirInLine': '<S2>:4072' *)

                        CASE is_IsAirInLine OF
                            1: 
                                (* During 'No': '<S2>:4077' *)

                                IF Air_In_Line THEN 
                                    (* Transition: '<S2>:4074' *)
                                    is_IsAirInLine := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4076' *)

                                IF (cancelAlarm = 6) AND ( NOT Air_In_Line) THEN 
                                    (* Transition: '<S2>:4075' *)
                                    is_IsAirInLine := 1;
                                END_IF;

                        END_CASE;

                        (* During 'IsOcclusion': '<S2>:4078' *)

                        CASE is_IsOcclusion OF
                            1: 
                                (* During 'No': '<S2>:4083' *)

                                IF Occlusion THEN 
                                    (* Transition: '<S2>:4080' *)
                                    is_IsOcclusion := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4082' *)

                                IF (cancelAlarm = 7) AND ( NOT Occlusion) THEN 
                                    (* Transition: '<S2>:4081' *)
                                    is_IsOcclusion := 1;
                                END_IF;

                        END_CASE;

                        (* During 'IsDoor_Open': '<S2>:4084' *)

                        CASE is_IsDoor_Open OF
                            1: 
                                (* During 'No': '<S2>:4088' *)

                                IF Door_Open THEN 
                                    (* Transition: '<S2>:4086' *)
                                    is_IsDoor_Open := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4089' *)

                                IF (cancelAlarm = 8) AND ( NOT Door_Open) THEN 
                                    (* Transition: '<S2>:4087' *)
                                    is_IsDoor_Open := 1;
                                END_IF;

                        END_CASE;

                        (* During 'Level2': '<S2>:4090' *)
                        (* During 'IsLowReservoir': '<S2>:4091' *)

                        CASE is_IsLowReservoir OF
                            1: 
                                (* During 'No': '<S2>:4095' *)

                                IF In_Therapy AND (In40 < In31) THEN 
                                    (* Transition: '<S2>:4093' *)
                                    is_IsLowReservoir := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4096' *)

                                IF (cancelAlarm = 9) AND (In40 >= In31) THEN 
                                    (* Transition: '<S2>:4094' *)
                                    is_IsLowReservoir := 1;
                                END_IF;

                        END_CASE;

                        (* During 'Level1': '<S2>:4113' *)
                        (* During 'IsUnderInfusion': '<S2>:4114' *)
                        (* Graphical Function 'checkUnderInfusion': '<S2>:4130' *)
                        (* Transition: '<S2>:4137' *)
                        overInfusion := 0;

                        IF In_Therapy THEN 
                            (* Transition: '<S2>:4139' *)

                            IF In11 < In9 THEN 
                                (* Transition: '<S2>:4138' *)
                                overInfusion := 1;
                            ELSIF USINT_TO_DINT(In11) < (USINT_TO_DINT(In1) - (UDINT_TO_DINT(USINT_TO_UDINT(In34) / 100) * USINT_TO_DINT(In1))) THEN 
                                (* Transition: '<S2>:4140' *)
                                overInfusion := 1;
                            ELSIF USINT_TO_DINT(In11) < (USINT_TO_DINT(In1) - (UDINT_TO_DINT(USINT_TO_UDINT(In35) / 100) * USINT_TO_DINT(In1))) THEN 
                                (* Transition: '<S2>:4142' *)
                                overInfusion := 2;
                            END_IF;

                        END_IF;


                        CASE is_IsUnderInfusion OF
                            1: 
                                (* During 'Check': '<S2>:4127' *)

                                CASE overInfusion OF
                                    1: 
                                        (* Transition: '<S2>:4119' *)
                                        is_IsUnderInfusion := 3;
                                        (* Entry 'Yes': '<S2>:4126' *)
                                    2: 
                                        (* Transition: '<S2>:4121' *)
                                        underInfusionTimer := 0.0;
                                        is_IsUnderInfusion := 2;
                                        (* Entry 'Monitor': '<S2>:4128' *)
                                        (* Graphical Function 'checkUnderInfusion': '<S2>:4130' *)
                                        (* Transition: '<S2>:4137' *)
                                END_CASE;

                            2: 
                                (* During 'Monitor': '<S2>:4128' *)

                                IF (overInfusion = 1) OR (underInfusionTimer > Step_Scaling_Factor(inputVal := In33, b_step_size := 1.0)) THEN 
                                    (* Transition: '<S2>:4122' *)
                                    underInfusionTimer := 0.0;
                                    is_IsUnderInfusion := 3;
                                    (* Entry 'Yes': '<S2>:4126' *)
                                ELSE 

                                    CASE overInfusion OF
                                        2: 
                                            (* Transition: '<S2>:4124' *)
                                            underInfusionTimer := underInfusionTimer + 1.0;
                                            is_IsUnderInfusion := 2;
                                            (* Entry 'Monitor': '<S2>:4128' *)
                                            (* Graphical Function 'checkUnderInfusion': '<S2>:4130' *)
                                            (* Transition: '<S2>:4137' *)
                                        0: 
                                            (* Transition: '<S2>:4118' *)
                                            underInfusionTimer := 0.0;
                                            is_IsUnderInfusion := 1;
                                            (* Entry 'Check': '<S2>:4127' *)
                                    END_CASE;

                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4126' *)

                                IF cancelAlarm = 10 THEN 
                                    (* Transition: '<S2>:4502' *)
                                    is_IsUnderInfusion := 1;
                                    (* Entry 'Check': '<S2>:4127' *)
                                END_IF;

                        END_CASE;

                        (* During 'IsFlowRateNotStable': '<S2>:4143' *)

                        CASE is_IsFlowRateNotStable OF
                            1: 
                                (* During 'No': '<S2>:4148' *)

                                IF In_Therapy AND In12 THEN 
                                    (* Transition: '<S2>:4145' *)
                                    is_IsFlowRateNotStable := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4147' *)

                                IF (cancelAlarm = 11) AND ( NOT In12) THEN 
                                    (* Transition: '<S2>:4146' *)
                                    is_IsFlowRateNotStable := 1;
                                END_IF;

                        END_CASE;

                        (* During 'IsIdleTimeExceeded': '<S2>:4149' *)

                        CASE is_IsIdleTimeExceeded OF
                            1: 
                                (* During 'No': '<S2>:4153' *)

                                IF (In2 = 1) AND (Step_Scaling_Factor(inputVal := In37, b_step_size := 1.0) = 1.0) THEN 
                                    (* Transition: '<S2>:4750' *)
                                    (* Exit 'No': '<S2>:4153' *)
                                    idletimer := 0.0;
                                    is_IsIdleTimeExceeded := 2;
                                ELSIF In2 = 1 THEN 
                                    (* Transition: '<S2>:4746' *)
                                    (* Exit 'No': '<S2>:4153' *)
                                    idletimer := 0.0;
                                    is_IsIdleTimeExceeded := 3;
                                    (* Entry 'counting': '<S2>:4745' *)
                                    idletimer := idletimer + 1.0;
                                ELSE 
                                    idletimer := 0.0;
                                END_IF;

                            2: 
                                (* During 'Yes': '<S2>:4154' *)

                                IF cancelAlarm = 12 THEN 
                                    (* Transition: '<S2>:4152' *)
                                    is_IsIdleTimeExceeded := 1;
                                    (* Entry 'No': '<S2>:4153' *)
                                    idletimer := 0.0;
                                END_IF;

                            ELSE
                                (* During 'counting': '<S2>:4745' *)

                                IF idletimer >= Step_Scaling_Factor(inputVal := In37, b_step_size := 1.0) THEN 
                                    (* Transition: '<S2>:4747' *)
                                    (* Exit 'counting': '<S2>:4745' *)
                                    idletimer := idletimer + 1.0;
                                    is_IsIdleTimeExceeded := 2;
                                ELSE 
                                    idletimer := idletimer + 1.0;
                                END_IF;

                        END_CASE;

                        (* During 'IsPausedTimeExceeded': '<S2>:4155' *)

                        CASE is_IsPausedTimeExceeded OF
                            1: 
                                (* During 'No': '<S2>:4756' *)

                                IF (((In2 = 6) OR (In2 = 7)) OR (In2 = 8)) AND (Step_Scaling_Factor(inputVal := In38, b_step_size := 1.0) = 1.0) THEN 
                                    (* Transition: '<S2>:4761' *)
                                    (* Exit 'No': '<S2>:4756' *)
                                    pausedtimer := 0.0;
                                    is_IsPausedTimeExceeded := 2;
                                ELSIF ((In2 = 6) OR (In2 = 7)) OR (In2 = 8) THEN 
                                    (* Transition: '<S2>:4757' *)
                                    (* Exit 'No': '<S2>:4756' *)
                                    pausedtimer := 0.0;
                                    is_IsPausedTimeExceeded := 3;
                                    (* Entry 'counting': '<S2>:4752' *)
                                    pausedtimer := pausedtimer + 1.0;
                                ELSE 
                                    pausedtimer := 0.0;
                                END_IF;

                            2: 
                                (* During 'Yes': '<S2>:4755' *)

                                IF cancelAlarm = 13 THEN 
                                    (* Transition: '<S2>:4754' *)
                                    is_IsPausedTimeExceeded := 1;
                                    (* Entry 'No': '<S2>:4756' *)
                                    pausedtimer := 0.0;
                                END_IF;

                            ELSE
                                (* During 'counting': '<S2>:4752' *)

                                IF pausedtimer >= Step_Scaling_Factor(inputVal := In38, b_step_size := 1.0) THEN 
                                    (* Transition: '<S2>:4758' *)
                                    (* Exit 'counting': '<S2>:4752' *)
                                    pausedtimer := pausedtimer + 1.0;
                                    is_IsPausedTimeExceeded := 2;
                                ELSE 
                                    pausedtimer := pausedtimer + 1.0;
                                END_IF;

                        END_CASE;

                        (* During 'IsConfigTimeWarning': '<S2>:4161' *)

                        CASE is_IsConfigTimeWarning OF
                            1: 
                                (* During 'No': '<S2>:4166' *)

                                IF In43 > Step_Scaling_Factor(inputVal := In36, b_step_size := 1.0) THEN 
                                    (* Transition: '<S2>:4163' *)
                                    is_IsConfigTimeWarning := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4165' *)

                                IF (cancelAlarm = 14) AND (In43 <= Step_Scaling_Factor(inputVal := In36, b_step_size := 1.0)) THEN 
                                    (* Transition: '<S2>:4164' *)
                                    is_IsConfigTimeWarning := 1;
                                END_IF;

                        END_CASE;

                        (* During 'IsBatteryError': '<S2>:4167' *)

                        CASE is_IsBatteryError OF
                            1: 
                                (* During 'No': '<S2>:4172' *)

                                IF (In20 OR In21) OR In22 THEN 
                                    (* Transition: '<S2>:4169' *)
                                    is_IsBatteryError := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4171' *)

                                IF (cancelAlarm = 15) AND ((( NOT In20) AND ( NOT In21)) AND ( NOT In22)) THEN 
                                    (* Transition: '<S2>:4170' *)
                                    is_IsBatteryError := 1;
                                END_IF;

                        END_CASE;

                        (* During 'IsPumpHot': '<S2>:4173' *)

                        CASE is_IsPumpHot OF
                            1: 
                                (* During 'No': '<S2>:4178' *)

                                IF In27 THEN 
                                    (* Transition: '<S2>:4175' *)
                                    is_IsPumpHot := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4177' *)

                                IF (cancelAlarm = 16) AND ( NOT In27) THEN 
                                    (* Transition: '<S2>:4176' *)
                                    is_IsPumpHot := 1;
                                END_IF;

                        END_CASE;

                        (* During 'IsLoggingFailed': '<S2>:4179' *)

                        CASE is_IsLoggingFailed OF
                            1: 
                                (* During 'No': '<S2>:4184' *)

                                IF In5 THEN 
                                    (* Transition: '<S2>:4181' *)
                                    is_IsLoggingFailed := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4183' *)

                                IF (cancelAlarm = 17) AND ( NOT In5) THEN 
                                    (* Transition: '<S2>:4182' *)
                                    is_IsLoggingFailed := 1;
                                END_IF;

                        END_CASE;

                        (* During 'IsSystemMonitorFailed': '<S2>:4185' *)

                        CASE is_IsSystemMonitorFailed OF
                            1: 
                                (* During 'No': '<S2>:4190' *)

                                IF In4 THEN 
                                    (* Transition: '<S2>:4187' *)
                                    is_IsSystemMonitorFailed := 2;
                                END_IF;

                            ELSE
                                (* During 'Yes': '<S2>:4189' *)

                                IF (cancelAlarm = 18) AND ( NOT In4) THEN 
                                    (* Transition: '<S2>:4188' *)
                                    is_IsSystemMonitorFailed := 1;
                                END_IF;

                        END_CASE;

                        (* During 'SetAlarmStatus': '<S2>:4018' *)
                        (* Graphical Function 'setHighestAlarm': '<S2>:4098' *)
                        (* Transition: '<S2>:4104' *)
                        Highest_Level_Alarm := Max_Alarm_Level;
                        (* Graphical Function 'setCurrentAlarm': '<S2>:4785' *)
                        (* Transition: '<S2>:4811' *)
                        currentAlarm := 0;
                        Max_Alarm_Level := 0;

                        IF is_IsEmptyReservoir = 2 THEN 
                            (* Transition: '<S2>:4810' *)
                            currentAlarm := 1;
                            Max_Alarm_Level := 4;
                        ELSIF is_IsEnviromentalError = 2 THEN 
                            (* Transition: '<S2>:4808' *)
                            currentAlarm := 2;
                            Max_Alarm_Level := 4;
                        ELSIF is_IsHardwareError = 2 THEN 
                            (* Transition: '<S2>:4837' *)
                            currentAlarm := 3;
                            Max_Alarm_Level := 4;
                        ELSIF is_IsOverInfusionFlowRate = 3 THEN 
                            (* Transition: '<S2>:4835' *)
                            currentAlarm := 4;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsOverInfusionVTBI = 2 THEN 
                            (* Transition: '<S2>:4834' *)
                            currentAlarm := 5;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsAirInLine = 2 THEN 
                            (* Transition: '<S2>:4831' *)
                            currentAlarm := 6;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsOcclusion = 2 THEN 
                            (* Transition: '<S2>:4830' *)
                            currentAlarm := 7;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsDoor_Open = 2 THEN 
                            (* Transition: '<S2>:4828' *)
                            currentAlarm := 8;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsLowReservoir = 2 THEN 
                            (* Transition: '<S2>:4825' *)
                            currentAlarm := 9;
                            Max_Alarm_Level := 2;
                        ELSIF is_IsUnderInfusion = 3 THEN 
                            (* Transition: '<S2>:4787' *)
                            currentAlarm := 10;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsFlowRateNotStable = 2 THEN 
                            (* Transition: '<S2>:4821' *)
                            currentAlarm := 11;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsIdleTimeExceeded = 2 THEN 
                            (* Transition: '<S2>:4820' *)
                            currentAlarm := 12;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsPausedTimeExceeded = 2 THEN 
                            (* Transition: '<S2>:4817' *)
                            currentAlarm := 13;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsConfigTimeWarning = 2 THEN 
                            (* Transition: '<S2>:4816' *)
                            currentAlarm := 14;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsBatteryError = 2 THEN 
                            (* Transition: '<S2>:4799' *)
                            currentAlarm := 15;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsPumpHot = 2 THEN 
                            (* Transition: '<S2>:4798' *)
                            currentAlarm := 16;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsLoggingFailed = 2 THEN 
                            (* Transition: '<S2>:4813' *)
                            currentAlarm := 17;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsSystemMonitorFailed = 2 THEN 
                            (* Transition: '<S2>:4812' *)
                            currentAlarm := 18;
                            Max_Alarm_Level := 1;
                        END_IF;

                        (* During 'Notification': '<S2>:3908' *)
                        (* During 'Visual': '<S2>:3909' *)

                        CASE is_Visual OF
                            1: 
                                (* During 'AlarmDisplay': '<S2>:3913' *)

                                IF currentAlarm = 0 THEN 
                                    (* Transition: '<S2>:3912' *)
                                    (* Exit 'AlarmDisplay': '<S2>:3913' *)
                                    is_Visual := 2;
                                    (* Entry 'OFF': '<S2>:3914' *)
                                    Visual_Notification_Message := 0;
                                ELSIF currentAlarm > 0 THEN 
                                    (* Transition: '<S2>:4614' *)
                                    (* Exit 'AlarmDisplay': '<S2>:3913' *)
                                    is_Visual := 1;
                                    (* Entry 'AlarmDisplay': '<S2>:3913' *)
                                    Visual_Notification_Message := currentAlarm;
                                ELSE 
                                    Visual_Notification_Message := currentAlarm;
                                END_IF;

                            ELSE
                                (* During 'OFF': '<S2>:3914' *)

                                IF currentAlarm > 0 THEN 
                                    (* Transition: '<S2>:3911' *)
                                    is_Visual := 1;
                                    (* Entry 'AlarmDisplay': '<S2>:3913' *)
                                    Visual_Notification_Message := currentAlarm;
                                END_IF;

                        END_CASE;

                        (* During 'Audio': '<S2>:3919' *)
                        Is_Audio_Disabled := Disable_Audio;

                        CASE is_Audio OF
                            1: 
                                (* During 'Disabled': '<S2>:3939' *)

                                IF Disable_Audio = 2 THEN 
                                    (* Transition: '<S2>:4610' *)
                                    (* Exit 'Disabled': '<S2>:3939' *)
                                    is_Audio := 4;
                                    (* Entry 'Silenced': '<S2>:3952' *)
                                    audioTimer := 0.0;
                                    Audio_Notification_Command := 0;
                                    audioTimer := audioTimer + 1.0;
                                ELSE 
                                    (* Transition: '<S2>:4604' *)

                                    IF (Highest_Level_Alarm > 2) AND (Disable_Audio = 0) THEN 
                                        (* Transition: '<S2>:4736' *)
                                        (* Exit 'Disabled': '<S2>:3939' *)
                                        is_Audio := 3;
                                        (* Entry 'ON': '<S2>:3938' *)
                                        Audio_Notification_Command := Audio_Level;
                                    ELSIF Disable_Audio = 0 THEN 
                                        (* Transition: '<S2>:3934' *)
                                        (* Transition: '<S2>:3928' *)
                                        (* Exit 'Disabled': '<S2>:3939' *)
                                        is_Audio := 2;
                                        (* Entry 'OFF': '<S2>:3937' *)
                                        Audio_Notification_Command := 0;
                                    ELSE 
                                        Audio_Notification_Command := 0;
                                    END_IF;

                                END_IF;

                            2: 
                                (* During 'OFF': '<S2>:3937' *)

                                CASE Disable_Audio OF
                                    1: 
                                        (* Transition: '<S2>:4743' *)
                                        (* Exit 'OFF': '<S2>:3937' *)
                                        is_Audio := 1;
                                        (* Entry 'Disabled': '<S2>:3939' *)
                                        Audio_Notification_Command := 0;
                                    2: 
                                        (* Transition: '<S2>:4738' *)
                                        (* Transition: '<S2>:4739' *)
                                        (* Exit 'OFF': '<S2>:3937' *)
                                        is_Audio := 4;
                                        (* Entry 'Silenced': '<S2>:3952' *)
                                        audioTimer := 0.0;
                                        Audio_Notification_Command := 0;
                                        audioTimer := audioTimer + 1.0;
                                    ELSE

                                        IF (Highest_Level_Alarm > 2) AND (Disable_Audio = 0) THEN 
                                            (* Transition: '<S2>:3925' *)
                                            (* Exit 'OFF': '<S2>:3937' *)
                                            is_Audio := 3;
                                            (* Entry 'ON': '<S2>:3938' *)
                                            Audio_Notification_Command := Audio_Level;
                                        ELSE 
                                            Audio_Notification_Command := 0;
                                        END_IF;

                                END_CASE;

                            3: 
                                (* During 'ON': '<S2>:3938' *)

                                CASE Disable_Audio OF
                                    1: 
                                        (* Transition: '<S2>:3931' *)
                                        (* Exit 'ON': '<S2>:3938' *)
                                        is_Audio := 1;
                                        (* Entry 'Disabled': '<S2>:3939' *)
                                        Audio_Notification_Command := 0;
                                    2: 
                                        (* Transition: '<S2>:3927' *)
                                        (* Transition: '<S2>:4739' *)
                                        (* Exit 'ON': '<S2>:3938' *)
                                        is_Audio := 4;
                                        (* Entry 'Silenced': '<S2>:3952' *)
                                        audioTimer := 0.0;
                                        Audio_Notification_Command := 0;
                                        audioTimer := audioTimer + 1.0;
                                    ELSE

                                        IF (Highest_Level_Alarm > 2) AND (Disable_Audio = 0) THEN 
                                            (* Transition: '<S2>:4609' *)
                                            (* Exit 'ON': '<S2>:3938' *)
                                            is_Audio := 3;
                                            (* Entry 'ON': '<S2>:3938' *)
                                            Audio_Notification_Command := Audio_Level;
                                        ELSE 
                                            (* Transition: '<S2>:3926' *)
                                            (* Exit 'ON': '<S2>:3938' *)
                                            is_Audio := 2;
                                            (* Entry 'OFF': '<S2>:3937' *)
                                            Audio_Notification_Command := 0;
                                        END_IF;

                                END_CASE;

                            ELSE
                                (* During 'Silenced': '<S2>:3952' *)

                                IF Disable_Audio = 1 THEN 
                                    (* Transition: '<S2>:4611' *)
                                    (* Exit 'Silenced': '<S2>:3952' *)
                                    is_Audio := 1;
                                    (* Entry 'Disabled': '<S2>:3939' *)
                                    Audio_Notification_Command := 0;
                                ELSE 
                                    (* Transition: '<S2>:4605' *)

                                    IF (Highest_Level_Alarm > 2) AND (Disable_Audio = 0) THEN 
                                        (* Transition: '<S2>:4736' *)
                                        (* Exit 'Silenced': '<S2>:3952' *)
                                        is_Audio := 3;
                                        (* Entry 'ON': '<S2>:3938' *)
                                        Audio_Notification_Command := Audio_Level;
                                    ELSIF (audioTimer > Step_Scaling_Factor(inputVal := In29, b_step_size := 1.0)) OR (Disable_Audio = 0) THEN 
                                        (* Transition: '<S2>:3936' *)
                                        (* Transition: '<S2>:3928' *)
                                        (* Exit 'Silenced': '<S2>:3952' *)
                                        is_Audio := 2;
                                        (* Entry 'OFF': '<S2>:3937' *)
                                        Audio_Notification_Command := 0;
                                    ELSE 
                                        audioTimer := audioTimer + 1.0;
                                        Audio_Notification_Command := 0;
                                    END_IF;

                                END_IF;

                        END_CASE;

                    END_IF;

                ELSE
                    (* During 'NOT_ON': '<S2>:3899' *)

                    IF System_On THEN 
                        (* Transition: '<S2>:3900' *)
                        is_c2_Subsystem := 1;
                        (* Entry Internal 'Alarms': '<S2>:3907' *)
                        (* Entry Internal 'CheckAlarm': '<S2>:3953' *)
                        (* Entry Internal 'CancelAlarm': '<S2>:4012' *)
                        (* Transition: '<S2>:4013' *)
                        is_CancelAlarm := 1;
                        (* Entry Internal 'Level4': '<S2>:4019' *)
                        (* Entry Internal 'IsEmptyReservoir': '<S2>:4020' *)

                        IF In_Therapy AND Reservoir_Empty THEN 
                            (* Transition: '<S2>:4193' *)
                            is_IsEmptyReservoir := 2;
                        ELSE 
                            (* Transition: '<S2>:4021' *)
                            is_IsEmptyReservoir := 1;
                        END_IF;

                        (* Entry Internal 'IsHardwareError': '<S2>:4217' *)

                        IF ((((In19 OR In24) OR In23) OR In26) OR In28) OR In25 THEN 
                            (* Transition: '<S2>:4224' *)
                            is_IsHardwareError := 2;
                        ELSE 
                            (* Transition: '<S2>:4219' *)
                            is_IsHardwareError := 1;
                        END_IF;

                        (* Entry Internal 'IsEnviromentalError': '<S2>:4032' *)

                        IF (In17 OR In18) OR In16 THEN 
                            (* Transition: '<S2>:4198' *)
                            is_IsEnviromentalError := 2;
                        ELSE 
                            (* Transition: '<S2>:4033' *)
                            is_IsEnviromentalError := 1;
                        END_IF;

                        (* Entry Internal 'Level3': '<S2>:4038' *)
                        (* Entry 'IsOverInfusionFlowRate': '<S2>:4039' *)
                        (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                        (* Transition: '<S2>:4061' *)
                        overInfusion := 0;

                        IF In_Therapy THEN 
                            (* Transition: '<S2>:4062' *)

                            IF In11 > In8 THEN 
                                (* Transition: '<S2>:4063' *)
                                overInfusion := 1;
                            ELSIF USINT_TO_DINT(In11) > (((100 + USINT_TO_DINT(In34)) / 100) * USINT_TO_DINT(In1)) THEN 
                                (* Transition: '<S2>:4064' *)
                                overInfusion := 1;
                            ELSIF USINT_TO_DINT(In11) > (((100 + USINT_TO_DINT(In35)) / 100) * USINT_TO_DINT(In1)) THEN 
                                (* Transition: '<S2>:4065' *)
                                overInfusion := 2;
                            END_IF;

                        END_IF;

                        (* Entry Internal 'IsOverInfusionFlowRate': '<S2>:4039' *)

                        CASE overInfusion OF
                            1: 
                                (* Transition: '<S2>:4697' *)
                                is_IsOverInfusionFlowRate := 3;
                                (* Entry 'Yes': '<S2>:4051' *)
                            2: 
                                (* Transition: '<S2>:4699' *)
                                is_IsOverInfusionFlowRate := 2;
                                (* Entry 'Monitor': '<S2>:4053' *)
                                (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                (* Transition: '<S2>:4061' *)
                            ELSE
                                (* Transition: '<S2>:4041' *)
                                is_IsOverInfusionFlowRate := 1;
                                (* Entry 'Check': '<S2>:4052' *)
                                (* Graphical Function 'checkOverInfusionFlowRate': '<S2>:4055' *)
                                (* Transition: '<S2>:4061' *)
                        END_CASE;

                        (* Entry Internal 'IsOverInfusionVTBI': '<S2>:4066' *)

                        IF In_Therapy AND (Volume_Infused > VTBI_High) THEN 
                            (* Transition: '<S2>:4201' *)
                            is_IsOverInfusionVTBI := 2;
                        ELSE 
                            (* Transition: '<S2>:4067' *)
                            is_IsOverInfusionVTBI := 1;
                        END_IF;

                        (* Entry Internal 'IsAirInLine': '<S2>:4072' *)

                        IF Air_In_Line THEN 
                            (* Transition: '<S2>:4202' *)
                            is_IsAirInLine := 2;
                        ELSE 
                            (* Transition: '<S2>:4073' *)
                            is_IsAirInLine := 1;
                        END_IF;

                        (* Entry Internal 'IsOcclusion': '<S2>:4078' *)

                        IF Occlusion THEN 
                            (* Transition: '<S2>:4203' *)
                            is_IsOcclusion := 2;
                        ELSE 
                            (* Transition: '<S2>:4079' *)
                            is_IsOcclusion := 1;
                        END_IF;

                        (* Entry Internal 'IsDoor_Open': '<S2>:4084' *)

                        IF Door_Open THEN 
                            (* Transition: '<S2>:4204' *)
                            is_IsDoor_Open := 2;
                        ELSE 
                            (* Transition: '<S2>:4085' *)
                            is_IsDoor_Open := 1;
                        END_IF;

                        (* Entry Internal 'Level2': '<S2>:4090' *)
                        (* Entry Internal 'IsLowReservoir': '<S2>:4091' *)

                        IF In_Therapy AND (In40 < In31) THEN 
                            (* Transition: '<S2>:4205' *)
                            is_IsLowReservoir := 2;
                        ELSE 
                            (* Transition: '<S2>:4092' *)
                            is_IsLowReservoir := 1;
                        END_IF;

                        (* Entry Internal 'Level1': '<S2>:4113' *)
                        (* Entry 'IsUnderInfusion': '<S2>:4114' *)
                        (* Graphical Function 'checkUnderInfusion': '<S2>:4130' *)
                        (* Transition: '<S2>:4137' *)
                        overInfusion := 0;

                        IF In_Therapy THEN 
                            (* Transition: '<S2>:4139' *)

                            IF In11 < In9 THEN 
                                (* Transition: '<S2>:4138' *)
                                overInfusion := 1;
                            ELSIF USINT_TO_DINT(In11) < (USINT_TO_DINT(In1) - (UDINT_TO_DINT(USINT_TO_UDINT(In34) / 100) * USINT_TO_DINT(In1))) THEN 
                                (* Transition: '<S2>:4140' *)
                                overInfusion := 1;
                            ELSIF USINT_TO_DINT(In11) < (USINT_TO_DINT(In1) - (UDINT_TO_DINT(USINT_TO_UDINT(In35) / 100) * USINT_TO_DINT(In1))) THEN 
                                (* Transition: '<S2>:4142' *)
                                overInfusion := 2;
                            END_IF;

                        END_IF;

                        (* Entry Internal 'IsUnderInfusion': '<S2>:4114' *)

                        CASE overInfusion OF
                            1: 
                                (* Transition: '<S2>:4709' *)
                                is_IsUnderInfusion := 3;
                                (* Entry 'Yes': '<S2>:4126' *)
                            2: 
                                (* Transition: '<S2>:4710' *)
                                is_IsUnderInfusion := 2;
                                (* Entry 'Monitor': '<S2>:4128' *)
                                (* Graphical Function 'checkUnderInfusion': '<S2>:4130' *)
                                (* Transition: '<S2>:4137' *)
                            ELSE
                                (* Transition: '<S2>:4116' *)
                                is_IsUnderInfusion := 1;
                                (* Entry 'Check': '<S2>:4127' *)
                        END_CASE;

                        (* Entry Internal 'IsFlowRateNotStable': '<S2>:4143' *)

                        IF In_Therapy AND In12 THEN 
                            (* Transition: '<S2>:4210' *)
                            is_IsFlowRateNotStable := 2;
                        ELSE 
                            (* Transition: '<S2>:4144' *)
                            is_IsFlowRateNotStable := 1;
                        END_IF;

                        (* Entry Internal 'IsIdleTimeExceeded': '<S2>:4149' *)

                        IF (In2 = 1) AND (Step_Scaling_Factor(inputVal := In37, b_step_size := 1.0) = 1.0) THEN 
                            (* Transition: '<S2>:4749' *)
                            is_IsIdleTimeExceeded := 2;
                        ELSIF In2 = 1 THEN 
                            (* Transition: '<S2>:4748' *)
                            idletimer := 0.0;
                            is_IsIdleTimeExceeded := 3;
                            (* Entry 'counting': '<S2>:4745' *)
                            idletimer := idletimer + 1.0;
                        ELSE 
                            (* Transition: '<S2>:4150' *)
                            is_IsIdleTimeExceeded := 1;
                            (* Entry 'No': '<S2>:4153' *)
                            idletimer := 0.0;
                        END_IF;

                        (* Entry Internal 'IsPausedTimeExceeded': '<S2>:4155' *)

                        IF (((In2 = 6) OR (In2 = 7)) OR (In2 = 8)) AND (Step_Scaling_Factor(inputVal := In38, b_step_size := 1.0) = 1.0) THEN 
                            (* Transition: '<S2>:4760' *)
                            is_IsPausedTimeExceeded := 2;
                        ELSIF ((In2 = 6) OR (In2 = 7)) OR (In2 = 8) THEN 
                            (* Transition: '<S2>:4759' *)
                            pausedtimer := 0.0;
                            is_IsPausedTimeExceeded := 3;
                            (* Entry 'counting': '<S2>:4752' *)
                            pausedtimer := pausedtimer + 1.0;
                        ELSE 
                            (* Transition: '<S2>:4753' *)
                            is_IsPausedTimeExceeded := 1;
                            (* Entry 'No': '<S2>:4756' *)
                            pausedtimer := 0.0;
                        END_IF;

                        (* Entry Internal 'IsConfigTimeWarning': '<S2>:4161' *)

                        IF In43 > Step_Scaling_Factor(inputVal := In36, b_step_size := 1.0) THEN 
                            (* Transition: '<S2>:4207' *)
                            is_IsConfigTimeWarning := 2;
                        ELSE 
                            (* Transition: '<S2>:4162' *)
                            is_IsConfigTimeWarning := 1;
                        END_IF;

                        (* Entry Internal 'IsBatteryError': '<S2>:4167' *)

                        IF (In20 OR In21) OR In22 THEN 
                            (* Transition: '<S2>:4212' *)
                            is_IsBatteryError := 2;
                        ELSE 
                            (* Transition: '<S2>:4168' *)
                            is_IsBatteryError := 1;
                        END_IF;

                        (* Entry Internal 'IsPumpHot': '<S2>:4173' *)

                        IF In27 THEN 
                            (* Transition: '<S2>:4208' *)
                            is_IsPumpHot := 2;
                        ELSE 
                            (* Transition: '<S2>:4174' *)
                            is_IsPumpHot := 1;
                        END_IF;

                        (* Entry Internal 'IsLoggingFailed': '<S2>:4179' *)

                        IF In5 THEN 
                            (* Transition: '<S2>:4213' *)
                            is_IsLoggingFailed := 2;
                        ELSE 
                            (* Transition: '<S2>:4180' *)
                            is_IsLoggingFailed := 1;
                        END_IF;

                        (* Entry Internal 'IsSystemMonitorFailed': '<S2>:4185' *)

                        IF In4 THEN 
                            (* Transition: '<S2>:4209' *)
                            is_IsSystemMonitorFailed := 2;
                        ELSE 
                            (* Transition: '<S2>:4186' *)
                            is_IsSystemMonitorFailed := 1;
                        END_IF;

                        (* Entry 'SetAlarmStatus': '<S2>:4018' *)
                        (* Graphical Function 'setHighestAlarm': '<S2>:4098' *)
                        (* Transition: '<S2>:4104' *)
                        Highest_Level_Alarm := Max_Alarm_Level;
                        (* Graphical Function 'setCurrentAlarm': '<S2>:4785' *)
                        (* Transition: '<S2>:4811' *)
                        currentAlarm := 0;
                        Max_Alarm_Level := 0;

                        IF is_IsEmptyReservoir = 2 THEN 
                            (* Transition: '<S2>:4810' *)
                            currentAlarm := 1;
                            Max_Alarm_Level := 4;
                        ELSIF is_IsEnviromentalError = 2 THEN 
                            (* Transition: '<S2>:4808' *)
                            currentAlarm := 2;
                            Max_Alarm_Level := 4;
                        ELSIF is_IsHardwareError = 2 THEN 
                            (* Transition: '<S2>:4837' *)
                            currentAlarm := 3;
                            Max_Alarm_Level := 4;
                        ELSIF is_IsOverInfusionFlowRate = 3 THEN 
                            (* Transition: '<S2>:4835' *)
                            currentAlarm := 4;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsOverInfusionVTBI = 2 THEN 
                            (* Transition: '<S2>:4834' *)
                            currentAlarm := 5;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsAirInLine = 2 THEN 
                            (* Transition: '<S2>:4831' *)
                            currentAlarm := 6;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsOcclusion = 2 THEN 
                            (* Transition: '<S2>:4830' *)
                            currentAlarm := 7;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsDoor_Open = 2 THEN 
                            (* Transition: '<S2>:4828' *)
                            currentAlarm := 8;
                            Max_Alarm_Level := 3;
                        ELSIF is_IsLowReservoir = 2 THEN 
                            (* Transition: '<S2>:4825' *)
                            currentAlarm := 9;
                            Max_Alarm_Level := 2;
                        ELSIF is_IsUnderInfusion = 3 THEN 
                            (* Transition: '<S2>:4787' *)
                            currentAlarm := 10;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsFlowRateNotStable = 2 THEN 
                            (* Transition: '<S2>:4821' *)
                            currentAlarm := 11;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsIdleTimeExceeded = 2 THEN 
                            (* Transition: '<S2>:4820' *)
                            currentAlarm := 12;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsPausedTimeExceeded = 2 THEN 
                            (* Transition: '<S2>:4817' *)
                            currentAlarm := 13;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsConfigTimeWarning = 2 THEN 
                            (* Transition: '<S2>:4816' *)
                            currentAlarm := 14;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsBatteryError = 2 THEN 
                            (* Transition: '<S2>:4799' *)
                            currentAlarm := 15;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsPumpHot = 2 THEN 
                            (* Transition: '<S2>:4798' *)
                            currentAlarm := 16;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsLoggingFailed = 2 THEN 
                            (* Transition: '<S2>:4813' *)
                            currentAlarm := 17;
                            Max_Alarm_Level := 1;
                        ELSIF is_IsSystemMonitorFailed = 2 THEN 
                            (* Transition: '<S2>:4812' *)
                            currentAlarm := 18;
                            Max_Alarm_Level := 1;
                        END_IF;

                        (* Entry Internal 'Notification': '<S2>:3908' *)
                        (* Entry Internal 'Visual': '<S2>:3909' *)

                        IF currentAlarm > 0 THEN 
                            (* Transition: '<S2>:4608' *)
                            is_Visual := 1;
                            (* Entry 'AlarmDisplay': '<S2>:3913' *)
                            Visual_Notification_Message := currentAlarm;
                        ELSE 
                            (* Transition: '<S2>:3910' *)
                            is_Visual := 2;
                            (* Entry 'OFF': '<S2>:3914' *)
                            Visual_Notification_Message := 0;
                        END_IF;

                        (* Entry 'Audio': '<S2>:3919' *)
                        Is_Audio_Disabled := Disable_Audio;
                        (* Entry Internal 'Audio': '<S2>:3919' *)

                        CASE Disable_Audio OF
                            1: 
                                (* Transition: '<S2>:4599' *)
                                is_Audio := 1;
                                (* Entry 'Disabled': '<S2>:3939' *)
                                Audio_Notification_Command := 0;
                            2: 
                                (* Transition: '<S2>:4600' *)
                                is_Audio := 4;
                                (* Entry 'Silenced': '<S2>:3952' *)
                                audioTimer := 0.0;
                                Audio_Notification_Command := 0;
                                audioTimer := audioTimer + 1.0;
                            ELSE

                                IF (Highest_Level_Alarm > 2) AND (Disable_Audio = 0) THEN 
                                    (* Transition: '<S2>:4601' *)
                                    is_Audio := 3;
                                    (* Entry 'ON': '<S2>:3938' *)
                                    Audio_Notification_Command := Audio_Level;
                                ELSE 
                                    (* Transition: '<S2>:3924' *)
                                    is_Audio := 2;
                                    (* Entry 'OFF': '<S2>:3937' *)
                                    Audio_Notification_Command := 0;
                                END_IF;

                        END_CASE;

                    END_IF;

            END_CASE;

        END_IF;

        (* End of Chart: '<S1>/Alarm  Sub-System' *)
END_CASE;

]]>
</xhtml>
               </ST>
            </body>
         </pou>
         <pou name="Step_Scaling_Factor" pouType="function">
            <interface>
               <returnType>
                  <LREAL/>
               </returnType>
               <inputVars>
                  <variable name="inputVal">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
                  <variable name="b_step_size">
                     <type>
                        <LREAL/>
                     </type>
                  </variable>
               </inputVars>
               <localVars/>
            </interface>
            <body>
               <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
<![CDATA[
(* Graphical Function 'Step_Scaling_Factor': '<S2>:4782' *)
(* Transition: '<S2>:4776' *)
Step_Scaling_Factor := inputVal / b_step_size;
]]>
</xhtml>
               </ST>
            </body>
         </pou>
      </pous>
   </types>
   <instances>
      <configurations/>
   </instances>
</project>