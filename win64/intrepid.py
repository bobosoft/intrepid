# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_intrepid', [dirname(__file__)])
        except ImportError:
            import _intrepid
            return _intrepid
        if fp is not None:
            try:
                _mod = imp.load_module('_intrepid', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _intrepid = swig_import_helper()
    del swig_import_helper
else:
    import _intrepid
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_intrepid.INT_ENGINE_RESULT_UNKNOWN_swigconstant(_intrepid)
INT_ENGINE_RESULT_UNKNOWN = _intrepid.INT_ENGINE_RESULT_UNKNOWN

_intrepid.INT_ENGINE_RESULT_REACHABLE_swigconstant(_intrepid)
INT_ENGINE_RESULT_REACHABLE = _intrepid.INT_ENGINE_RESULT_REACHABLE

_intrepid.INT_ENGINE_RESULT_UNREACHABLE_swigconstant(_intrepid)
INT_ENGINE_RESULT_UNREACHABLE = _intrepid.INT_ENGINE_RESULT_UNREACHABLE

def mk_ctx():
    return _intrepid.mk_ctx()
mk_ctx = _intrepid.mk_ctx

def del_ctx(ctx):
    return _intrepid.del_ctx(ctx)
del_ctx = _intrepid.del_ctx

def mk_circuit(ctx, name):
    return _intrepid.mk_circuit(ctx, name)
mk_circuit = _intrepid.mk_circuit

def mk_circuit_miter(ctx, circ1, circ2):
    return _intrepid.mk_circuit_miter(ctx, circ1, circ2)
mk_circuit_miter = _intrepid.mk_circuit_miter

def mk_circuit_miter_map(ctx, circ1, circ2, inputs1, inputs2, inputs_size, outputs1, outputs2, outputs_size):
    return _intrepid.mk_circuit_miter_map(ctx, circ1, circ2, inputs1, inputs2, inputs_size, outputs1, outputs2, outputs_size)
mk_circuit_miter_map = _intrepid.mk_circuit_miter_map

def mk_engine_bmc(ctx, circ, last_depth):
    return _intrepid.mk_engine_bmc(ctx, circ, last_depth)
mk_engine_bmc = _intrepid.mk_engine_bmc

def set_bmc_current_depth(engine, depth):
    return _intrepid.set_bmc_current_depth(engine, depth)
set_bmc_current_depth = _intrepid.set_bmc_current_depth

def bmc_add_target(ctx, engine, target):
    return _intrepid.bmc_add_target(ctx, engine, target)
bmc_add_target = _intrepid.bmc_add_target

def bmc_reach_targets(engine):
    return _intrepid.bmc_reach_targets(engine)
bmc_reach_targets = _intrepid.bmc_reach_targets

def mk_engine_br(ctx, circ):
    return _intrepid.mk_engine_br(ctx, circ)
mk_engine_br = _intrepid.mk_engine_br

def br_add_target(ctx, engine, target):
    return _intrepid.br_add_target(ctx, engine, target)
br_add_target = _intrepid.br_add_target

def br_reach_targets(engine):
    return _intrepid.br_reach_targets(engine)
br_reach_targets = _intrepid.br_reach_targets

def mk_boolean_type(ctx):
    return _intrepid.mk_boolean_type(ctx)
mk_boolean_type = _intrepid.mk_boolean_type

def mk_int8_type(ctx):
    return _intrepid.mk_int8_type(ctx)
mk_int8_type = _intrepid.mk_int8_type

def mk_int16_type(ctx):
    return _intrepid.mk_int16_type(ctx)
mk_int16_type = _intrepid.mk_int16_type

def mk_int32_type(ctx):
    return _intrepid.mk_int32_type(ctx)
mk_int32_type = _intrepid.mk_int32_type

def mk_uint8_type(ctx):
    return _intrepid.mk_uint8_type(ctx)
mk_uint8_type = _intrepid.mk_uint8_type

def mk_uint16_type(ctx):
    return _intrepid.mk_uint16_type(ctx)
mk_uint16_type = _intrepid.mk_uint16_type

def mk_uint32_type(ctx):
    return _intrepid.mk_uint32_type(ctx)
mk_uint32_type = _intrepid.mk_uint32_type

def mk_real_type(ctx):
    return _intrepid.mk_real_type(ctx)
mk_real_type = _intrepid.mk_real_type

def mk_double_type(ctx):
    return _intrepid.mk_double_type(ctx)
mk_double_type = _intrepid.mk_double_type

def mk_undef(ctx):
    return _intrepid.mk_undef(ctx)
mk_undef = _intrepid.mk_undef

def mk_true(ctx):
    return _intrepid.mk_true(ctx)
mk_true = _intrepid.mk_true

def mk_false(ctx):
    return _intrepid.mk_false(ctx)
mk_false = _intrepid.mk_false

def mk_number(ctx, value, type):
    return _intrepid.mk_number(ctx, value, type)
mk_number = _intrepid.mk_number

def mk_not(ctx, x):
    return _intrepid.mk_not(ctx, x)
mk_not = _intrepid.mk_not

def mk_and(ctx, x, y):
    return _intrepid.mk_and(ctx, x, y)
mk_and = _intrepid.mk_and

def mk_or(ctx, x, y):
    return _intrepid.mk_or(ctx, x, y)
mk_or = _intrepid.mk_or

def mk_xor(ctx, x, y):
    return _intrepid.mk_xor(ctx, x, y)
mk_xor = _intrepid.mk_xor

def mk_iff(ctx, x, y):
    return _intrepid.mk_iff(ctx, x, y)
mk_iff = _intrepid.mk_iff

def mk_eq(ctx, x, y):
    return _intrepid.mk_eq(ctx, x, y)
mk_eq = _intrepid.mk_eq

def mk_leq(ctx, x, y):
    return _intrepid.mk_leq(ctx, x, y)
mk_leq = _intrepid.mk_leq

def mk_lt(ctx, x, y):
    return _intrepid.mk_lt(ctx, x, y)
mk_lt = _intrepid.mk_lt

def mk_geq(ctx, x, y):
    return _intrepid.mk_geq(ctx, x, y)
mk_geq = _intrepid.mk_geq

def mk_gt(ctx, x, y):
    return _intrepid.mk_gt(ctx, x, y)
mk_gt = _intrepid.mk_gt

def mk_input(ctx, circ, name, type):
    return _intrepid.mk_input(ctx, circ, name, type)
mk_input = _intrepid.mk_input

def mk_output(arg1, circ, name, net):
    return _intrepid.mk_output(arg1, circ, name, net)
mk_output = _intrepid.mk_output

def mk_latch(ctx, circ, name, type):
    return _intrepid.mk_latch(ctx, circ, name, type)
mk_latch = _intrepid.mk_latch

def set_latch_init_next(ctx, circ, latch, init, next):
    return _intrepid.set_latch_init_next(ctx, circ, latch, init, next)
set_latch_init_next = _intrepid.set_latch_init_next

def get_inputs_size(circ):
    return _intrepid.get_inputs_size(circ)
get_inputs_size = _intrepid.get_inputs_size

def get_output(circ, n):
    return _intrepid.get_output(circ, n)
get_output = _intrepid.get_output

def get_outputs_size(circ):
    return _intrepid.get_outputs_size(circ)
get_outputs_size = _intrepid.get_outputs_size

def get_assumptions_size(circ):
    return _intrepid.get_assumptions_size(circ)
get_assumptions_size = _intrepid.get_assumptions_size

def get_assumption(circ, n):
    return _intrepid.get_assumption(circ, n)
get_assumption = _intrepid.get_assumption

def get_proof_objectives_size(circ):
    return _intrepid.get_proof_objectives_size(circ)
get_proof_objectives_size = _intrepid.get_proof_objectives_size

def get_proof_objective(circ, n):
    return _intrepid.get_proof_objective(circ, n)
get_proof_objective = _intrepid.get_proof_objective

def get_test_objectives_size(circ):
    return _intrepid.get_test_objectives_size(circ)
get_test_objectives_size = _intrepid.get_test_objectives_size

def get_test_objective(circ, n):
    return _intrepid.get_test_objective(circ, n)
get_test_objective = _intrepid.get_test_objective

def is_undef(ctx, net):
    return _intrepid.is_undef(ctx, net)
is_undef = _intrepid.is_undef

def is_true(ctx, net):
    return _intrepid.is_true(ctx, net)
is_true = _intrepid.is_true

def is_false(ctx, net):
    return _intrepid.is_false(ctx, net)
is_false = _intrepid.is_false

def is_number(ctx, net):
    return _intrepid.is_number(ctx, net)
is_number = _intrepid.is_number

def is_not(ctx, x):
    return _intrepid.is_not(ctx, x)
is_not = _intrepid.is_not

def is_and(ctx, x):
    return _intrepid.is_and(ctx, x)
is_and = _intrepid.is_and

def is_or(ctx, x):
    return _intrepid.is_or(ctx, x)
is_or = _intrepid.is_or

def is_xor(ctx, x):
    return _intrepid.is_xor(ctx, x)
is_xor = _intrepid.is_xor

def is_iff(ctx, x):
    return _intrepid.is_iff(ctx, x)
is_iff = _intrepid.is_iff

def is_input(ctx, circ, net):
    return _intrepid.is_input(ctx, circ, net)
is_input = _intrepid.is_input

def is_output(ctx, circ, net):
    return _intrepid.is_output(ctx, circ, net)
is_output = _intrepid.is_output

def is_latch(ctx, circ, net):
    return _intrepid.is_latch(ctx, circ, net)
is_latch = _intrepid.is_latch

def get_latch_init(arg1, circ, latch):
    return _intrepid.get_latch_init(arg1, circ, latch)
get_latch_init = _intrepid.get_latch_init

def get_latch_next(arg1, circ, latch):
    return _intrepid.get_latch_next(arg1, circ, latch)
get_latch_next = _intrepid.get_latch_next
# This file is compatible with both classic and new-style classes.


