# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_api', [dirname(__file__)])
        except ImportError:
            import _api
            return _api
        if fp is not None:
            try:
                _mod = imp.load_module('_api', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _api = swig_import_helper()
    del swig_import_helper
else:
    import _api
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_api.INT_ENGINE_RESULT_UNKNOWN_swigconstant(_api)
INT_ENGINE_RESULT_UNKNOWN = _api.INT_ENGINE_RESULT_UNKNOWN

_api.INT_ENGINE_RESULT_REACHABLE_swigconstant(_api)
INT_ENGINE_RESULT_REACHABLE = _api.INT_ENGINE_RESULT_REACHABLE

_api.INT_ENGINE_RESULT_UNREACHABLE_swigconstant(_api)
INT_ENGINE_RESULT_UNREACHABLE = _api.INT_ENGINE_RESULT_UNREACHABLE

_api.INT_KIND_UNKNOWN_swigconstant(_api)
INT_KIND_UNKNOWN = _api.INT_KIND_UNKNOWN

_api.INT_KIND_INPUT_swigconstant(_api)
INT_KIND_INPUT = _api.INT_KIND_INPUT

_api.INT_KIND_NUMBER_swigconstant(_api)
INT_KIND_NUMBER = _api.INT_KIND_NUMBER

_api.INT_KIND_AND_swigconstant(_api)
INT_KIND_AND = _api.INT_KIND_AND

_api.INT_KIND_OR_swigconstant(_api)
INT_KIND_OR = _api.INT_KIND_OR

_api.INT_KIND_NOT_swigconstant(_api)
INT_KIND_NOT = _api.INT_KIND_NOT

_api.INT_KIND_IFF_swigconstant(_api)
INT_KIND_IFF = _api.INT_KIND_IFF

_api.INT_KIND_XOR_swigconstant(_api)
INT_KIND_XOR = _api.INT_KIND_XOR

_api.INT_KIND_ADD_swigconstant(_api)
INT_KIND_ADD = _api.INT_KIND_ADD

_api.INT_KIND_SUB_swigconstant(_api)
INT_KIND_SUB = _api.INT_KIND_SUB

_api.INT_KIND_MUL_swigconstant(_api)
INT_KIND_MUL = _api.INT_KIND_MUL

_api.INT_KIND_DIV_swigconstant(_api)
INT_KIND_DIV = _api.INT_KIND_DIV

_api.INT_KIND_MOD_swigconstant(_api)
INT_KIND_MOD = _api.INT_KIND_MOD

_api.INT_KIND_EQ_swigconstant(_api)
INT_KIND_EQ = _api.INT_KIND_EQ

_api.INT_KIND_LEQ_swigconstant(_api)
INT_KIND_LEQ = _api.INT_KIND_LEQ

_api.INT_KIND_LT_swigconstant(_api)
INT_KIND_LT = _api.INT_KIND_LT

_api.INT_KIND_GEQ_swigconstant(_api)
INT_KIND_GEQ = _api.INT_KIND_GEQ

_api.INT_KIND_GT_swigconstant(_api)
INT_KIND_GT = _api.INT_KIND_GT

_api.INT_KIND_ITE_swigconstant(_api)
INT_KIND_ITE = _api.INT_KIND_ITE

def mk_ctx():
    """mk_ctx() -> Int_ctx"""
    return _api.mk_ctx()

def del_ctx(ctx):
    """
    del_ctx(Int_ctx ctx)

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.del_ctx(ctx)

def mk_circuit(ctx, name):
    """
    mk_circuit(Int_ctx ctx, char const * name) -> Int_circuit

    Parameters
    ----------
    ctx: Int_ctx
    name: char const *

    """
    return _api.mk_circuit(ctx, name)

def mk_circuit_from_st_string(ctx, ststr):
    """
    mk_circuit_from_st_string(Int_ctx ctx, char const * ststr) -> Int_circuit

    Parameters
    ----------
    ctx: Int_ctx
    ststr: char const *

    """
    return _api.mk_circuit_from_st_string(ctx, ststr)

def mk_circuit_from_st_file(ctx, filename):
    """
    mk_circuit_from_st_file(Int_ctx ctx, char const * filename) -> Int_circuit

    Parameters
    ----------
    ctx: Int_ctx
    filename: char const *

    """
    return _api.mk_circuit_from_st_file(ctx, filename)

def mk_circuit_miter(ctx, circ1, circ2):
    """
    mk_circuit_miter(Int_ctx ctx, Int_circuit circ1, Int_circuit circ2) -> Int_circuit

    Parameters
    ----------
    ctx: Int_ctx
    circ1: Int_circuit
    circ2: Int_circuit

    """
    return _api.mk_circuit_miter(ctx, circ1, circ2)

def mk_circuit_miter_map(ctx, circ1, circ2, inputs1, inputs2, inputs_size, outputs1, outputs2, outputs_size):
    """
    mk_circuit_miter_map(Int_ctx ctx, Int_circuit circ1, Int_circuit circ2, Int_net const * inputs1, Int_net const * inputs2, unsigned int inputs_size, Int_net const * outputs1, Int_net const * outputs2, unsigned int outputs_size) -> Int_circuit

    Parameters
    ----------
    ctx: Int_ctx
    circ1: Int_circuit
    circ2: Int_circuit
    inputs1: Int_net const *
    inputs2: Int_net const *
    inputs_size: unsigned int
    outputs1: Int_net const *
    outputs2: Int_net const *
    outputs_size: unsigned int

    """
    return _api.mk_circuit_miter_map(ctx, circ1, circ2, inputs1, inputs2, inputs_size, outputs1, outputs2, outputs_size)

def mk_engine_bmc(ctx, circ, last_depth):
    """
    mk_engine_bmc(Int_ctx ctx, Int_circuit circ, unsigned int last_depth) -> Int_engine_bmc

    Parameters
    ----------
    ctx: Int_ctx
    circ: Int_circuit
    last_depth: unsigned int

    """
    return _api.mk_engine_bmc(ctx, circ, last_depth)

def set_bmc_current_depth(engine, depth):
    """
    set_bmc_current_depth(Int_engine_bmc engine, unsigned int depth)

    Parameters
    ----------
    engine: Int_engine_bmc
    depth: unsigned int

    """
    return _api.set_bmc_current_depth(engine, depth)

def bmc_add_target(ctx, engine, target):
    """
    bmc_add_target(Int_ctx ctx, Int_engine_bmc engine, Int_net target)

    Parameters
    ----------
    ctx: Int_ctx
    engine: Int_engine_bmc
    target: Int_net

    """
    return _api.bmc_add_target(ctx, engine, target)

def bmc_reach_targets(engine):
    """
    bmc_reach_targets(Int_engine_bmc engine) -> Int_engine_result

    Parameters
    ----------
    engine: Int_engine_bmc

    """
    return _api.bmc_reach_targets(engine)

def mk_engine_br(ctx, circ):
    """
    mk_engine_br(Int_ctx ctx, Int_circuit circ) -> Int_engine_br

    Parameters
    ----------
    ctx: Int_ctx
    circ: Int_circuit

    """
    return _api.mk_engine_br(ctx, circ)

def br_add_target(ctx, engine, target):
    """
    br_add_target(Int_ctx ctx, Int_engine_br engine, Int_net target)

    Parameters
    ----------
    ctx: Int_ctx
    engine: Int_engine_br
    target: Int_net

    """
    return _api.br_add_target(ctx, engine, target)

def br_reach_targets(engine):
    """
    br_reach_targets(Int_engine_br engine) -> Int_engine_result

    Parameters
    ----------
    engine: Int_engine_br

    """
    return _api.br_reach_targets(engine)

def bmc_last_reached_targets_number(engine):
    """
    bmc_last_reached_targets_number(Int_engine_bmc engine) -> unsigned int

    Parameters
    ----------
    engine: Int_engine_bmc

    """
    return _api.bmc_last_reached_targets_number(engine)

def bmc_last_reached_target(engine, n):
    """
    bmc_last_reached_target(Int_engine_bmc engine, unsigned int n) -> Int_net

    Parameters
    ----------
    engine: Int_engine_bmc
    n: unsigned int

    """
    return _api.bmc_last_reached_target(engine, n)

def br_last_reached_targets_number(engine):
    """
    br_last_reached_targets_number(Int_engine_br engine) -> unsigned int

    Parameters
    ----------
    engine: Int_engine_br

    """
    return _api.br_last_reached_targets_number(engine)

def br_last_reached_target(engine, n):
    """
    br_last_reached_target(Int_engine_br engine, unsigned int n) -> Int_net

    Parameters
    ----------
    engine: Int_engine_br
    n: unsigned int

    """
    return _api.br_last_reached_target(engine, n)

def bmc_get_counterexample(ctx, arg2, target):
    """
    bmc_get_counterexample(Int_ctx ctx, Int_engine_bmc arg2, Int_net target) -> Int_counterexample

    Parameters
    ----------
    ctx: Int_ctx
    arg2: Int_engine_bmc
    target: Int_net

    """
    return _api.bmc_get_counterexample(ctx, arg2, target)

def br_get_counterexample(ctx, arg2, target):
    """
    br_get_counterexample(Int_ctx ctx, Int_engine_br arg2, Int_net target) -> Int_counterexample

    Parameters
    ----------
    ctx: Int_ctx
    arg2: Int_engine_br
    target: Int_net

    """
    return _api.br_get_counterexample(ctx, arg2, target)

def counterexample_get_value_for_net(ctx, cex, net, depth):
    """
    counterexample_get_value_for_net(Int_ctx ctx, Int_counterexample cex, Int_net net, unsigned int depth) -> Int_value

    Parameters
    ----------
    ctx: Int_ctx
    cex: Int_counterexample
    net: Int_net
    depth: unsigned int

    """
    return _api.counterexample_get_value_for_net(ctx, cex, net, depth)

def counterexample_get_max_depth(cex):
    """
    counterexample_get_max_depth(Int_counterexample cex) -> unsigned int

    Parameters
    ----------
    cex: Int_counterexample

    """
    return _api.counterexample_get_max_depth(cex)

def value_get_as_string(ctx, value):
    """
    value_get_as_string(Int_ctx ctx, Int_value value)

    Parameters
    ----------
    ctx: Int_ctx
    value: Int_value

    """
    return _api.value_get_as_string(ctx, value)

def mk_simulator(ctx, circ):
    """
    mk_simulator(Int_ctx ctx, Int_circuit circ) -> Int_simulator

    Parameters
    ----------
    ctx: Int_ctx
    circ: Int_circuit

    """
    return _api.mk_simulator(ctx, circ)

def simulator_add_target(ctx, simulator, target):
    """
    simulator_add_target(Int_ctx ctx, Int_simulator simulator, Int_net target)

    Parameters
    ----------
    ctx: Int_ctx
    simulator: Int_simulator
    target: Int_net

    """
    return _api.simulator_add_target(ctx, simulator, target)

def simulator_simulate(simulator, cex, depth):
    """
    simulator_simulate(Int_simulator simulator, Int_counterexample cex, unsigned int depth)

    Parameters
    ----------
    simulator: Int_simulator
    cex: Int_counterexample
    depth: unsigned int

    """
    return _api.simulator_simulate(simulator, cex, depth)

def simulator_last_reached_targets_number(simulator):
    """
    simulator_last_reached_targets_number(Int_simulator simulator) -> unsigned int

    Parameters
    ----------
    simulator: Int_simulator

    """
    return _api.simulator_last_reached_targets_number(simulator)

def simulator_last_reached_target(simulator, n):
    """
    simulator_last_reached_target(Int_simulator simulator, unsigned int n) -> Int_net

    Parameters
    ----------
    simulator: Int_simulator
    n: unsigned int

    """
    return _api.simulator_last_reached_target(simulator, n)

def mk_boolean_type(ctx):
    """
    mk_boolean_type(Int_ctx ctx) -> Int_type

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_boolean_type(ctx)

def mk_int8_type(ctx):
    """
    mk_int8_type(Int_ctx ctx) -> Int_type

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_int8_type(ctx)

def mk_int16_type(ctx):
    """
    mk_int16_type(Int_ctx ctx) -> Int_type

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_int16_type(ctx)

def mk_int32_type(ctx):
    """
    mk_int32_type(Int_ctx ctx) -> Int_type

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_int32_type(ctx)

def mk_uint8_type(ctx):
    """
    mk_uint8_type(Int_ctx ctx) -> Int_type

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_uint8_type(ctx)

def mk_uint16_type(ctx):
    """
    mk_uint16_type(Int_ctx ctx) -> Int_type

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_uint16_type(ctx)

def mk_uint32_type(ctx):
    """
    mk_uint32_type(Int_ctx ctx) -> Int_type

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_uint32_type(ctx)

def mk_real_type(ctx):
    """
    mk_real_type(Int_ctx ctx) -> Int_type

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_real_type(ctx)

def mk_double_type(ctx):
    """
    mk_double_type(Int_ctx ctx) -> Int_type

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_double_type(ctx)

def mk_undef(ctx):
    """
    mk_undef(Int_ctx ctx) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_undef(ctx)

def mk_true(ctx):
    """
    mk_true(Int_ctx ctx) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_true(ctx)

def mk_false(ctx):
    """
    mk_false(Int_ctx ctx) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx

    """
    return _api.mk_false(ctx)

def mk_number(ctx, value, type):
    """
    mk_number(Int_ctx ctx, char const * value, Int_type type) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    value: char const *
    type: Int_type

    """
    return _api.mk_number(ctx, value, type)

def mk_not(ctx, x):
    """
    mk_not(Int_ctx ctx, Int_net x) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.mk_not(ctx, x)

def mk_and(ctx, x, y):
    """
    mk_and(Int_ctx ctx, Int_net x, Int_net y) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net
    y: Int_net

    """
    return _api.mk_and(ctx, x, y)

def mk_or(ctx, x, y):
    """
    mk_or(Int_ctx ctx, Int_net x, Int_net y) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net
    y: Int_net

    """
    return _api.mk_or(ctx, x, y)

def mk_xor(ctx, x, y):
    """
    mk_xor(Int_ctx ctx, Int_net x, Int_net y) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net
    y: Int_net

    """
    return _api.mk_xor(ctx, x, y)

def mk_iff(ctx, x, y):
    """
    mk_iff(Int_ctx ctx, Int_net x, Int_net y) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net
    y: Int_net

    """
    return _api.mk_iff(ctx, x, y)

def mk_eq(ctx, x, y):
    """
    mk_eq(Int_ctx ctx, Int_net x, Int_net y) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net
    y: Int_net

    """
    return _api.mk_eq(ctx, x, y)

def mk_leq(ctx, x, y):
    """
    mk_leq(Int_ctx ctx, Int_net x, Int_net y) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net
    y: Int_net

    """
    return _api.mk_leq(ctx, x, y)

def mk_lt(ctx, x, y):
    """
    mk_lt(Int_ctx ctx, Int_net x, Int_net y) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net
    y: Int_net

    """
    return _api.mk_lt(ctx, x, y)

def mk_geq(ctx, x, y):
    """
    mk_geq(Int_ctx ctx, Int_net x, Int_net y) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net
    y: Int_net

    """
    return _api.mk_geq(ctx, x, y)

def mk_gt(ctx, x, y):
    """
    mk_gt(Int_ctx ctx, Int_net x, Int_net y) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net
    y: Int_net

    """
    return _api.mk_gt(ctx, x, y)

def mk_input(ctx, circ, name, type):
    """
    mk_input(Int_ctx ctx, Int_circuit circ, char const * name, Int_type type) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    circ: Int_circuit
    name: char const *
    type: Int_type

    """
    return _api.mk_input(ctx, circ, name, type)

def mk_output(arg1, circ, name, net):
    """
    mk_output(Int_ctx arg1, Int_circuit circ, char const * name, Int_net net)

    Parameters
    ----------
    arg1: Int_ctx
    circ: Int_circuit
    name: char const *
    net: Int_net

    """
    return _api.mk_output(arg1, circ, name, net)

def mk_latch(ctx, circ, name, type):
    """
    mk_latch(Int_ctx ctx, Int_circuit circ, char const * name, Int_type type) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    circ: Int_circuit
    name: char const *
    type: Int_type

    """
    return _api.mk_latch(ctx, circ, name, type)

def set_latch_init_next(ctx, circ, latch, init, next):
    """
    set_latch_init_next(Int_ctx ctx, Int_circuit circ, Int_net latch, Int_net init, Int_net next)

    Parameters
    ----------
    ctx: Int_ctx
    circ: Int_circuit
    latch: Int_net
    init: Int_net
    next: Int_net

    """
    return _api.set_latch_init_next(ctx, circ, latch, init, next)

def get_input(circ, n):
    """
    get_input(Int_circuit circ, unsigned int n) -> unsigned int

    Parameters
    ----------
    circ: Int_circuit
    n: unsigned int

    """
    return _api.get_input(circ, n)

def get_inputs_size(circ):
    """
    get_inputs_size(Int_circuit circ) -> unsigned int

    Parameters
    ----------
    circ: Int_circuit

    """
    return _api.get_inputs_size(circ)

def get_output(circ, n):
    """
    get_output(Int_circuit circ, unsigned int n) -> unsigned int

    Parameters
    ----------
    circ: Int_circuit
    n: unsigned int

    """
    return _api.get_output(circ, n)

def get_outputs_size(circ):
    """
    get_outputs_size(Int_circuit circ) -> unsigned int

    Parameters
    ----------
    circ: Int_circuit

    """
    return _api.get_outputs_size(circ)

def get_assumptions_size(circ):
    """
    get_assumptions_size(Int_circuit circ) -> unsigned int

    Parameters
    ----------
    circ: Int_circuit

    """
    return _api.get_assumptions_size(circ)

def get_assumption(circ, n):
    """
    get_assumption(Int_circuit circ, unsigned int n) -> unsigned int

    Parameters
    ----------
    circ: Int_circuit
    n: unsigned int

    """
    return _api.get_assumption(circ, n)

def get_proof_objectives_size(circ):
    """
    get_proof_objectives_size(Int_circuit circ) -> unsigned int

    Parameters
    ----------
    circ: Int_circuit

    """
    return _api.get_proof_objectives_size(circ)

def get_proof_objective(circ, n):
    """
    get_proof_objective(Int_circuit circ, unsigned int n) -> unsigned int

    Parameters
    ----------
    circ: Int_circuit
    n: unsigned int

    """
    return _api.get_proof_objective(circ, n)

def get_test_objectives_size(circ):
    """
    get_test_objectives_size(Int_circuit circ) -> unsigned int

    Parameters
    ----------
    circ: Int_circuit

    """
    return _api.get_test_objectives_size(circ)

def get_test_objective(circ, n):
    """
    get_test_objective(Int_circuit circ, unsigned int n) -> unsigned int

    Parameters
    ----------
    circ: Int_circuit
    n: unsigned int

    """
    return _api.get_test_objective(circ, n)

def is_boolean_type(t):
    """
    is_boolean_type(Int_type t) -> int

    Parameters
    ----------
    t: Int_type

    """
    return _api.is_boolean_type(t)

def is_int8_type(t):
    """
    is_int8_type(Int_type t) -> int

    Parameters
    ----------
    t: Int_type

    """
    return _api.is_int8_type(t)

def is_int16_type(t):
    """
    is_int16_type(Int_type t) -> int

    Parameters
    ----------
    t: Int_type

    """
    return _api.is_int16_type(t)

def is_int32_type(t):
    """
    is_int32_type(Int_type t) -> int

    Parameters
    ----------
    t: Int_type

    """
    return _api.is_int32_type(t)

def is_uint8_type(t):
    """
    is_uint8_type(Int_type t) -> int

    Parameters
    ----------
    t: Int_type

    """
    return _api.is_uint8_type(t)

def is_uint16_type(t):
    """
    is_uint16_type(Int_type t) -> int

    Parameters
    ----------
    t: Int_type

    """
    return _api.is_uint16_type(t)

def is_uint32_type(t):
    """
    is_uint32_type(Int_type t) -> int

    Parameters
    ----------
    t: Int_type

    """
    return _api.is_uint32_type(t)

def is_real_type(t):
    """
    is_real_type(Int_type t) -> int

    Parameters
    ----------
    t: Int_type

    """
    return _api.is_real_type(t)

def is_double_type(t):
    """
    is_double_type(Int_type t) -> int

    Parameters
    ----------
    t: Int_type

    """
    return _api.is_double_type(t)

def is_undef(ctx, net):
    """
    is_undef(Int_ctx ctx, Int_net net) -> int

    Parameters
    ----------
    ctx: Int_ctx
    net: Int_net

    """
    return _api.is_undef(ctx, net)

def is_true(ctx, net):
    """
    is_true(Int_ctx ctx, Int_net net) -> int

    Parameters
    ----------
    ctx: Int_ctx
    net: Int_net

    """
    return _api.is_true(ctx, net)

def is_false(ctx, net):
    """
    is_false(Int_ctx ctx, Int_net net) -> int

    Parameters
    ----------
    ctx: Int_ctx
    net: Int_net

    """
    return _api.is_false(ctx, net)

def is_number(ctx, net):
    """
    is_number(Int_ctx ctx, Int_net net) -> int

    Parameters
    ----------
    ctx: Int_ctx
    net: Int_net

    """
    return _api.is_number(ctx, net)

def is_not(ctx, x):
    """
    is_not(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_not(ctx, x)

def is_and(ctx, x):
    """
    is_and(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_and(ctx, x)

def is_or(ctx, x):
    """
    is_or(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_or(ctx, x)

def is_xor(ctx, x):
    """
    is_xor(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_xor(ctx, x)

def is_iff(ctx, x):
    """
    is_iff(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_iff(ctx, x)

def is_add(ctx, x):
    """
    is_add(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_add(ctx, x)

def is_mul(ctx, x):
    """
    is_mul(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_mul(ctx, x)

def is_eq(ctx, x):
    """
    is_eq(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_eq(ctx, x)

def is_leq(ctx, x):
    """
    is_leq(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_leq(ctx, x)

def is_lt(ctx, x):
    """
    is_lt(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_lt(ctx, x)

def is_geq(ctx, x):
    """
    is_geq(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_geq(ctx, x)

def is_gt(ctx, x):
    """
    is_gt(Int_ctx ctx, Int_net x) -> int

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.is_gt(ctx, x)

def is_input(ctx, circ, net):
    """
    is_input(Int_ctx ctx, Int_circuit circ, Int_net net) -> int

    Parameters
    ----------
    ctx: Int_ctx
    circ: Int_circuit
    net: Int_net

    """
    return _api.is_input(ctx, circ, net)

def is_output(ctx, circ, net):
    """
    is_output(Int_ctx ctx, Int_circuit circ, Int_net net) -> int

    Parameters
    ----------
    ctx: Int_ctx
    circ: Int_circuit
    net: Int_net

    """
    return _api.is_output(ctx, circ, net)

def is_latch(ctx, circ, net):
    """
    is_latch(Int_ctx ctx, Int_circuit circ, Int_net net) -> int

    Parameters
    ----------
    ctx: Int_ctx
    circ: Int_circuit
    net: Int_net

    """
    return _api.is_latch(ctx, circ, net)

def get_latch_init(arg1, circ, latch):
    """
    get_latch_init(Int_ctx arg1, Int_circuit circ, Int_net latch) -> Int_net

    Parameters
    ----------
    arg1: Int_ctx
    circ: Int_circuit
    latch: Int_net

    """
    return _api.get_latch_init(arg1, circ, latch)

def get_latch_next(ctx, circ, latch):
    """
    get_latch_next(Int_ctx ctx, Int_circuit circ, Int_net latch) -> Int_net

    Parameters
    ----------
    ctx: Int_ctx
    circ: Int_circuit
    latch: Int_net

    """
    return _api.get_latch_next(ctx, circ, latch)

def get_net_kind(ctx, x):
    """
    get_net_kind(Int_ctx ctx, Int_net x) -> Int_net_kind

    Parameters
    ----------
    ctx: Int_ctx
    x: Int_net

    """
    return _api.get_net_kind(ctx, x)
# This file is compatible with both classic and new-style classes.


